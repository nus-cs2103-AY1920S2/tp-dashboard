[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "//mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    archiveName \u003d \u0027naggyJoel.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u0027site-name\u0027: \u0027Naggy Joel\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s2-cs2103-w14-3.github.io/main/\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 10,
      "Vanessa1098": 2,
      "-": 152,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.storage.EventScheduleStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.storage.JsonEventScheduleStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.JsonSchoolworkTrackerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.RestaurantBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.SchoolworkTrackerStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new JsonRestaurantBookStorage(userPrefs.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTrackerStorage schedulerStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new JsonSchoolworkTrackerStorage(userPrefs.getSchedulerFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventScheduleStorage eventScheduleStorage \u003d new JsonEventScheduleStorage(userPrefs.getEventScheduleFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, restaurantBookStorage, schedulerStorage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                eventScheduleStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Optional\u003cReadOnlyRestaurantBook\u003e restaurantBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlyAddressBook initialPersonsData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ReadOnlyRestaurantBook initialRestaurantsData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Optional\u003cReadOnlySchoolworkTracker\u003e schedulerOptional;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Optional\u003cReadOnlyEventSchedule\u003e eventScheduleOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlySchoolworkTracker initialAssignmentsData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ReadOnlyEventSchedule initialEventsData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialPersonsData \u003d new AddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            restaurantBookOptional \u003d storage.readRestaurantBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (!restaurantBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RestaurantBook\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d restaurantBookOptional.orElseGet(SampleDataUtil::getSampleRestaurantBook);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            initialRestaurantsData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            schedulerOptional \u003d storage.readSchoolworkTracker();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (!schedulerOptional.isPresent()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty SchoolworkTracker.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d schedulerOptional.orElse(new SchoolworkTracker());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SchoolworkTracker\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SchoolworkTracker\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            initialAssignmentsData \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            eventScheduleOptional \u003d storage.readEventSchedule();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (!eventScheduleOptional.isPresent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty Events Schedule.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            initialEventsData \u003d eventScheduleOptional.orElse(new EventSchedule());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Events Schedule\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            initialEventsData \u003d new EventSchedule();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Events Schedule\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            initialEventsData \u003d new EventSchedule();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new ModelManager(initialPersonsData, initialRestaurantsData, initialAssignmentsData,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                initialEventsData, userPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 23,
      "-": 179,
      "ElysiaTanZY": 28,
      "hhjoel": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_BLANK_COMMAND_FORMAT \u003d \"Your keywords cannot be blank!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX \u003d \"The restaurant index is invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_NO_INFO \u003d \"This person has no existing information!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_LINE_NUMBER \u003d \"Line number does not exist in person\u0027s information.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_LINE_NUMBER \u003d \"Line number of remarks is not provided.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_LINE_NUMBER_RESTAURANT \u003d \"Line number of notes is not provided.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_LINE_NUMBER_REC \u003d \"Line number of recommended food notes is not provided.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_LINE_NUMBER_GOOD \u003d \"Line number of good food notes is not provided.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_LINE_NUMBER_BAD \u003d \"Line number of bad food notes is not provided.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_FILTERS \u003d \"Too many filters! Either deadline or estimated completion \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"time can be used to sort each time.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_RECOMMENDED_FOOD \u003d \"This restaurant has no existing recommended food.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_GOOD_FOOD \u003d \"This restaurant has no existing good food.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_BAD_FOOD \u003d \"This restaurant has no existing bad food.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_LINE_NUMBER_REC \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \"Line number does not exist in restaurant\u0027s recommended food notes.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_LINE_NUMBER_GOOD \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \"Line number does not exist in restaurant\u0027s good food notes.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_LINE_NUMBER_BAD \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \"Line number does not exist in restaurant\u0027s bad food notes.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Name and phone cannot be deleted!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX \u003d \"At least one recommended, good or bad food should be specified.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"Hi! I\u0027m Naggy Joel, the best social life manager you can ever have. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"If you are new, you can type \u0027help\u0027 in the command box below to see the list of commands that I understand.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_INDEX_NOT_INTEGER \u003d \"LINE_NUMBER must be an integer!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 2,
      "Vanessa1098": 21,
      "-": 11,
      "ElysiaTanZY": 4,
      "hhjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/EditAssignmentDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Stores the details to edit the assignment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * corresponding field value of the assignment."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Workload workload;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptor() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptor(EditAssignmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setTitle(toCopy.title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setWorkload(toCopy.workload);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setStatus(toCopy.status);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return CollectionUtil.isAnyNonNull(title, workload, deadline, status);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setTitle(Title title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setWorkload(Workload workload) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cWorkload\u003e getWorkload() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Optional.ofNullable(workload);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * edited with {@code editAssignmentDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment createEditedAssignment(Assignment assignmentToEdit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assert assignmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Title updatedTitle \u003d getTitle().orElse(assignmentToEdit.getTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Workload updatedWorkload \u003d getWorkload().orElse(assignmentToEdit.getWorkload());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Deadline updatedDeadline \u003d getDeadline().orElse(assignmentToEdit.getDeadline());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Status updatedStatus \u003d getStatus().orElse(assignmentToEdit.getStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Assignment(updatedTitle, updatedDeadline, updatedWorkload, updatedStatus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof EditAssignmentDescriptor)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor e \u003d (EditAssignmentDescriptor) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 getWorkload().equals(e.getWorkload())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/EditEventDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Place;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * corresponding field value of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EditEventDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private EventTitle eventTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Place place;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setEventTitle(toCopy.eventTitle);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setEventDate(toCopy.eventDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setPlace(toCopy.place);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return CollectionUtil.isAnyNonNull(eventTitle, eventDate, duration, place);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEventTitle(EventTitle eventTitle) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventTitle \u003d eventTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cEventTitle\u003e getEventTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Optional.ofNullable(eventTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEventDate(EventDate eventDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cEventDate\u003e getEventDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Optional.ofNullable(eventDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setPlace(Place place) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cPlace\u003e getPlace() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Optional.ofNullable(place);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Creates and returns an {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Event createEditedEvent(Event eventToEdit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventTitle updatedEventTitle \u003d getEventTitle().orElse(eventToEdit.getEventTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventDate updatedEventDate \u003d getEventDate().orElse(eventToEdit.getEventDate());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Duration updatedDuration \u003d getDuration().orElse(eventToEdit.getDuration());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Place updatedPlace \u003d getPlace().orElse(eventToEdit.getPlace());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new Event(updatedEventTitle, updatedEventDate, updatedDuration, updatedPlace);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return getEventTitle().equals(e.getEventTitle())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 getEventDate().equals(e.getEventDate())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 getDuration().equals(e.getDuration())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 getPlace().equals(e.getPlace());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/EditPersonDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * corresponding field value of the person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditPersonDescriptor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Organization organization;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cRemark\u003e remarks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Set\u003cTag\u003e tagsToBeDeleted;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Set\u003cTag\u003e emptyTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setAddress(toCopy.address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setOrganization(toCopy.organization);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setTagsToBeAdded(toCopy.tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setTagsToBeDeleted(toCopy.tagsToBeDeleted);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setTagsToEmpty(toCopy.emptyTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, phone, email, address, remarks, birthday, organization, tags,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            tagsToBeDeleted, emptyTags, organization);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setOrganization(Organization organization) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cOrganization\u003e getOrganization() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Optional.ofNullable(organization);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets {@code remarks} to this object\u0027s {@code remarks}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * A defensive copy of {@code remarks} is used internally."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setRemarks(ArrayList\u003cRemark\u003e remarks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remarks \u003d (remarks !\u003d null) ? new ArrayList\u003c\u003e(remarks) : null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable remark set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code remarks} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cArrayList\u003cRemark\u003e\u003e getRemarks() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return (remarks !\u003d null) ? Optional.of(remarks) : Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setTagsToBeAdded(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets {@code tags} that are to be deleted to this object\u0027s {@code tagsToBeDeleted}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A defensive copy of {@code tagsToBeDeleted} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setTagsToBeDeleted(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.tagsToBeDeleted \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tagsToBeDeleted} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTagsToBeDeleted() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return (tagsToBeDeleted !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagsToBeDeleted)) : Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code emptyTags}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A defensive copy of {@code emptyTags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setTagsToEmpty(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.emptyTags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable empty tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code emptyTags} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getEmptyTagSet() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return (emptyTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(emptyTags)) : null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Person createEditedPerson(Person personToEdit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Name updatedName \u003d getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Phone updatedPhone \u003d getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Email updatedEmail \u003d getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Address updatedAddress \u003d getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e updatedRemark \u003d getRemarks().orElse(personToEdit.getRemark());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Birthday updatedBirthday \u003d getBirthday().orElse(personToEdit.getBirthday());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Organization updatedOrganization \u003d getOrganization().orElse(personToEdit.getOrganization());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (getEmptyTagSet() !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            updatedTags.clear();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        updatedTags.addAll(getTags().orElse(new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        updatedTags.removeAll(getTagsToBeDeleted().orElse(new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                updatedBirthday, updatedOrganization, updatedTags);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 getOrganization().equals(e.getOrganization())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getRemarks().equals(e.getRemarks())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 13,
      "Vanessa1098": 167,
      "ElysiaTanZY": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/EditRestaurantDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Stores the details to edit the restaurant with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * corresponding field value of the restaurant."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class EditRestaurantDescriptor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Visit visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Hours hours;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Cuisine cuisine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public EditRestaurantDescriptor() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public EditRestaurantDescriptor(EditRestaurantDescriptor toCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setLocation(toCopy.location);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setVisit(toCopy.visit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setHours(toCopy.hours);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setCuisine(toCopy.cuisine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setPrice(toCopy.price);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, location, visit, hours, cuisine, price);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setVisit(Visit visit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cVisit\u003e getVisit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(visit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setHours(Hours hours) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cHours\u003e getHours() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(hours);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setCuisine(Cuisine cuisine) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cCuisine\u003e getCuisine() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(cuisine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setPrice(Price price) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates and returns a {@code Restaurant} with the details of {@code restaurantToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * edited with {@code editRestaurantDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Restaurant createEditedRestaurant(Restaurant restaurantToEdit) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assert restaurantToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Name updatedName \u003d getName().orElse(restaurantToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Location updatedLocation \u003d getLocation().orElse(restaurantToEdit.getLocation());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Visit updatedVisit \u003d getVisit().orElse(restaurantToEdit.getVisit());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Hours updatedHours \u003d getHours().orElse(restaurantToEdit.getHours());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Cuisine updatedCuisine \u003d getCuisine().orElse(restaurantToEdit.getCuisine());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Price updatedPrice \u003d getPrice().orElse(restaurantToEdit.getPrice());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedRecFood \u003d restaurantToEdit.getRecommendedFood();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedGoodFood \u003d restaurantToEdit.getGoodFood();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedBadFood \u003d restaurantToEdit.getBadFood();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant(updatedName, updatedLocation, updatedHours, updatedPrice, updatedCuisine,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedVisit, updatedRecFood, updatedGoodFood, updatedBadFood);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!(other instanceof EditRestaurantDescriptor)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        EditRestaurantDescriptor e \u003d (EditRestaurantDescriptor) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 getVisit().equals(e.getVisit())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 getHours().equals(e.getHours())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 getCuisine().equals(e.getCuisine())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 getPrice().equals(e.getPrice());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * API of the Logic component of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons for the result panel*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonListResult();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of restaurants */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons with upcoming birthdays for the result panel */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getBdayList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** Returns an unmodifiable view of the user\u0027s upcoming schedule for the next n days */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cDay\u003e getSchedule();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 11,
      "-": 49,
      "ElysiaTanZY": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * The main LogicManager of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (command.toString().contains(\"(ab)\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (command.toString().contains(\"(st)\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                storage.saveSchoolworkTracker(model.getSchoolworkTracker());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (command.toString().contains(\"(ev)\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                storage.saveEventSchedule(model.getEventSchedule());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (command.toString().contains(\"(rt)\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                storage.saveRestaurantBook(model.getRestaurantBook());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (command.toString().contains(\"undo\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                storage.saveSchoolworkTracker(model.getSchoolworkTracker());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                storage.saveEventSchedule(model.getEventSchedule());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                storage.saveRestaurantBook(model.getRestaurantBook());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return model.getFilteredPersonListResult();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return model.getBdayListResult();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cDay\u003e getSchedule() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return model.getSchedule();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 12,
      "Vanessa1098": 23,
      "-": 78,
      "ElysiaTanZY": 20,
      "hhjoel": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Adds a new assignment to the Schoolwork Tracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds an assignment to the scheduler. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_ESTHOURS + \"ESTIMATED HOURS\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_TITLE + \"CS2103 Team Project \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_DEADLINE + \"2020-04-18 23:59 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_ESTHOURS + \"180\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment added:\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment has already been recorded. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Congratulations, you don\u0027t have a new assignment!! (\u003d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Assignment toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AddAssignmentCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        toAdd \u003d assignment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (model.hasAssignment(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            false, false, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof AddAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAssignmentCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "ElysiaTanZY": 64,
      "hhjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds a person to the address book.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_ORGANIZATION + \"ORGANIZATION] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + PREFIX_BIRTHDAY + \"01-15 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_ORGANIZATION + \"NUS Climbing Club \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 5,
      "-": 62,
      "ElysiaTanZY": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTTITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Adds an Event to the schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ev)add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds an event to your schedule. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTTITLE + \"EVENT TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTDATE + \"EVENT DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_PLACE + \"LOCATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTTITLE + \"Facebook job interview \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTDATE + \"2020-04-18 10:00 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_DURATION + \"3 \" // hours"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_PLACE + \"Facebook APAC HQ\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event has already been recorded. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Stop going out so much, now got coronavirus! \u003e:(\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_CLASHING_EVENT \u003d \"This event clashes with \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"some of your other events. You can\u0027t be in 2 places at once!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (model.hasClashingEvent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if there is an assignment due on the same date as the event,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we throw some warnings here but we still allow them to add the event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (model.hasAssignmentDueOnSameDate(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            String warning \u003d \"NAG NAG NAG! You have assignment(s) due on the same day as this event. \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    + \"Please manage your time properly and don\u0027t attend this event if you haven\u0027t \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    + \"finished your homework.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return new CommandResult(String.format(warning, toAdd), false, false,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    false, false, true, false, false, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, true, false, false, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nidorinas": 84,
      "Vanessa1098": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Adds a remark to an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)addnote\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Stores the additional information of the person identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information, input will be added as new information \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"on new line.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_REMARK + \" [INFO]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No remark added to Person: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cRemark\u003e newRemarks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param remarks of the person to be updated to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddInfoCommand(Index index, ArrayList\u003cRemark\u003e remarks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, remarks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cRemark\u003e updatedRemarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Remark i : personToEdit.getRemark()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRemarks.add(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (remarks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (int i \u003d 0; i \u003c remarks.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedRemarks.add(remarks.get(i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                personToEdit.getEmail(), personToEdit.getAddress(), updatedRemarks,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getBirthday(), personToEdit.getOrganization(), personToEdit.getTags());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String message \u003d (remarks.size() !\u003d 0) ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof AddInfoCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand e \u003d (AddInfoCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 remarks.equals(e.remarks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable remark set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code remarks} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Optional\u003cArrayList\u003cRemark\u003e\u003e getRemarks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return (newRemarks !\u003d null) ? Optional.of(newRemarks) : Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 112,
      "hhjoel": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRestaurantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Adds a new assignment to the Schoolwork Tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class AddRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Adds a restaurant to the restaurant book.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_RESTAURANT + \"RESTAURANT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_VISITED + \"VISITED \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_OPERATING_HOURS + \"OPERATING_HOURS] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_CUISINE + \"CUISINE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_RESTAURANT + \"Ameens \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_LOCATION + \"Clementi \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_OPERATING_HOURS + \"0900:2300 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_PRICE + \"$ \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_CUISINE + \"Indian \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_VISITED + \"Yes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New restaurant added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"This restaurant already exists in the restaurant book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Restaurant toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates an AddRestaurantCommand to add the specified {@code Restaurant}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public AddRestaurantCommand(Restaurant restaurant) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        toAdd \u003d restaurant;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (model.hasRestaurant(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.addRestaurant(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, true, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 7,
      "hhjoel": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRestaurantNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECOMMENDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Adds a remark to an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddRestaurantNoteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)addnote\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Store the food note of the restaurant identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last restaurant listing. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information, input will be added to the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"existing information.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_RECOMMENDED + \" [RECOMMENDED_FOOD] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_GOOD + \" [GOOD_FOOD] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_BAD + \" [BAD_FOOD]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_RECOMMENDED + \"Chicken chop \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_GOOD + \"Truffle fries \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_BAD + \"Risotto\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_ADD_NOTE_SUCCESS \u003d \"Added note to Restaurant: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_REC \u003d \"No recommended food to be added is provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_GOOD \u003d \"No good food to be added is provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_BAD \u003d \"No bad food to be added is provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e recommendedFood;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e goodFood;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e badFood;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the restaurant in the filtered restaurant list to edit the notes"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param recommendedFood notes of the restaurant to be updated to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param goodFood notes of the restaurant to be updated to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param badFood notes of the restaurant to be updated to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddRestaurantNoteCommand(Index index, ArrayList\u003cNote\u003e recommendedFood,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                    ArrayList\u003cNote\u003e goodFood, ArrayList\u003cNote\u003e badFood) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood \u003d recommendedFood;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood \u003d goodFood;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood \u003d badFood;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedRecFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getRecommendedFood()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRecFood.add(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedGoodFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getGoodFood()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedGoodFood.add(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedBadFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getBadFood()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedBadFood.add(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (recommendedFood.size() !\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (int i \u003d 0; i \u003c recommendedFood.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedRecFood.add(recommendedFood.get(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (goodFood.size() !\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            for (int i \u003d 0; i \u003c goodFood.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedGoodFood.add(goodFood.get(i));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (badFood.size() !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            for (int i \u003d 0; i \u003c badFood.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedBadFood.add(badFood.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant editedRestaurant \u003d new Restaurant(restaurantToEdit.getName(), restaurantToEdit.getLocation(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                restaurantToEdit.getHours(), restaurantToEdit.getPrice(), restaurantToEdit.getCuisine(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantToEdit.getVisit(), updatedRecFood,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedGoodFood, updatedBadFood);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_NOTE_SUCCESS, editedRestaurant),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof AddRestaurantNoteCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddRestaurantNoteCommand e \u003d (AddRestaurantNoteCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 recommendedFood.equals(e.recommendedFood)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 goodFood.equals(e.goodFood)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 badFood.equals(e.badFood);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 111,
      "ElysiaTanZY": 5,
      "hhjoel": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All data has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Clears all entries in the application.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 19,
      "ElysiaTanZY": 4,
      "hhjoel": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** The third panel should display the specified person. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final boolean get;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** The third panel should display the assignment list. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final boolean assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** The third panel should display the event schedule. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final boolean event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** The third panel should display the restaurant list. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final boolean restaurant;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** The third panel should display the upcoming birthdays for the next five days (Including today). */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final boolean showBirthday;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** The third panel should display the estimated workload for the next n days based on saved assignments. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final boolean showSchedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean get,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         boolean assignment, boolean event, boolean birthday, boolean restaurant,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         boolean showSchedule) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.get \u003d get;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.showBirthday \u003d birthday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.showSchedule \u003d showSchedule;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this(feedbackToUser, false, false, false, false,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isGet() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return get;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isAssignment() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean isRestaurant() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return restaurant;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean isShowBirthday() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return showBirthday;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean isShowSchedule() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return showSchedule;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 get \u003d\u003d otherCommandResult.get"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 assignment \u003d\u003d otherCommandResult.assignment"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 event \u003d\u003d otherCommandResult.event"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 restaurant \u003d\u003d otherCommandResult.restaurant"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 showBirthday \u003d\u003d otherCommandResult.showBirthday"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 showSchedule \u003d\u003d otherCommandResult.showSchedule;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, get,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                assignment, event, showBirthday, restaurant, showSchedule);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 12,
      "Vanessa1098": 33,
      "-": 67,
      "ElysiaTanZY": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Deletes an assignment using it\u0027s displayed index from the SchoolworkTracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DeleteAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the assignment identified by the \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"index number used in the displayed assignment list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DELETE_ASSIGNMENT_SUCCESS \u003d \"Deleted Assignment: %1$s\\nYou now have one less \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"assignment. Keep up the good work!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public DeleteAssignmentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ASSIGNMENT_SUCCESS, assignmentToDelete),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            false, false, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            || (other instanceof DeleteAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteAssignmentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the person identified by the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"index number used in the displayed person list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 48,
      "ElysiaTanZY": 6,
      "hhjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Deletes an event using its displayed index from the Event Schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ev)delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the event identified by the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"index number used in the displayed event schedule.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Ok, I\u0027ve deleted the following \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"event for you:\\n %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                false, false, false, false, true, false, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Deletes a remark of an existing person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteInfoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)deletenote\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Delete the information of the person identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information at the line number \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"it will be deleted.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER + \"LINE_NUMBER] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER + \"2 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_REMOVE_REMARK_SUCCESS \u003d \"Deleted remark for Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cInteger\u003e line;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param line number of a specific note in the information stored"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteInfoCommand(Index index, ArrayList\u003cInteger\u003e line) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (personToEdit.getRemark().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_INFO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Integer i : line) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i \u003e personToEdit.getRemark().size() || i \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                remarks.add(personToEdit.getRemark().get(i - 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cRemark\u003e updatedRemarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Remark i : personToEdit.getRemark()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRemarks.add(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Remark r : remarks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRemarks.remove(r);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                personToEdit.getAddress(), updatedRemarks, personToEdit.getBirthday(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getOrganization(), personToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_REMARK_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof DeleteInfoCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        DeleteInfoCommand e \u003d (DeleteInfoCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 line \u003d\u003d e.line;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 95,
      "ElysiaTanZY": 7,
      "hhjoel": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRestaurantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DeleteRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the restaurant identified by the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"index number used in the displayed restaurant list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DELETE_RESTAURANT_SUCCESS \u003d \"Deleted Restaurant: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public DeleteRestaurantCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant restaurantToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.deleteRestaurant(restaurantToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RESTAURANT_SUCCESS, restaurantToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof DeleteRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRestaurantCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRestaurantNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_RECOMMENDED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Deletes a note of an existing restaurant in the restaurant book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteRestaurantNoteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)deletenote\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Deletes the food note of the restaurant identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last restaurant listing.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX and LINE_NUMBER (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_RECOMMENDED + \"LINE_NUMBER] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_GOOD + \"LINE_NUMBER] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_BAD + \"LINE_NUMBER]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_RECOMMENDED + \"2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_GOOD + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_BAD + \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted notes for restaurant: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cInteger\u003e lineRec;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cInteger\u003e lineGood;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cInteger\u003e lineBad;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the restaurant in the filtered restaurant list to edit the note"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineRec number of a specific note in the recommended food information stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineGood number of a specific note in the good food information stored"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineBad number of a specific note in the bad food information stored"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteRestaurantNoteCommand(Index index, ArrayList\u003cInteger\u003e lineRec, ArrayList\u003cInteger\u003e lineGood,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                       ArrayList\u003cInteger\u003e lineBad) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, lineRec, lineGood, lineBad);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineRec \u003d lineRec;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineGood \u003d lineGood;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineBad \u003d lineBad;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e recNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e goodNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e badNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineRec.size() !\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getRecommendedFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_RECOMMENDED_FOOD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (Integer i : lineRec) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (i \u003e restaurantToEdit.getRecommendedFood().size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_REC);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                recNotes.add(restaurantToEdit.getRecommendedFood().get(i - 1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineGood.size() !\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getGoodFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_GOOD_FOOD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (Integer i : lineGood) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (i \u003e restaurantToEdit.getGoodFood().size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_GOOD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                goodNotes.add(restaurantToEdit.getGoodFood().get(i - 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineBad.size() !\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getBadFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_BAD_FOOD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (Integer i : lineBad) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (i \u003e restaurantToEdit.getBadFood().size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_BAD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                badNotes.add(restaurantToEdit.getBadFood().get(i - 1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedRecFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getRecommendedFood()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRecFood.add(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedGoodFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getGoodFood()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedGoodFood.add(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedBadFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getBadFood()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedBadFood.add(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Note n : recNotes) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRecFood.remove(n);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Note n : goodNotes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedGoodFood.remove(n);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Note n : badNotes) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedBadFood.remove(n);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant editedRestaurant \u003d new Restaurant(restaurantToEdit.getName(), restaurantToEdit.getLocation(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                restaurantToEdit.getHours(), restaurantToEdit.getPrice(), restaurantToEdit.getCuisine(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantToEdit.getVisit(), updatedRecFood,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedGoodFood, updatedBadFood);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, editedRestaurant),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof DeleteRestaurantNoteCommand)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        DeleteRestaurantNoteCommand e \u003d (DeleteRestaurantNoteCommand) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineRec \u003d\u003d e.lineRec"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineGood \u003d\u003d e.lineGood"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineBad \u003d\u003d e.lineBad;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 147,
      "hhjoel": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Edits the details of an existing assignment in the scheduler."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)edit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the title, deadline, estimated workload, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        + \"or the completion status of the assignment identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"by the index number used in the displayed assignment list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"[\" + PREFIX_ESTHOURS + \"ESTIMATED_HOURS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"[\" + PREFIX_STATUS + \"STATUS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + PREFIX_TITLE + \"CS2103 tP \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + PREFIX_DEADLINE + \"2020-11-11 23:59 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + PREFIX_ESTHOURS + \"5.0 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + PREFIX_STATUS + \"Completed\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_EDIT_ASSIGNMENT_SUCCESS \u003d \"Edited Assignment: \\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the scheduler.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final EditAssignmentDescriptor editAssignmentDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param editAssignmentDescriptor details to edit the assignment with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentCommand(Index index, EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.editAssignmentDescriptor \u003d new EditAssignmentDescriptor(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d editAssignmentDescriptor.createEditedAssignment(assignmentToEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!assignmentToEdit.isSameAssignment(editedAssignment) \u0026\u0026 model.hasAssignment(editedAssignment)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.setAssignment(assignmentToEdit, editedAssignment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            false, false, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof EditAssignmentCommand)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand e \u003d (EditAssignmentCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 editAssignmentDescriptor.equals(e.editAssignmentDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 103,
      "hhjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Other than tags, existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"If a tag not currently present is specified for deletion, it will be ignored. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Input a single \" + PREFIX_DELETE_TAG + \" followed by an empty string to clear\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"all current tags.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_ORGANIZATION + \"ORGANIZATION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"[\" + PREFIX_DELETE_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d editPersonDescriptor.createEditedPerson(personToEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 4,
      "-": 92,
      "ElysiaTanZY": 10,
      "hhjoel": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTTITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.EditEventDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Edits the details of an existing event in the EventSchedule."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ev)edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the estimated event identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_EVENTTITLE + \"EVENT_TITLE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_EVENTDATE + \"EVENT_DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"[\" + PREFIX_PLACE + \"PLACE]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTTITLE + \"Class outing \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_EVENTDATE + \"2020-11-12 23:59 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_DURATION + \"5 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_PLACE + \"Gardens by the Bay\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited event: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event schedule.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param index of the event in the filtered Event list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Event editedEvent \u003d editEventDescriptor.createEditedEvent(eventToEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, eventToEdit),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                false, false, false, false, true, false, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 105,
      "hhjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Edit a remark of an existing person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)editnote\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edit the information of the person identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information at the line number, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"the input will added on to the existing information.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX and LINE_NUMBER (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER + \"LINE_NUMBER \" + PREFIX_REMARK + \"INFO\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER + \"2 \" + PREFIX_REMARK + \" Likes to swim.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EDIT_REMARK_SUCCESS \u003d \"Edited remark for Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No remark to be edited is provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param line number of a specific note in the information stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditInfoCommand(Index index, int line, Remark remark) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, line, remark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (personToEdit.getRemark().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_INFO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (line \u003e personToEdit.getRemark().size() \u0026\u0026 personToEdit.getRemark().size() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (remark.value.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cRemark\u003e updatedRemarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Remark i : personToEdit.getRemark()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRemarks.add(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        updatedRemarks.set(line - 1, remark);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                personToEdit.getAddress(), updatedRemarks, personToEdit.getBirthday(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                personToEdit.getOrganization(), personToEdit.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REMARK_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof EditInfoCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand e \u003d (EditInfoCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u0026\u0026 line \u003d\u003d e.line;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 100,
      "hhjoel": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditRestaurantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.EditRestaurantDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Edits the details of an existing restaurant in the restaurant book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class EditRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the details of the restaurant identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"by the index number used in the displayed restaurant list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_RESTAURANT + \"RESTAURANT] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_VISITED + \"VISITED] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_OPERATING_HOURS + \"OPERATING_HOURS] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"[\" + PREFIX_CUISINE + \"CUISINE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + PREFIX_OPERATING_HOURS + \"0700:2200 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_EDIT_RESTAURANT_SUCCESS \u003d \"Edited Restaurant: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"This restaurant already exists in the restaurant book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final EditRestaurantDescriptor editRestaurantDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param index of the restaurant in the filtered restaurant list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param editRestaurantDescriptor details to edit the restaurant with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public EditRestaurantCommand(Index index, EditRestaurantDescriptor editRestaurantDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.editRestaurantDescriptor \u003d new EditRestaurantDescriptor(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant editedRestaurant \u003d editRestaurantDescriptor.createEditedRestaurant(restaurantToEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!restaurantToEdit.isSameRestaurant(editedRestaurant) \u0026\u0026 model.hasRestaurant(editedRestaurant)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RESTAURANT_SUCCESS, editedRestaurant),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!(other instanceof EditRestaurantCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        EditRestaurantCommand e \u003d (EditRestaurantCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 editRestaurantDescriptor.equals(e.editRestaurantDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditRestaurantNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_RECOMMENDED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECOMMENDED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Edit a note of an existing restaurant in the restaurant book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditRestaurantNoteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)editnote\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Edits the food note of the restaurant identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"by the index number used in the last restaurant listing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"If there is existing information at the line number, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"the input will added on to the existing information.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX and LINE_NUMBER (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_RECOMMENDED + \"LINE_NUMBER \" + PREFIX_RECOMMENDED + \"INFO] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_GOOD + \"LINE_NUMBER \" + PREFIX_GOOD + \"INFO] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"[\" + PREFIX_LINE_NUMBER_BAD + \"LINE_NUMBER \" + PREFIX_BAD + \"INFO]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_RECOMMENDED + \"2 \" + PREFIX_RECOMMENDED + \"Lobster pasta \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_GOOD + \"1 \" + PREFIX_GOOD + \"Mushroom soup \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_LINE_NUMBER_BAD + \"3 \" + PREFIX_BAD + \"Salad\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited notes for restaurant: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_REC \u003d \"No recommended food to be edited is provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_GOOD \u003d \"No good food to be edited is provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_EMPTY_BAD \u003d \"No bad food to be edited is provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int lineRec;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int lineGood;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int lineBad;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Note recommendedFood;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Note goodFood;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Note badFood;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the restaurant in the filtered restaurant list to edit the note"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineRec number of a specific note in the recommended food information stored"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineGood number of a specific note in the good food information stored"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param lineBad number of a specific note in the bad food information stored"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param recommendedFood of the restaurant to be updated to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param goodFood of the restaurant to be updated to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param badFood of the restaurant to be updated to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditRestaurantNoteCommand(Index index, int lineRec, int lineGood,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                     int lineBad, Note recommendedFood, Note goodFood, Note badFood) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireAllNonNull(index, lineRec, lineGood, lineBad, recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineRec \u003d lineRec;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineGood \u003d lineGood;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.lineBad \u003d lineBad;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood \u003d recommendedFood;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood \u003d goodFood;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood \u003d badFood;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineRec !\u003d -1) { //Checks if recommended food is to be edited"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getRecommendedFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_RECOMMENDED_FOOD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (lineRec \u003e restaurantToEdit.getRecommendedFood().size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_REC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineGood !\u003d -1) { //Checks if good food is to be edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getGoodFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_GOOD_FOOD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (lineGood \u003e restaurantToEdit.getGoodFood().size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_GOOD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineBad !\u003d -1) { //Checks if bad food is to be edited"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (restaurantToEdit.getBadFood().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_BAD_FOOD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (lineBad \u003e restaurantToEdit.getBadFood().size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LINE_NUMBER_BAD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedRecFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getRecommendedFood()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRecFood.add(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedGoodFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getGoodFood()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedGoodFood.add(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cNote\u003e updatedBadFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Note i : restaurantToEdit.getBadFood()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedBadFood.add(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineRec !\u003d -1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedRecFood.set(lineRec - 1, recommendedFood);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineGood !\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedGoodFood.set(lineGood - 1, goodFood);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (lineBad !\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            updatedBadFood.set(lineBad - 1, badFood);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Restaurant editedRestaurant \u003d new Restaurant(restaurantToEdit.getName(), restaurantToEdit.getLocation(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                restaurantToEdit.getHours(), restaurantToEdit.getPrice(), restaurantToEdit.getCuisine(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantToEdit.getVisit(), updatedRecFood,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                updatedGoodFood, updatedBadFood);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTE_SUCCESS, editedRestaurant),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof EditRestaurantNoteCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditRestaurantNoteCommand e \u003d (EditRestaurantNoteCommand) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 recommendedFood.equals(e.recommendedFood)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineRec \u003d\u003d e.lineRec"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 goodFood.equals(e.goodFood)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineGood \u003d\u003d e.lineGood"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 badFood.equals(e.badFood)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 lineBad \u003d\u003d e.lineBad;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 154,
      "hhjoel": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Exits the program.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.OrganizationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \" At least one optional filed needs to be specified\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" [o/ORGANIZATION] [n/NAME] [t/TAG]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_ORGANIZATION + \"NUS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + PREFIX_NAME + \" Lim\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final OrganizationContainsKeywordsPredicate organizationPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final TagsContainsKeywordsPredicate tagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FindCommand(OrganizationContainsKeywordsPredicate organizationPredicate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                       NameContainsKeywordsPredicate namePredicate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                       TagsContainsKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we split the different keywords into different predicates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organizationPredicate \u003d organizationPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int osize \u003d organizationPredicate.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int nsize \u003d namePredicate.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int tsize \u003d tagPredicate.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (osize \u003d\u003d 0 \u0026\u0026 nsize \u003d\u003d 0 \u0026\u0026 tsize !\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(tagPredicate); // 001"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize \u003d\u003d 0 \u0026\u0026 nsize !\u003d 0 \u0026\u0026 tsize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(namePredicate); // 010"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize \u003d\u003d 0 \u0026\u0026 nsize !\u003d 0 \u0026\u0026 tsize !\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(namePredicate.and(tagPredicate)); // 011"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize !\u003d 0 \u0026\u0026 nsize \u003d\u003d 0 \u0026\u0026 tsize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(organizationPredicate); // 100"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize !\u003d 0 \u0026\u0026 nsize \u003d\u003d 0 \u0026\u0026 tsize !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(organizationPredicate.and(tagPredicate)); // 101"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize !\u003d 0 \u0026\u0026 nsize !\u003d 0 \u0026\u0026 tsize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(organizationPredicate.and(namePredicate)); // 110"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (osize !\u003d 0 \u0026\u0026 nsize !\u003d 0 \u0026\u0026 tsize !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredPersonList(organizationPredicate.and(namePredicate).and(tagPredicate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 organizationPredicate.equals(((FindCommand) other).organizationPredicate)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 namePredicate.equals(((FindCommand) other).namePredicate)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((FindCommand) other).tagPredicate)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 43,
      "Vanessa1098": 2,
      "-": 32,
      "ElysiaTanZY": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindRestaurantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.restaurant.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.restaurant.RNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Finds and lists all restaurants in restaurant book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class FindRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Finds all restaurants whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all restaurants whose names contain \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \" [\" + PREFIX_RESTAURANT + \"RESTAURANT NAME] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \" [\" + PREFIX_LOCATION + \"LOCATION] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_RESTAURANT + \"McDonalds \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final RNameContainsKeywordsPredicate rNamePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final LocationContainsKeywordsPredicate locationPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FindRestaurantCommand(RNameContainsKeywordsPredicate rNamePredicate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                       LocationContainsKeywordsPredicate locationPredicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // we split the different keywords into different predicates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.rNamePredicate \u003d rNamePredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.locationPredicate \u003d locationPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (rNamePredicate.size() \u003d\u003d 0 \u0026\u0026 locationPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredRestaurantList(locationPredicate); // 01"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (rNamePredicate.size() !\u003d 0 \u0026\u0026 locationPredicate.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredRestaurantList(rNamePredicate); // 10"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (rNamePredicate.size() !\u003d 0 \u0026\u0026 locationPredicate.size() !\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            model.updateFilteredRestaurantList(rNamePredicate.and(locationPredicate)); // 11"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } // we don\u0027t do anything for the case 00"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int numRestaurants \u003d model.getFilteredRestaurantList().size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String successMessage \u003d Integer.toString(numRestaurants) + \" restaurant(s) listed!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // We edit the commandResult so it shows the restaurant panel."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                String.format(successMessage, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof FindRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 rNamePredicate.equals(((FindRestaurantCommand) other).rNamePredicate)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 locationPredicate.equals(((FindRestaurantCommand) other).locationPredicate)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Lists a person in the address book to the user in detail."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class GetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)get\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Displays all information relating to the contact.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param index of the person in the filtered person list to retrieve information"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public GetCommand(Index index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person personToGet \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(personToGet, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model.updateFilteredPersonListResult(personExistPredicate, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                model.getFilteredPersonListResult().size()), false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof GetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 index.equals(((GetCommand) other).index)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 61,
      "hhjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION1 \u003d \"Shows program usage instructions\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION2 \u003d \"Shows a command in detail.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION1 + \".\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + COMMAND_WORD + \" h/INDEX: \" + COMMAND_FUNCTION2 + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_HELP + \"3 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE \u003d \"Here are the list of commands: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"1. \" + HelpCommand.COMMAND_WORD + \": \" + HelpCommand.COMMAND_FUNCTION1 + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"2. \" + HelpCommand.COMMAND_WORD + \" h/INDEX: shows command usage in detail \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"(e.g. \\\"help h/3\\\" for undo)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"3. \" + UndoCommand.COMMAND_WORD + \": \" + UndoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"4. \" + RedoCommand.COMMAND_WORD + \": \" + RedoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"5. \" + ClearCommand.COMMAND_WORD + \": \" + ClearCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"6. \" + ExitCommand.COMMAND_WORD + \": \" + ExitCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"\\nAddress Book Commands:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"7. \" + AddCommand.COMMAND_WORD + \": \" + AddCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"8. \" + EditCommand.COMMAND_WORD + \": \" + EditCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"9. \" + DeleteCommand.COMMAND_WORD + \": \" + DeleteCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"10. \" + AddInfoCommand.COMMAND_WORD + \": \" + AddInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"11. \" + EditInfoCommand.COMMAND_WORD + \": \" + EditInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"12. \" + DeleteInfoCommand.COMMAND_WORD + \": \" + DeleteInfoCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"13. \" + ListCommand.COMMAND_WORD + \": \" + ListCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"14. \" + FindCommand.COMMAND_WORD + \": \" + FindCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"15. \" + GetCommand.COMMAND_WORD + \": \" + GetCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"16. \" + ShowBirthdayCommand.COMMAND_WORD + \": \" + ShowBirthdayCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"\\nRestaurant Book Commands:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"17. \" + AddRestaurantCommand.COMMAND_WORD + \": \" + AddRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"18. \" + EditRestaurantCommand.COMMAND_WORD + \": \" + EditRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"19. \" + DeleteRestaurantCommand.COMMAND_WORD + \": \" + DeleteRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"20. \" + AddRestaurantNoteCommand.COMMAND_WORD + \": \" + AddRestaurantNoteCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"21. \" + EditRestaurantNoteCommand.COMMAND_WORD + \": \" + EditRestaurantNoteCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"22. \" + DeleteRestaurantNoteCommand.COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + DeleteRestaurantNoteCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"23. \" + ListRestaurantCommand.COMMAND_WORD + \": \" + ListRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"24. \" + FindRestaurantCommand.COMMAND_WORD + \": \" + FindRestaurantCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"\\nSchoolwork Tracker Commands:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"25. \" + AddAssignmentCommand.COMMAND_WORD + \": \" + AddAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"26. \" + EditAssignmentCommand.COMMAND_WORD + \": \" + EditAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"27. \" + DeleteAssignmentCommand.COMMAND_WORD + \": \" + DeleteAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"28. \" + ListAssignmentCommand.COMMAND_WORD + \": \" + ListAssignmentCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"29. \" + ScheduleCommand.COMMAND_WORD + \": \" + ScheduleCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"\\nEvent Tracker Commands:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"30. \" + AddEventCommand.COMMAND_WORD + \": \" + AddEventCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"31. \" + EditEventCommand.COMMAND_WORD + \": \" + EditEventCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"32. \" + DeleteEventCommand.COMMAND_WORD + \": \" + DeleteEventCommand.COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"33. \" + ListEventCommand.COMMAND_WORD + \": \" + ListEventCommand.COMMAND_FUNCTION + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cString\u003e COMMANDS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cString\u003e LIST_OF_COMMANDS \u003d commandList(COMMANDS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int type;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates an HelpCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public HelpCommand(int type) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Creates a list of all commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @return list of commands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cString\u003e commandList(ArrayList\u003cString\u003e commands) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"1. \" + HelpCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"2. \" + HelpCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"3. \" + UndoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"4. \" + RedoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"5. \" + ClearCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"6. \" + ExitCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"7. \" + AddCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"8. \" + EditCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"9. \" + DeleteCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"10. \" + AddInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"11. \" + EditInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"12. \" + DeleteInfoCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"13. \" + ListCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"14. \" + FindCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"15. \" + GetCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"16. \" + ShowBirthdayCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        commands.add(\"17. \" + AddRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"18. \" + EditRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"19. \" + DeleteRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"20. \" + AddRestaurantNoteCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"21. \" + EditRestaurantNoteCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        commands.add(\"22. \" + DeleteRestaurantNoteCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"23. \" + ListRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"24. \" + FindRestaurantCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"25. \" + AddAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"26. \" + EditAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"27. \" + DeleteAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"28. \" + ListAssignmentCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"29. \" + ScheduleCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"30. \" + AddEventCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"31. \" + EditEventCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"32. \" + DeleteEventCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        commands.add(\"33. \" + ListEventCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (type \u003e COMMANDS.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (type \u003c 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(MESSAGE, true, false, false, false,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new CommandResult(LIST_OF_COMMANDS.get(type - 1) + \"\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"Type \\\"help\\\" to return to the list of commands.\", true, false, false,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 65,
      "-": 19,
      "ElysiaTanZY": 15,
      "hhjoel": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class ListAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all assignments in the scheduler \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"sorted by alphabetical order, chronological order based on deadline or estimated hours.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Parameters: [\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_DEADLINE_LIST + \"] [\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + PREFIX_ESTHOURS_LIST + \"]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"-d to sort by DEADLINE, -e to sort by\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" ESTIMATED HOURS, or neither to sort by \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"alphabetical order.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" OR \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_DEADLINE_LIST"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \" OR \" + COMMAND_WORD + \" \" + PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all assignments\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Comparator\u003cAssignment\u003e comparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param comparator to be sorted in the filtered assignment list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ListAssignmentCommand(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.sortAssignment(comparator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all persons in the address book.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 22,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Lists all Events in the Events Schedule to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ev)list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all your events which \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Naggy Joel is keeping track for you \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"sorted by the chronological order based on event date. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Naggy Joel can only sort events one way.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are all your events. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        + \"Stop going out so much now, got coronavirus you know!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Comparator\u003cEvent\u003e comparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param comparator to be sorted in the filtered assignment list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ListEventCommand(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Checks whether an event is overdue."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private boolean isOverdue(Event event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        LocalDateTime eventDateTime \u003d event.getEventDate().getDateTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (currentDateTime.isAfter(eventDateTime)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int length \u003d model.getEventsList().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            Event event \u003d model.getEventsList().get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (isOverdue(event)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                model.deleteEvent(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        model.sortEvent(comparator);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, true, false, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 63,
      "Vanessa1098": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListRestaurantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESTAURANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class ListRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(rt)list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Shows a list of all restaurants in the RestaurantBook.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":  \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all restaurants\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        model.updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Redo the last undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Command Redone!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_LAST_CHANGE \u003d \"Nothing to Redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates an RedoCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RedoCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (model.redoStackSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(MESSAGE_LAST_CHANGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String commandType \u003d model.redo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (commandType.equals(\"ADDRESS\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"BIRTHDAY\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, true, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"ASSIGNMENTS\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    true, false, false, false, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"EVENTS\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, true, false, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"RESTAURANTS\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, true, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"USERPREF\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, false, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"GETDETAIL\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, true,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(\"BUG ENCOUNTERED, NOT SUPPOSED TO REACH HERE\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof UndoCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM_DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.DeadlineComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Displays user\u0027s expected workload for the next n days (including today) based on stored assignments, their deadlines"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * and estimated work hours per assignment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(st)schedule\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Calculates and displays the estimated workload for the next \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"NUM_DAYS days (including today) based on stored assignments, their deadlines and estimated work hours \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"per assignment.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your expected workload can be found in the panel on the right!\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"NOTE: This only takes into account your stored assignments and nothing else...\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"NOTE: Results are rounded to the nearest half an hour.\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Assignments with insufficient time to be scheduled:\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + PREFIX_NUM_DAYS + \"NUM_DAYS (Must be a positive integer)\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"Example: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + COMMAND_WORD + \" \" + PREFIX_NUM_DAYS + \"5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final int numDays;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleCommand.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ScheduleCommand(int numDays) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.numDays \u003d numDays;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ObservableList\u003cAssignment\u003e assignmentList \u003d model.getAssignmentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cString\u003e recordOfUnscheduledHours \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        model.createSchedule(numDays);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cDay\u003e allocationResult \u003d generateSchedule(numDays, assignmentList, recordOfUnscheduledHours);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            model.setDay(i, allocationResult.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String successMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c recordOfUnscheduledHours.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            successMessage \u003d successMessage + \"\\n\" + (i + 1) + \". \" + recordOfUnscheduledHours.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.info(\"Scheduling was done successfully.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new CommandResult(successMessage, false, false, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Populates an unmodifiable view of the intensity of the user\u0027s upcoming schedule for the next n days (including"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * today) calculated based on uncompleted stored assignments, their deadlines and estimated hours per assignment."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param numDays The number of days the user would like to display."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Aim is to have the workload as evenly spread out across days (from current date to deadline) as possible."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ArrayList\u003cDay\u003e generateSchedule(int numDays, ObservableList\u003cAssignment\u003e assignmentList,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                           ArrayList\u003cString\u003e recordOfUnscheduledHours) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Keeps track of the total number of hours allocated to each day for all assignments (Calculation purposes)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Keeps track of the rounded values of hours allocated for display purposes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cBigDecimal\u003e distributedHoursResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cDay\u003e newSchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDateTime currDateTime \u003d LocalDateTime.now(ZoneId.of(\"Singapore\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ObservableList\u003cAssignment\u003e sortedAssignmentList \u003d assignmentList.sorted(new DeadlineComparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            newSchedule.add(new Day());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            distributedHoursResult.add(BigDecimal.ZERO);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        distributedHoursAllAssignments.add(new BigDecimal(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Assignments are iterated through in sorted order, scheduling the more urgent uncompleted assignments first"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedAssignmentList.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            String assignmentStatus \u003d sortedAssignmentList.get(i).getStatus().status;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDateTime deadline \u003d sortedAssignmentList.get(i).getDeadline().dateTime;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (assignmentStatus.equals(Status.ASSIGNMENT_OUTSTANDING) \u0026\u0026 deadline.isAfter(currDateTime)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                BigDecimal totalHoursToBeAllocated \u003d new BigDecimal(sortedAssignmentList.get(i).getWorkload().estHours);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                int noOfDaysBetween \u003d (int) ChronoUnit.DAYS.between(currDateTime.toLocalDate(), deadline.toLocalDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                String assignmentTitle \u003d sortedAssignmentList.get(i).getTitle().title;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArrayList\u003cBigDecimal\u003e allocationResult \u003d allocateHours(distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    totalHoursToBeAllocated, deadline, currDateTime, noOfDaysBetween);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                recordResultsForAssignment(allocationResult, newSchedule, distributedHoursResult,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    recordOfUnscheduledHours, numDays, noOfDaysBetween, assignmentTitle, totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Set total hours allocated to each day in the schedule"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int j \u003d 0; j \u003c numDays; j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            newSchedule.get(j).setTotalAllocatedHours("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                (float) (Math.round(distributedHoursResult.get(j).floatValue() * 2) / 2.0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return newSchedule;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Populates each day of the schedule with the amount of time allocated to it for this assignment and if deadline"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * of the assignment falls within the queried duration, assignment will be recorded as a due assignment on that day."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Any unscheduled time for this assignment will also be recorded."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private void recordResultsForAssignment(ArrayList\u003cBigDecimal\u003e allocationResult, ArrayList\u003cDay\u003e newSchedule,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                            ArrayList\u003cBigDecimal\u003e distributedHoursResult,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                            ArrayList\u003cString\u003e recordOfUnscheduledHours, int numDays,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                            int noOfDaysBetween, String assignmentTitle,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                            BigDecimal totalHoursToBeAllocated) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int daysAllocated \u003d Math.min(allocationResult.size(), numDays);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        daysAllocated \u003d Math.min(daysAllocated, noOfDaysBetween + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal actualTotalHoursAllocated \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Record amount of time allocated to each day for this assignment"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c daysAllocated; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (allocationResult.get(i).compareTo(new BigDecimal(Float.toString((float) 0.25))) \u003e 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                float hoursAllocatedEachDay \u003d (float) (Math.round(allocationResult.get(i).floatValue() * 2) / 2.0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                newSchedule.get(i).addAllocatedAssignment(hoursAllocatedEachDay, assignmentTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                BigDecimal hoursToBeRecorded \u003d new BigDecimal(Float.toString(hoursAllocatedEachDay));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                distributedHoursResult.set(i, distributedHoursResult.get(i).add(hoursToBeRecorded));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                actualTotalHoursAllocated \u003d actualTotalHoursAllocated.add(hoursToBeRecorded);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Record assignment if deadline falls within queried duration"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (noOfDaysBetween \u003c numDays) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            newSchedule.get(noOfDaysBetween).addDueAssignment(assignmentTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Record unscheduled time for this assignment (if any)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (allocationResult.size() \u003e (noOfDaysBetween + 1)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal unassignedHours \u003d totalHoursToBeAllocated.subtract(actualTotalHoursAllocated);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            float unassignedHoursFloat \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                (float) (Math.round(unassignedHours.floatValue() * 2) / 2.0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            recordOfUnscheduledHours.add(assignmentTitle + \" (\" + unassignedHoursFloat + \" hours)\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Allocates the current assignment\u0027s estimated workload across several days (today included)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ArrayList\u003cBigDecimal\u003e allocateHours(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                               BigDecimal totalHoursToBeAllocated, LocalDateTime deadline,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                               LocalDateTime currDateTime, int noOfDaysBetween) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.info(\"Allocating hours for assignment\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Keeps track of the amount of time allocated to each day for this assignment."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cBigDecimal\u003e allocationResultThisAssignment \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Keeps track of the amount of time that is still available on each day"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArrayList\u003cBigDecimal\u003e hoursLeftEachDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (noOfDaysBetween \u003d\u003d 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursBeforeDeadline \u003d new BigDecimal(Float.toString(ChronoUnit.SECONDS.between(currDateTime,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                deadline))).divide(BigDecimal.valueOf(3600.0), 4, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            hoursLeftEachDay.add(hoursBeforeDeadline.subtract(distributedHoursAllAssignments.get(0)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursToBeAdded \u003d hoursLeftEachDay.get(0).min(totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            allocationResultThisAssignment.add(BigDecimal.ZERO);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            setResult(distributedHoursAllAssignments, allocationResultThisAssignment,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                hoursLeftEachDay, hoursToBeAdded, 0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (hoursToBeAdded.compareTo(totalHoursToBeAllocated) \u003c 0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                allocationResultThisAssignment.add(totalHoursToBeAllocated.subtract(hoursToBeAdded));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return allocationResultThisAssignment;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (noOfDaysBetween \u003e 0) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            int currSize \u003d distributedHoursAllAssignments.size();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Initialise distributedHoursThisAssignment, allocationResultThisAssignment"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            for (int i \u003d 0; i \u003c (noOfDaysBetween + 1); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                allocationResultThisAssignment.add(new BigDecimal(0));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                if (i \u003e\u003d currSize) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    distributedHoursAllAssignments.add(new BigDecimal(0));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDateTime midnightToday \u003d LocalDateTime.of(currDateTime.toLocalDate().plusDays(1), LocalTime.MIDNIGHT);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursBeforeMidnight \u003d new BigDecimal(Float.toString(ChronoUnit.SECONDS"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .between(currDateTime, midnightToday))).divide(BigDecimal.valueOf(3600.0), 4,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Amount of time on query day that can be allocated to this current assignment"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursLeftToToday \u003d hoursBeforeMidnight.subtract(distributedHoursAllAssignments.get(0));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDateTime midnightDeadline \u003d LocalDateTime.of(deadline.toLocalDate(), LocalTime.MIDNIGHT);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursBeforeDeadline \u003d new BigDecimal(Float.toString(ChronoUnit.SECONDS"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .between(midnightDeadline, deadline))).divide(BigDecimal.valueOf(3600.0), 4,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Amount of time on the day the assignment is due that can be allocated to this current assignment"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursLeftOnDeadlineDay \u003d hoursBeforeDeadline.subtract(distributedHoursAllAssignments"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .get(noOfDaysBetween)).max(new BigDecimal(0));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Initialise hoursLeftEachDay"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            hoursLeftEachDay.add(hoursLeftToToday);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            for (int i \u003d 1; i \u003c noOfDaysBetween; i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                hoursLeftEachDay.add(new BigDecimal(24).subtract(distributedHoursAllAssignments.get(i)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            hoursLeftEachDay.add(hoursLeftOnDeadlineDay);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal[] currMinAndSecondMin \u003d getMinAndSecondMin(distributedHoursAllAssignments, hoursLeftEachDay,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                noOfDaysBetween);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Allocate hours to new days first (if any)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            int numNewDays \u003d noOfDaysBetween - (currSize - 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal result \u003d allocateHoursToNewDays(numNewDays, totalHoursToBeAllocated, currMinAndSecondMin[0],"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                distributedHoursAllAssignments, allocationResultThisAssignment, hoursLeftEachDay);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            totalHoursToBeAllocated \u003d totalHoursToBeAllocated.subtract(result);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Duration that still needs to be allocated after allocating to new days: \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Hours left to each day: \" + String.valueOf(hoursLeftEachDay));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Allocate hours to days with the least amount of hours allocated in increasing order"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            currMinAndSecondMin \u003d getMinAndSecondMin(distributedHoursAllAssignments, hoursLeftEachDay, noOfDaysBetween);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Ensure that following loop will not be prevented from entering if no new days were created"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            result \u003d BigDecimal.ONE;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            while (currMinAndSecondMin[1].compareTo(new BigDecimal(Float.toString(Float.MAX_VALUE))) !\u003d 0"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 result.compareTo(BigDecimal.ZERO) \u003e 0 \u0026\u0026 totalHoursToBeAllocated"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .compareTo(new BigDecimal(Float.toString((float) 0.01))) \u003e 0) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                int daysWithMinHours \u003d getMinDays(distributedHoursAllAssignments, noOfDaysBetween,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    currMinAndSecondMin[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                // Decide how many hours to be added to days with least amount of work"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                BigDecimal diffBetweenMinAndSecondMin \u003d currMinAndSecondMin[1].subtract(currMinAndSecondMin[0]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                BigDecimal hoursRequired \u003d totalHoursToBeAllocated.divide(new BigDecimal(daysWithMinHours), 4,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                BigDecimal hoursToBeAdded \u003d hoursRequired.min(diffBetweenMinAndSecondMin);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                result \u003d allocateHoursToMinDays(distributedHoursAllAssignments, allocationResultThisAssignment,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    hoursLeftEachDay, hoursToBeAdded, currMinAndSecondMin[0], noOfDaysBetween);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                totalHoursToBeAllocated \u003d totalHoursToBeAllocated.subtract(result);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                currMinAndSecondMin \u003d getMinAndSecondMin(distributedHoursAllAssignments, hoursLeftEachDay,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    noOfDaysBetween);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Duration that still needs to be allocated after allocating to days with least hours: \""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Hours left to each day: \" + String.valueOf(hoursLeftEachDay));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Allocate remaining hours equally across the days up to deadline of assignment (if any)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Ensure that the following loop will not be prevented from entering if there was no previous allocation"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            result \u003d BigDecimal.ONE;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            while (totalHoursToBeAllocated.compareTo(new BigDecimal(Float.toString((float) 0.01))) \u003e 0"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 result.compareTo(BigDecimal.ZERO) \u003e 0) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                result \u003d allocateHoursEvenly(distributedHoursAllAssignments, allocationResultThisAssignment,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    hoursLeftEachDay, totalHoursToBeAllocated, noOfDaysBetween);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                totalHoursToBeAllocated \u003d totalHoursToBeAllocated.subtract(result);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Duration that still needs to be allocated after allocating evenly: \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Hours left to each day: \" + String.valueOf(hoursLeftEachDay));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (totalHoursToBeAllocated.compareTo(new BigDecimal(Float.toString((float) 0.25))) \u003e 0) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                allocationResultThisAssignment.add(totalHoursToBeAllocated);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return allocationResultThisAssignment;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds the allocated hours to the particular day in the results lists."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Subtracts the allocated hours from the particular day in the list that stores available hours for allocation."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param index Index of the day to be updated."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param hoursToUpdate Number of hours to update the currently allocated hours to a day by and subtract from the"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * hours remaining in that day."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private void setResult(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                           ArrayList\u003cBigDecimal\u003e allocationResultThisAssignment, ArrayList\u003cBigDecimal\u003e hoursLeftEachDay,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                           BigDecimal hoursToUpdate, int index) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal updatedValueAllAssignments \u003d distributedHoursAllAssignments.get(index).add(hoursToUpdate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        distributedHoursAllAssignments.set(index, updatedValueAllAssignments);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal updatedValueThisAssignment \u003d allocationResultThisAssignment.get(index).add(hoursToUpdate);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        allocationResultThisAssignment.set(index, updatedValueThisAssignment);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal updatedRemainingTime \u003d hoursLeftEachDay.get(index).subtract(hoursToUpdate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        hoursLeftEachDay.set(index, updatedRemainingTime);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Allocate the least number of hours possible to new days first."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private BigDecimal allocateHoursToNewDays(int numNewDays, BigDecimal hoursToBeAllocated, BigDecimal currMin,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                        ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                        ArrayList\u003cBigDecimal\u003e allocationResultThisAssignment,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                        ArrayList\u003cBigDecimal\u003e hoursLeftEachDay) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal allocatedHours \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (numNewDays !\u003d 0) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            // Decide how many hours to allocate to new days"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursRequired \u003d hoursToBeAllocated.divide(new BigDecimal(numNewDays), 4,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal hoursToBeAdded \u003d currMin.min(hoursRequired);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            BigDecimal actualAllocated;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            for (int i \u003d 0; i \u003c numNewDays; i++) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                actualAllocated \u003d hoursToBeAdded.min(hoursLeftEachDay.get(i));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setResult(distributedHoursAllAssignments, allocationResultThisAssignment, hoursLeftEachDay,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    actualAllocated, i);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                allocatedHours \u003d allocatedHours.add(actualAllocated);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return allocatedHours;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Allocates hours to days which currently have the least amount of hours allocated."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private BigDecimal allocateHoursToMinDays(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                              ArrayList\u003cBigDecimal\u003e allocationResultThisAssignment,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                              ArrayList\u003cBigDecimal\u003e hoursLeftEachDay, BigDecimal hoursToBeAdded,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                              BigDecimal currMin, int daysInBetween) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal allocatedHours \u003d new BigDecimal(0);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal actualAllocated;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int j \u003d 0; j \u003c Math.min(distributedHoursAllAssignments.size(), daysInBetween + 1); j++) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (distributedHoursAllAssignments.get(j).compareTo(currMin) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                actualAllocated \u003d hoursToBeAdded.min(hoursLeftEachDay.get(j));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setResult(distributedHoursAllAssignments, allocationResultThisAssignment, hoursLeftEachDay,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    actualAllocated, j);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                allocatedHours \u003d allocatedHours.add(actualAllocated);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return allocatedHours;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Allocate hours evenly across all days from query date to deadline."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private BigDecimal allocateHoursEvenly(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                           ArrayList\u003cBigDecimal\u003e allocationResultThisAssignment,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                           ArrayList\u003cBigDecimal\u003e hoursLeftEachDay, BigDecimal hoursToBeAllocated,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                           int noOfDaysBetween) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal hoursToBeAdded \u003d hoursToBeAllocated.divide(new BigDecimal(noOfDaysBetween + 1), 4,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal allocatedHours \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal actualAllocated;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int k \u003d 0; k \u003c Math.min(distributedHoursAllAssignments.size(), noOfDaysBetween + 1); k++) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            actualAllocated \u003d hoursToBeAdded.min(hoursLeftEachDay.get(k));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            setResult(distributedHoursAllAssignments, allocationResultThisAssignment, hoursLeftEachDay,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                actualAllocated, k);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            allocatedHours \u003d allocatedHours.add(actualAllocated);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return allocatedHours;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns the minimum and second minimum number of hours currently allocated."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * result[0]: Minimum hours allocated to a day."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * result[1]: Second minimum hours allocated to a day."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private BigDecimal[] getMinAndSecondMin(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                                            ArrayList\u003cBigDecimal\u003e hoursLeftEachDay, int daysInBetween) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal min \u003d new BigDecimal(Float.toString(Float.MAX_VALUE));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        BigDecimal secondMin \u003d new BigDecimal(Float.toString(Float.MAX_VALUE));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(distributedHoursAllAssignments.size(), daysInBetween + 1); i++) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if ((i !\u003d 0 \u0026\u0026 i !\u003d daysInBetween) || (hoursLeftEachDay.get(i)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .compareTo(new BigDecimal(Float.toString((float) 0.01))) \u003e 0)) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                if (distributedHoursAllAssignments.get(i).compareTo(min) \u003c 0) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    secondMin \u003d min.add(BigDecimal.ZERO);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    min \u003d distributedHoursAllAssignments.get(i).add(BigDecimal.ZERO);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                } else if (distributedHoursAllAssignments.get(i).compareTo(secondMin) \u003c 0"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    \u0026\u0026 distributedHoursAllAssignments.get(i).compareTo(min) \u003e 0) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    secondMin \u003d distributedHoursAllAssignments.get(i).add(BigDecimal.ZERO);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new BigDecimal[]{min, secondMin};"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns the number of days that have been allocated the least workload from today to deadline."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private int getMinDays(ArrayList\u003cBigDecimal\u003e distributedHoursAllAssignments, int daysInBetween,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                           BigDecimal currMin) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(distributedHoursAllAssignments.size(), daysInBetween + 1); i++) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (distributedHoursAllAssignments.get(i).compareTo(currMin) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            || (other instanceof ScheduleCommand);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 463
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowBirthdayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Lists all contacts with birthdays that are upcoming in the next five days (including today)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ShowBirthdayCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"(ab)birthday\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Lists all contacts with birthdays that are upcoming in the next five\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \" days (including today)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Birthdays for the next five days (today inclusive) is listed on the \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"rightmost panel.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ShowBirthdayCommand() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, false, true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            || (other instanceof ShowBirthdayCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "ElysiaTanZY": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String COMMAND_FUNCTION \u003d \"Undo the last entered command that changes the data. Listing and \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            + \"sorting do not count as changing the data.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_FUNCTION + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Command Undone!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_LAST_CHANGE \u003d \"Already At Last Change!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates an UndoCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (model.undoStackSize() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(MESSAGE_LAST_CHANGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String commandType \u003d model.undo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (commandType.equals(\"ADDRESS\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"BIRTHDAY\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, true, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"ASSIGNMENTS\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    true, false, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"EVENTS\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, true, false, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"RESTAURANTS\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, true, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"USERPREF\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (commandType.equals(\"GETDETAIL\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, true,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    false, false, false, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new CommandException(\"BUG ENCOUNTERED, NOT SUPPOSED TO REACH HERE\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof UndoCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAssignmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new AddAssignmentCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommandParser implements Parser\u003cAddAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE, PREFIX_ESTHOURS, PREFIX_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DEADLINE, PREFIX_ESTHOURS, PREFIX_TITLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Workload estTime \u003d ParserUtil.parseWorkload(argMultimap.getValue(PREFIX_ESTHOURS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignment \u003d new Assignment(title, deadline, estTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new AddAssignmentCommand(assignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        PREFIX_REMARK, PREFIX_BIRTHDAY, PREFIX_ORGANIZATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remark \u003d new ArrayList\u003c\u003e(); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).orElse(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Organization organization \u003d ParserUtil.parseOrganization(argMultimap.getValue(PREFIX_ORGANIZATION).orElse(\"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, remark, birthday, organization, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 4,
      "-": 53,
      "ElysiaTanZY": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTTITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Place;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // does order matter for this command? pls double check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DURATION, PREFIX_EVENTDATE, PREFIX_EVENTTITLE, PREFIX_PLACE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DURATION, PREFIX_EVENTDATE, PREFIX_EVENTTITLE, PREFIX_PLACE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventTitle eventTitle \u003d ParserUtil.parseEventTitle(argMultimap.getValue(PREFIX_EVENTTITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_EVENTDATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Place place \u003d ParserUtil.parsePlace(argMultimap.getValue(PREFIX_PLACE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Event event \u003d new Event(eventTitle, eventDate, duration, place);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nidorinas": 58,
      "Vanessa1098": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddInfoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code AddInfoCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommandParser implements Parser\u003cAddInfoCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddInfoCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code AddInfoCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddInfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    AddInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remark \u003d ParserUtil.parseRemarks(argMultimap.getAllValues(PREFIX_REMARK));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new AddInfoCommand(index, remark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRestaurantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Parses input arguments and creates a new AddAssignmentCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class AddRestaurantCommandParser implements Parser\u003cAddRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return AddRestaurantCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RESTAURANT, PREFIX_LOCATION, PREFIX_OPERATING_HOURS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        PREFIX_PRICE, PREFIX_CUISINE, PREFIX_VISITED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RESTAURANT, PREFIX_LOCATION, PREFIX_VISITED)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Name name \u003d ParserUtil.parseNameR(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Hours hours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_OPERATING_HOURS).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Cuisine cuisine \u003d ParserUtil.parseCuisine(argMultimap.getValue(PREFIX_CUISINE).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Visit visit \u003d ParserUtil.parseVisit(argMultimap.getValue(PREFIX_VISITED).orElse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e recommendedFood \u003d new ArrayList\u003c\u003e(); //add command does not allow adding notes straight away"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e goodFood \u003d new ArrayList\u003c\u003e(); //add command does not allow adding notes straight away"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e badFood \u003d new ArrayList\u003c\u003e(); //add command does not allow adding notes straight away"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant restaurant \u003d new Restaurant(name, location, hours, price, cuisine,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                visit, recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new AddRestaurantCommand(restaurant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 17,
      "hhjoel": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRestaurantNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECOMMENDED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code AddInfoCommand} object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddRestaurantNoteCommandParser implements Parser\u003cAddRestaurantNoteCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddRestaurantNoteCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AddRestaurantNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_RECOMMENDED, PREFIX_GOOD, PREFIX_BAD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    AddRestaurantNoteCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_RECOMMENDED).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_GOOD).isPresent()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_BAD).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_PREFIX, AddRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e recommendedFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e goodFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cNote\u003e badFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECOMMENDED).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getValue(PREFIX_RECOMMENDED).isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(AddRestaurantNoteCommand.MESSAGE_EMPTY_REC);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            recommendedFood \u003d ParserUtil.parseNotes(argMultimap.getAllValues(PREFIX_RECOMMENDED));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GOOD).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GOOD).isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(AddRestaurantNoteCommand.MESSAGE_EMPTY_GOOD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            goodFood \u003d ParserUtil.parseNotes(argMultimap.getAllValues(PREFIX_GOOD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BAD).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getValue(PREFIX_BAD).isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(AddRestaurantNoteCommand.MESSAGE_EMPTY_BAD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            badFood \u003d ParserUtil.parseNotes(argMultimap.getAllValues(PREFIX_BAD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new AddRestaurantNoteCommand(index, recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 69,
      "hhjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DeleteInfoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DeleteRestaurantNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.EditRestaurantCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditRestaurantNoteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.FindRestaurantCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.GetCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ListAssignmentCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ListRestaurantCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ShowBirthdayCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case AddRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case DeleteRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DeleteRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case ListRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListRestaurantCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        case FindRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return new FindRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case AddRestaurantNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddRestaurantNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case EditRestaurantNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new EditRestaurantNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case DeleteRestaurantNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DeleteRestaurantNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case ListAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case DeleteAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return new DeleteAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case EditAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return new EditAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case EditRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new EditRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case AddInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new AddInfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case EditInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new EditInfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case DeleteInfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new DeleteInfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        case GetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new GetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case ShowBirthdayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return new ShowBirthdayCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 15,
      "Vanessa1098": 37,
      "-": 75,
      "ElysiaTanZY": 32,
      "hhjoel": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_HELP \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TAG \u003d new Prefix(\"-t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Prefix PREFIX_ORGANIZATION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_LINE_NUMBER \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_ESTHOURS \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_LIST \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_ESTHOURS_LIST \u003d new Prefix(\"-e\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Prefix PREFIX_NUM_DAYS \u003d new Prefix(\"n/\"); // Number of days to visualise"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_RESTAURANT \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_OPERATING_HOURS \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final Prefix PREFIX_CUISINE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_VISITED \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_RECOMMENDED \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_GOOD \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_BAD \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_LINE_NUMBER_RECOMMENDED \u003d new Prefix(\"rl/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_LINE_NUMBER_GOOD \u003d new Prefix(\"gl/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Prefix PREFIX_LINE_NUMBER_BAD \u003d new Prefix(\"bl/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Prefix PREFIX_EVENTTITLE \u003d new Prefix(\"t/\"); // event title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Prefix PREFIX_EVENTDATE \u003d new Prefix(\"d/\"); // event date time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Prefix PREFIX_PLACE \u003d new Prefix(\"p/\"); // event place"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"h/\"); // event duration"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 5,
      "Vanessa1098": 10,
      "-": 14,
      "ElysiaTanZY": 9,
      "hhjoel": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAssignmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new DeleteAssignmentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DeleteAssignmentCommandParser implements Parser\u003cDeleteAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAssignmentCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns a DeleteAssignmentCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public DeleteAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAssignmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new DeleteAssignmentCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 5,
      "-": 26,
      "hhjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class DeleteEventCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and returns a DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteInfoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INDEX_NOT_INTEGER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DeleteInfoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteInfoCommand} object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteInfoCommandParser implements Parser\u003cDeleteInfoCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteInfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    DeleteInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_LINE_NUMBER).isPresent() || argMultimap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .getAllValues(PREFIX_LINE_NUMBER).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER, DeleteInfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cInteger\u003e line;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            line \u003d ParserUtil.parseLines(argMultimap.getAllValues(PREFIX_LINE_NUMBER));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    DeleteInfoCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new DeleteInfoCommand(index, line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRestaurantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DeleteRestaurantCommandParser implements Parser\u003cDeleteRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRestaurantCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and returns a DeleteRestaurantCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRestaurantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new DeleteRestaurantCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "hhjoel": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRestaurantNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INDEX_NOT_INTEGER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_REC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_RECOMMENDED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.DeleteRestaurantNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteRestaurantNoteCommand} object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeleteRestaurantNoteCommandParser implements Parser\u003cDeleteRestaurantNoteCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteRestaurantNoteCommand}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code DeleteRestaurantNoteCommand} object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DeleteRestaurantNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER_RECOMMENDED, PREFIX_LINE_NUMBER_GOOD, PREFIX_LINE_NUMBER_BAD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    DeleteRestaurantNoteCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //There should be at least one line number indicated for the relevant food notes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_LINE_NUMBER_RECOMMENDED).isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_LINE_NUMBER_GOOD).isPresent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_LINE_NUMBER_BAD).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_RESTAURANT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    DeleteRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cInteger\u003e lineRec \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        //Checks if user wants to delete recommended food"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_RECOMMENDED).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is provided"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_RECOMMENDED).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_REC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        DeleteRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineRec \u003d ParserUtil.parseLines(argMultimap.getAllValues(PREFIX_LINE_NUMBER_RECOMMENDED));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                            DeleteRestaurantNoteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cInteger\u003e lineGood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        //Checks if user wants to delete good food"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_GOOD).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is provided"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_GOOD).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_GOOD,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        DeleteRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineGood \u003d ParserUtil.parseLines(argMultimap.getAllValues(PREFIX_LINE_NUMBER_GOOD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                            DeleteRestaurantNoteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cInteger\u003e lineBad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        //Checks if user wants to delete bad food"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_BAD).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is provided"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_BAD).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_BAD,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        DeleteRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineBad \u003d ParserUtil.parseLines(argMultimap.getAllValues(PREFIX_LINE_NUMBER_BAD));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                            DeleteRestaurantNoteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new DeleteRestaurantNoteCommand(index, lineRec, lineGood, lineBad);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 84,
      "hhjoel": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAssignmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parsers input commands and creates a new EditAssignmentCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentCommandParser implements Parser\u003cEditAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAssignmentCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns an EditAssignmentCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DEADLINE, PREFIX_ESTHOURS, PREFIX_STATUS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                EditAssignmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor editAssignmentDescriptor \u003d new EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            editAssignmentDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ESTHOURS).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            editAssignmentDescriptor.setWorkload(ParserUtil.parseWorkload(argMultimap.getValue(PREFIX_ESTHOURS).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            editAssignmentDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            editAssignmentDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!editAssignmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(EditAssignmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new EditAssignmentCommand(index, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ORGANIZATION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_BIRTHDAY, PREFIX_REMARK, PREFIX_TAG, PREFIX_DELETE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORGANIZATION).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    .setOrganization(ParserUtil.parseOrganization(argMultimap.getValue(PREFIX_ORGANIZATION).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTagsToBeAdded);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_DELETE_TAG).isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            Optional \u003cSet\u003cTag\u003e\u003e tags \u003d parseTagsForEdit(argMultimap.getAllValues(PREFIX_DELETE_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (tags.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                editPersonDescriptor.setTagsToBeDeleted(tags.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                editPersonDescriptor.setTagsToEmpty(ParserUtil.parseTags(Collections.emptyList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (tags.isEmpty() || tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tags));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 74,
      "ElysiaTanZY": 28,
      "hhjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENTTITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.EditEventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Parsers input commands and creates a new EditEventCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENTTITLE, PREFIX_EVENTDATE, PREFIX_DURATION, PREFIX_PLACE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENTTITLE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            editEventDescriptor.setEventTitle(ParserUtil.parseEventTitle("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENTTITLE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENTDATE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            editEventDescriptor.setEventDate(ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_EVENTDATE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            editEventDescriptor.setDuration(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PLACE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            editEventDescriptor.setPlace(ParserUtil.parsePlace(argMultimap.getValue(PREFIX_PLACE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditInfoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INDEX_NOT_INTEGER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code EditInfoCommand} object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommandParser implements Parser\u003cEditInfoCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditInfoCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code EditInfoCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditInfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER, PREFIX_REMARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EditInfoCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_LINE_NUMBER).isPresent() || argMultimap"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .getAllValues(PREFIX_LINE_NUMBER).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER, EditInfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int line;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            line \u003d Integer.parseInt(argMultimap.getValue(PREFIX_LINE_NUMBER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EditInfoCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new EditInfoCommand(index, line, new Remark(remark));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditRestaurantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.EditRestaurantDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.commands.EditRestaurantCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Parses input arguments and creates a new EditRestaurantCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class EditRestaurantCommandParser implements Parser\u003cEditRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRestaurantCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and returns an EditRestaurantCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public EditRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RESTAURANT, PREFIX_LOCATION, PREFIX_CUISINE, PREFIX_VISITED,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        PREFIX_OPERATING_HOURS, PREFIX_PRICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    EditRestaurantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        EditRestaurantDescriptor editRestaurantDescriptor \u003d new EditRestaurantDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RESTAURANT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor.setName(ParserUtil.parseNameR(argMultimap.getValue(PREFIX_RESTAURANT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor.setVisit(ParserUtil.parseVisit(argMultimap.getValue(PREFIX_VISITED).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUISINE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor.setCuisine(ParserUtil.parseCuisine(argMultimap.getValue(PREFIX_CUISINE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPERATING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            editRestaurantDescriptor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    .setHours(ParserUtil.parseHours(argMultimap.getValue(PREFIX_OPERATING_HOURS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!editRestaurantDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(EditRestaurantCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new EditRestaurantCommand(index, editRestaurantDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditRestaurantNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INDEX_NOT_INTEGER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_REC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_LINE_NUMBER_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BAD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_BAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_GOOD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER_RECOMMENDED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECOMMENDED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditRestaurantNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code EditRestaurantNoteCommand} object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditRestaurantNoteCommandParser implements Parser\u003cEditRestaurantNoteCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditRestaurantNoteCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code EditRestaurantNoteCommand} object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public EditRestaurantNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER_RECOMMENDED, PREFIX_RECOMMENDED, PREFIX_LINE_NUMBER_GOOD, PREFIX_GOOD,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                PREFIX_LINE_NUMBER_BAD, PREFIX_BAD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EditRestaurantNoteCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //There should be at least one line number indicated for the relevant food notes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_LINE_NUMBER_RECOMMENDED).isPresent()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_LINE_NUMBER_GOOD).isPresent()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_LINE_NUMBER_BAD).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_RESTAURANT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EditRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int lineRec \u003d -1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String recommendedFood \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //Checks if user wants to edit recommended food"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_RECOMMENDED).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is provided"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_RECOMMENDED).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_REC,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        EditRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (!argMultimap.getValue(PREFIX_RECOMMENDED).isPresent()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    || (argMultimap.getValue(PREFIX_RECOMMENDED).isPresent()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u0026\u0026 argMultimap.getAllValues(PREFIX_RECOMMENDED).get(0).isEmpty())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                //Checks if recommended food is provided"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(EditRestaurantNoteCommand.MESSAGE_EMPTY_REC);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineRec \u003d Integer.parseInt(argMultimap.getValue(PREFIX_LINE_NUMBER_RECOMMENDED).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                            EditRestaurantNoteCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                recommendedFood \u003d argMultimap.getValue(PREFIX_RECOMMENDED).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int lineGood \u003d -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String goodFood \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //Checks if user wants to edit good food"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_GOOD).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is provided"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_GOOD).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_GOOD,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        EditRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (!argMultimap.getValue(PREFIX_GOOD).isPresent()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    || (argMultimap.getValue(PREFIX_GOOD).isPresent()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u0026\u0026 argMultimap.getAllValues(PREFIX_GOOD).get(0).isEmpty())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                //Checks if good food is provided"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(EditRestaurantNoteCommand.MESSAGE_EMPTY_GOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineGood \u003d Integer.parseInt(argMultimap.getValue(PREFIX_LINE_NUMBER_GOOD).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                            EditRestaurantNoteCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                goodFood \u003d argMultimap.getValue(PREFIX_GOOD).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int lineBad \u003d -1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String badFood \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //Checks if user wants to edit bad food"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINE_NUMBER_BAD).isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            //Checks if line number is empty"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_LINE_NUMBER_BAD).get(0).isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NO_LINE_NUMBER_BAD,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        EditRestaurantNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (!argMultimap.getValue(PREFIX_BAD).isPresent()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    || (argMultimap.getValue(PREFIX_BAD).isPresent()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u0026\u0026 argMultimap.getAllValues(PREFIX_BAD).get(0).isEmpty())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                //Checks if bad food is empty"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                throw new ParseException(EditRestaurantNoteCommand.MESSAGE_EMPTY_BAD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    lineBad \u003d Integer.parseInt(argMultimap.getValue(PREFIX_LINE_NUMBER_BAD).get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INDEX_NOT_INTEGER,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                            EditRestaurantNoteCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                badFood \u003d argMultimap.getValue(PREFIX_BAD).get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new EditRestaurantNoteCommand(index, lineRec, lineGood, lineBad,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Note(recommendedFood), new Note(goodFood), new Note(badFood));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BLANK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.FindRestaurantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.OrganizationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // convert all to lower case first"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            keywords[i] \u003d keywords[i].toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e organizationKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e nameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // run some check to make sure there is no invalid command!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        boolean hasOrganization \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        boolean hasName \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        boolean hasTags \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"o/\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (keywords[i].substring(0, 2).equals(\"o/\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    hasOrganization \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"n/\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (keywords[i].substring(0, 2).equals(\"n/\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    hasName \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"t/\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (keywords[i].substring(0, 2).equals(\"t/\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    hasTags \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if ((hasOrganization \u003d\u003d false) \u0026\u0026 (hasName \u003d\u003d false) \u0026\u0026 (hasTags \u003d\u003d false)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            // then they did not provide any keywords to search for!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"o/\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                keywords[i] \u003d keywords[i].substring(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!keywords[i].contains(\"n/\") \u0026\u0026 !keywords[i].contains(\"t/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d keywords.length) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    organizationKeywords.add(keywords[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d keywords.length) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if they wrote in the prefix but did not supply keywords"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (hasOrganization) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int i \u003d 0; i \u003c organizationKeywords.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (organizationKeywords.get(i).equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            String.format(MESSAGE_BLANK_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"n/\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                keywords[i] \u003d keywords[i].substring(2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!keywords[i].contains(\"o/\") \u0026\u0026 !keywords[i].contains(\"t/\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d keywords.length) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    nameKeywords.add(keywords[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d keywords.length) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if they wrote in the prefix but did not supply keywords"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (hasName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int i \u003d 0; i \u003c nameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (nameKeywords.get(i).equals(\"\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            String.format(MESSAGE_BLANK_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"t/\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                keywords[i] \u003d keywords[i].substring(2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!keywords[i].contains(\"o/\") \u0026\u0026 !keywords[i].contains(\"n/\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u0026\u0026 i !\u003d keywords.length) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    tagKeywords.add(keywords[i]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d keywords.length) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if they wrote in the prefix but did not supply keywords"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (hasTags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (tagKeywords.get(i).equals(\"\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            String.format(MESSAGE_BLANK_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] organizationKeywordsArray \u003d new String[organizationKeywords.size()];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c organizationKeywords.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            organizationKeywordsArray[i] \u003d organizationKeywords.get(i);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] nameKeywordsArray \u003d new String[nameKeywords.size()];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c nameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            nameKeywordsArray[i] \u003d nameKeywords.get(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] tagKeywordsArray \u003d new String[tagKeywords.size()];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c tagKeywords.size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            tagKeywordsArray[i] \u003d tagKeywords.get(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        OrganizationContainsKeywordsPredicate organizationPredicate \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new OrganizationContainsKeywordsPredicate(Arrays.asList(organizationKeywordsArray));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(nameKeywordsArray));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        TagsContainsKeywordsPredicate tagPredicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(tagKeywordsArray));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new FindCommand(organizationPredicate, namePredicate, tagPredicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 140,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindRestaurantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BLANK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.FindRestaurantCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.restaurant.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.restaurant.RNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Parses input arguments and creates a new FindRestaurantCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class FindRestaurantCommandParser implements Parser\u003cFindRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindRestaurantCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and returns a FindRestaurantCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FindRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e rNameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ArrayList\u003cString\u003e locationKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // run checks to make sure there is no invalid command!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        boolean hasRName \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        boolean hasLocation \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"n/\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (keywords[i].substring(0, 2).equals(\"n/\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    hasRName \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"l/\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (keywords[i].substring(0, 2).equals(\"l/\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    hasLocation \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if ((hasRName \u003d\u003d false) \u0026\u0026 (hasLocation \u003d\u003d false)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            // then they did not provide any keywords to search for!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"hasRName: \" + String.valueOf(hasRName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.info(\"hasLocation: \" + String.valueOf(hasLocation));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"n/\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                keywords[i] \u003d keywords[i].substring(2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!keywords[i].contains(\"l/\") \u0026\u0026 i !\u003d keywords.length) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    rNameKeywords.add(keywords[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d keywords.length) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if they wrote in the prefix but did not supply keywords"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (hasRName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int i \u003d 0; i \u003c rNameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (rNameKeywords.get(i).equals(\"\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            String.format(MESSAGE_BLANK_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (keywords[i].contains(\"l/\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                keywords[i] \u003d keywords[i].substring(2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                while (!keywords[i].contains(\"n/\") \u0026\u0026 i !\u003d keywords.length) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    locationKeywords.add(keywords[i]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    if (i \u003d\u003d keywords.length) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // if they wrote in the prefix but did not supply keywords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (hasLocation) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int i \u003d 0; i \u003c locationKeywords.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (locationKeywords.get(i).equals(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            String.format(MESSAGE_BLANK_COMMAND_FORMAT, FindRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // assign the keywords to an Array"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] rNameKeywordsArray \u003d new String[rNameKeywords.size()];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c rNameKeywords.size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            rNameKeywordsArray[i] \u003d rNameKeywords.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String[] locationKeywordsArray \u003d new String[locationKeywords.size()];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c locationKeywords.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            locationKeywordsArray[i] \u003d locationKeywords.get(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        RNameContainsKeywordsPredicate rNamePredicate \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new RNameContainsKeywordsPredicate(Arrays.asList(rNameKeywordsArray));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        LocationContainsKeywordsPredicate locationPredicate \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new LocationContainsKeywordsPredicate(Arrays.asList(locationKeywordsArray));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new FindRestaurantCommand(rNamePredicate, locationPredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.GetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parses input arguments and creates a new GetCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class GetCommandParser implements Parser\u003cGetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a GetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public GetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new GetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 27,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new {@code AddInfoCommand} object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public HelpCommand parse(String args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int type \u003d Integer.parseInt(argMultimap.getValue(PREFIX_HELP).orElse(\"-1\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new HelpCommand(type);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListAssignmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TOO_MANY_FILTERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.ListAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.DeadlineComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.TitleComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.WorkloadComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class ListAssignmentCommandParser implements Parser\u003cListAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListAssignmentCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns an ListAssignmentCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ListAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE_LIST, PREFIX_ESTHOURS_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DEADLINE_LIST, PREFIX_ESTHOURS_LIST)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_FILTERS, ListAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DEADLINE_LIST).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            DeadlineComparator deadlineComparator \u003d new DeadlineComparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(deadlineComparator);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ESTHOURS_LIST).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            WorkloadComparator workloadComparator \u003d new WorkloadComparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(workloadComparator);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            TitleComparator titleComparator \u003d new TitleComparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return new ListAssignmentCommand(titleComparator);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 50,
      "ElysiaTanZY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventDateComparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Parses input arguments and creates a new ListEventCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class ListEventCommandParser implements Parser\u003cListEventCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListEventCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and returns an ListEventCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ListEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventDateComparator eventDateComparator \u003d new EventDateComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new ListEventCommand(eventDateComparator);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 22,
      "Vanessa1098": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Place;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code Birthday} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Birthday.isValidDate(trimmedBirthday)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String organization} into a {@code Organization}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code organization} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static Organization parseOrganization(String organization) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(organization);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedOrganization \u003d organization.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new Organization(trimmedOrganization);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Birthday} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static seedu.address.model.restaurant.Name parseNameR(String name) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!seedu.address.model.restaurant.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new seedu.address.model.restaurant.Name(trimmedName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e remarks} into a {@code ArrayList\u003cRemark\u003e}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cRemark\u003e parseRemarks(Collection\u003cString\u003e remarks) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remarks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cRemark\u003e remarkArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (String remarkName : remarks) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            remarkArrayList.add(parseRemark(remarkName));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return remarkArrayList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses a {@code String note} into a {@code Note}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the given {@code note} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e notes} into a {@code ArrayList\u003cNote\u003e}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cNote\u003e parseNotes(Collection\u003cString\u003e notes) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cNote\u003e noteArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (String noteName : notes) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            noteArrayList.add(parseNote(noteName));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return noteArrayList;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses a {@code String line} into a {@code Integer}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the given {@code line} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static Integer parseLine(String line) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(line);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String trimmedLine \u003d line.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Integer.parseInt(trimmedLine);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e remarks} into a {@code ArrayList\u003cRemark\u003e}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static ArrayList\u003cInteger\u003e parseLines(Collection\u003cString\u003e lines) throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(lines);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cInteger\u003e lineArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            lineArrayList.add(parseLine(line));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return lineArrayList;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Location} is invalid."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String hours} into a {@code Hours}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Hours} is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Hours parseHours(String hours) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedHours \u003d hours.trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Hours.isValidHours(trimmedHours)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Hours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Hours(trimmedHours);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Price} is invalid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parses a {@code String cuisine} into a {@code Cuisine}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws ParseException if the given {@code Cuisine} is invalid."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Cuisine parseCuisine(String cuisine) throws ParseException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(cuisine);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String trimmedCuisine \u003d cuisine.trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Cuisine.isValidCuisine(trimmedCuisine)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new ParseException(Cuisine.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Cuisine(trimmedCuisine);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Parses a {@code String visit} into a {@code Visit}."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws ParseException if the given {@code Visit} is invalid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static Visit parseVisit(String visit) throws ParseException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String trimmedVisit \u003d visit.trim();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!Visit.isValidVisit(trimmedVisit)) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new ParseException(Visit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Visit(trimmedVisit);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline) || Deadline.hasDeadlinePassed(trimmedDeadline)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Workload parseWorkload(String estTime) throws ParseException {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(estTime);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedEstTime \u003d estTime.trim();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Workload.isValidWorkload(trimmedEstTime)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Workload(trimmedEstTime);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String duration} into an {@code Duration}."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new Duration(trimmedDuration);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String eventTitle} into an {@code EventTitle}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code EventTitle} is invalid."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static EventTitle parseEventTitle(String eventTitle) throws ParseException {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(eventTitle);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedEventTitle \u003d eventTitle.trim();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!EventTitle.isValidEventTitle(trimmedEventTitle)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(EventTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new EventTitle(trimmedEventTitle);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String eventDate} into an {@code EventDate}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code EventDate} is invalid."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static EventDate parseEventDate(String eventDate) throws ParseException {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedEventDate \u003d eventDate.trim();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!EventDate.isValidEventDate(trimmedEventDate) || EventDate.hasEventDatePassed(trimmedEventDate)) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new EventDate(trimmedEventDate);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Parses a {@code String place} into an {@code Place}."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws ParseException if the given {@code Place} is invalid."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static Place parsePlace(String place) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(place);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String trimmedPlace \u003d place.trim(); // there is no invalid value for place."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new Place(trimmedPlace);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String status} into a {@code Status}."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given {@code Status} is invalid."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Status(trimmedStatus);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses a {@code String} into a integer value."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the given input value is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static int parseNumDays(String numDays) throws ParseException {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(numDays);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String validationRegex \u003d \"^\\\\d*[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String trimmedNumDays \u003d numDays.trim();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!trimmedNumDays.matches(validationRegex)) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Integer.valueOf(trimmedNumDays);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 78,
      "Vanessa1098": 99,
      "-": 127,
      "ElysiaTanZY": 103,
      "hhjoel": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Parsers input for the new schedule command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NUM_DAYS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NUM_DAYS)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int numDays \u003d ParserUtil.parseNumDays(argMultimap.getValue(PREFIX_NUM_DAYS).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new ScheduleCommand(numDays);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "ElysiaTanZY": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setPersons(newData.getPersonsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return persons.getBdayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 118,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Wraps all data at the EventSchedule level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Duplicates are not allowed by isSameEvent comparison"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventSchedule implements ReadOnlyEventSchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final EventList events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventSchedule() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Creates an EventList using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventSchedule(ReadOnlyEventSchedule toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Replaces the contents of the event list with {@code Events}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Must not contain duplicate events"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvents(ObservableList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Resets the existing data of this {@code EventList} with {@code newData}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void resetData(ReadOnlyEventSchedule newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        setEvents(newData.getEventsList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if an identical event as {@code Event} exists in the event schedule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Adds an event to the event schedule; event must not already exist. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Sorts events in the event schedule by the filter. */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void sortEvent(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events.sort(comparator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return events.hasClashingEvent(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Removes {@code key} from this {@code EventSchedule}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * {@code key} must exist in the EventSchedule."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvent(Event target, Event markedEvent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(markedEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events.setEvent(target, markedEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventsList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof EventSchedule // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 events.equals(((EventSchedule) other).events));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_ASSIGNMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Predicate\u003cRestaurant\u003e PREDICATE_SHOW_ALL_RESTAURANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  User Prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Clears all data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Address Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventsList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list for the result panel*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonListResult();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate} in the result panel."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This changes the state (called by a command that edits the database)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate} in the result panel."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This does not change the state (only called by the vanilla (ab)get command)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param predicate the predicate"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param isGet this is always true, extra parameter for method overloading"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate, boolean isGet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces restaurant book data with the data in {@code restaurantBook}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** Returns the RestaurantBook */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ReadOnlyRestaurantBook getRestaurantBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the restaurant book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    boolean hasRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Deletes the given restaurant."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must exist in the restaurant book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void deleteRestaurant(Restaurant target);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds the given restaurant."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurant} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void addRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the given restaurant {@code target} with {@code editedRestaurant}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * restaurant book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void setRestaurant(Restaurant target, Restaurant editedRestaurant);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /** Returns an unmodifiable view of the filtered restaurant list */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Updates the filter of the filtered restaurant list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Schoolwork Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Replaces SchoolworkTracker data with the data in {@code schoolworkTracker}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void setSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /** Returns the SchoolworkTracker */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ReadOnlySchoolworkTracker getSchoolworkTracker();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code Assignment} must not already exist in the schoolwork tracker."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void addAssignment(Assignment toAdd);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if an assignment with the same title and deadline as {@code assignment} exists in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * schoolwork tracker."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    boolean hasAssignment(Assignment toAdd);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sorts the schoolwork tracker by the filter."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void sortAssignment(Comparator\u003cAssignment\u003e comparator);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Sets an assignment"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param assignmentToUpdate assignment to be replaced"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param updatedAssignment assignment to replace the replaced"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void setAssignment(Assignment assignmentToUpdate, Assignment updatedAssignment);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Deletes the given assignment."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Assignment must exist in the Schoolwork Tracker."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void deleteAssignment(Assignment assignmentToDelete);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Filtered Assignment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /** Returns an unmodifiable view of the filtered assignment list */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Updates the filter of the filtered assignment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Event Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces EventSchedule data with the data in {@code eventSchedule}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void setEventSchedule(ReadOnlyEventSchedule eventSchedule);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Returns the Event Schedule */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    ReadOnlyEventSchedule getEventSchedule();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Adds the given Event."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * {@code Event} must not already exist in the event schedule."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void addEvent(Event toAdd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Deletes the given event; event must exist in the Event Schedule. */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void deleteEvent(Event eventToDelete);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if an Event with the same title and date as {@code Event} exists in the event schedule"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    boolean hasEvent(Event toAdd);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if there is an Assignment due on the same date as the event which we want to add."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    boolean hasAssignmentDueOnSameDate(Event toAdd);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Sets an event"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param eventToUpdate event to be replaced"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param updatedEvent event to replace the replaced event"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void setEvent(Event eventToUpdate, Event updatedEvent);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if there is a clashing event (same timing and same date)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    boolean hasClashingEvent(Event event);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Sorts the event schedule by the filter */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void sortEvent(Comparator\u003cEvent\u003e comparator);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code Predicate}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bday List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the list of contacts with birthdays in the next 5 days."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getBdayListResult();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule Visual Accessor \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void createSchedule(int numDays);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void setDay(int index, Day toSet);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s upcoming schedule for the next n days (today inclusive)."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cDay\u003e getSchedule();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo and Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return the number of states currently saved for undo"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    int undoStackSize();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return the number of states currently saved for redo"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    int redoStackSize();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Undo the previously entered command"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    String undo();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Redo any command that was undone"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    String redo();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 53,
      "Vanessa1098": 24,
      "-": 90,
      "ElysiaTanZY": 54,
      "hhjoel": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents the in-memory model of the address book, assignment schedule, restaurant book, event schedule data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Stack\u003cModelState\u003e undoStates;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Stack\u003cModelState\u003e redoStates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private ModelState currentModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private RestaurantBook restaurantBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private SchoolworkTracker schoolworkTracker;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private EventSchedule eventSchedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private FilteredList\u003cPerson\u003e filteredPersonsResult;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private FilteredList\u003cRestaurant\u003e filteredRestaurants;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyRestaurantBook restaurantBook,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        ReadOnlySchoolworkTracker scheduler, ReadOnlyEventSchedule eventSchedule,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(addressBook, scheduler, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.currentModel \u003d new ModelState(addressBook, restaurantBook, scheduler, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.undoStates \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.redoStates \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(currentModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.currentModel \u003d new ModelState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.undoStates \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.redoStates \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(currentModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"BIRTHDAY\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setRestaurantBook(new RestaurantBook());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setSchoolworkTracker(new SchoolworkTracker());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setEventSchedule(new EventSchedule());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"ADDRESS\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"ADDRESS\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"GETDETAIL\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schoolwork Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schoolworkTracker.resetData(schoolworkTracker);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"ASSIGNMENTS\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.addAssignment(assignment);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.sortAssignment(comparator);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(target, markedAssignment);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"ASSIGNMENTS\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.setAssignment(target, markedAssignment);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schoolworkTracker.hasAssignment(assignment);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlySchoolworkTracker getSchoolworkTracker() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schoolworkTracker;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"ASSIGNMENTS\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.removeAssignment(target);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setEventSchedule(ReadOnlyEventSchedule eventSchedule) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.eventSchedule.resetData(eventSchedule);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"EVENTS\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        eventSchedule.addEvent(event);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvent(Event target, Event markedEvent) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(target, markedEvent);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        createNewState(\"EVENTS\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventSchedule.setEvent(target, markedEvent);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasAssignmentDueOnSameDate(Event toAdd) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        LocalDate eventDate \u003d toAdd.getEventDate().getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ObservableList\u003cAssignment\u003e assignments \u003d getAssignmentList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            LocalDate assignmentDate \u003d assignments.get(i).getDeadline().getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (eventDate.isEqual(assignmentDate)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"EVENTS\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventSchedule.removeEvent(target);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void sortEvent(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        eventSchedule.sortEvent(comparator);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventSchedule.hasEvent(event);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventSchedule.hasClashingEvent(event);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ReadOnlyEventSchedule getEventSchedule() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventSchedule;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventsList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook.resetData(restaurantBook);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean hasRestaurant(Restaurant person) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook.hasRestaurant(person);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"RESTAURANTS\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.removeRestaurant(target);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void addRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"RESTAURANTS\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        createNewState(\"RESTAURANTS\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code versionedAddressBook} for the result panel"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredPersonsResult;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredPersonsResult.setPredicate(predicate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelState temp \u003d undoStates.pop();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.peek().getFilteredPersonsResult().setPredicate(predicate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(temp);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate, boolean isGet) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersonsResult.setPredicate(predicate);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurantBook.equals(other.restaurantBook)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 schoolworkTracker.equals(other.schoolworkTracker)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 eventSchedule.equals(other.eventSchedule)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredPersonsResult.equals(other.filteredPersonsResult)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredAssignments.equals(other.filteredAssignments)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 filteredRestaurants.equals(other.filteredRestaurants);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Assignment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        filteredAssignments.setPredicate(predicate);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Events} backed by the internal list of"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * {@code versionedEventSchedule}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Restaurant List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Restaurant} backed by the internal list of"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return filteredRestaurants;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants.setPredicate(predicate);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bday List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayListResult() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this.addressBook.getBdayList();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule Visual Accessor \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void createSchedule(int numDays) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedule.createSchedule(numDays);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setDay(int index, Day toSet) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedule.setDay(index, toSet);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cDay\u003e getSchedule() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this.schedule.getScheduleList();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo and Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Duplicates current state, pops current state, pushes the duplicate, the push the current state into undostack"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param commandType the command type (which databased is changed) that led to this state"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void createNewState(String commandType) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelState state \u003d ModelState.copy(currentModel);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        currentModel \u003d undoStates.pop();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        currentModel.setCommandType(commandType);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(state);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(currentModel);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        while (!redoStates.isEmpty()) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            redoStates.pop();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Make all attributes point to the current state ones"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.addressBook \u003d this.currentModel.getAddressBook();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.userPrefs \u003d this.currentModel.getUserPrefs();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersons \u003d this.currentModel.getFilteredPersons();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersonsResult \u003d this.currentModel.getFilteredPersonsResult();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook \u003d this.currentModel.getRestaurantBook();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schoolworkTracker \u003d this.currentModel.getSchoolworkTracker();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.eventSchedule \u003d this.currentModel.getEventSchedule();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants \u003d this.currentModel.getFilteredRestaurants();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredAssignments \u003d this.currentModel.getFilteredAssignments();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredEvents \u003d this.currentModel.getFilteredEvents();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the size of the undo stack"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return size of undo stack"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int undoStackSize() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return undoStates.size();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns size of redo stack"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return size of redo stack"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int redoStackSize() {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return redoStates.size();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Un-does the last operation that alters something, pops the top of the undo stack into the redo stack"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and makes the resulting top of the new undo stack the current state"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return the command type that represents which database is changed"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String commandType \u003d undoStates.peek().getCommandType();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelState popped \u003d undoStates.pop();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        redoStates.push(popped);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        currentModel \u003d undoStates.peek();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Re-does the last undone operation, pops the top of redo stack into the undo stack"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * and makes the resulting top of the new undo stack the current state"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return the command type that represents which database is changed"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String commandType \u003d redoStates.peek().getCommandType();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelState popped \u003d redoStates.pop();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        undoStates.push(popped);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        currentModel \u003d undoStates.peek();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 78,
      "Vanessa1098": 47,
      "-": 141,
      "ElysiaTanZY": 63,
      "hhjoel": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Class representing a single state of the application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class ModelState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final RestaurantBook restaurantBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final SchoolworkTracker assignmentSchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final EventSchedule eventSchedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersonsResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e filteredRestaurants;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final FilteredList\u003cPerson\u003e bdayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Initializes a ModelState with the given addressBook and userPrefs at the start."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ModelState(ReadOnlyAddressBook addressBook, ReadOnlyRestaurantBook restaurantBook,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                      ReadOnlySchoolworkTracker scheduler, ReadOnlyEventSchedule eventSchedule,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                      ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(addressBook, scheduler, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersonsResult \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook \u003d new RestaurantBook(restaurantBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignmentSchedule \u003d new SchoolworkTracker(scheduler);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.eventSchedule \u003d new EventSchedule(eventSchedule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantBook.getRestaurantsList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.assignmentSchedule.getAssignmentsList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventSchedule.getEventsList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        bdayList \u003d new FilteredList\u003c\u003e(this.addressBook.getBdayList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.commandType \u003d \"ADDRESS\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Initializes a ModelState with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ModelState(ReadOnlyAddressBook addressBook, ReadOnlyRestaurantBook restaurantBook,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                      ReadOnlySchoolworkTracker scheduler, ReadOnlyEventSchedule eventSchedule,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                      ReadOnlyUserPrefs userPrefs, String commandType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(addressBook, scheduler, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersonsResult \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook \u003d new RestaurantBook(restaurantBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignmentSchedule \u003d new SchoolworkTracker(scheduler);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.eventSchedule \u003d new EventSchedule(eventSchedule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantBook.getRestaurantsList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.assignmentSchedule.getAssignmentsList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventSchedule.getEventsList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        bdayList \u003d new FilteredList\u003c\u003e(this.addressBook.getBdayList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Initializes an empty ModelState."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ModelState() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredPersonsResult \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonsList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignmentSchedule \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.eventSchedule \u003d new EventSchedule();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantBook.getRestaurantsList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.assignmentSchedule.getAssignmentsList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventSchedule.getEventsList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        bdayList \u003d new FilteredList\u003c\u003e(this.addressBook.getBdayList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Makes a copy of the state m"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param m the state to be copied"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a new copy of the state m"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static ModelState copy(ModelState m) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new ModelState(m.getAddressBook(), m.getRestaurantBook(), m.getSchoolworkTracker(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            m.getEventSchedule(), m.getUserPrefs(), m.getCommandType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public RestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.restaurantBook;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public SchoolworkTracker getSchoolworkTracker() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this.assignmentSchedule;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventSchedule getEventSchedule() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.eventSchedule;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cPerson\u003e getFilteredPersons() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.filteredPersons;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cPerson\u003e getFilteredPersonsResult() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.filteredPersonsResult;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cRestaurant\u003e getFilteredRestaurants() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.filteredRestaurants;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cAssignment\u003e getFilteredAssignments() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.filteredAssignments;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cEvent\u003e getFilteredEvents() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.filteredEvents;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public FilteredList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.bdayList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String getCommandType() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.commandType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setCommandType(String command) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.commandType \u003d command;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 37,
      "ElysiaTanZY": 15,
      "hhjoel": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Unmodifiable view of the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEventSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Unmodifiable view of the Event Schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public interface ReadOnlyEventSchedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRestaurantBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Unmodifiable view of the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public interface ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns an unmodifiable view of the restaurant book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This list will not contain any duplicate restaurants."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getRestaurantsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Unmodifiable view of the calculated schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public interface ReadOnlySchedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the generated schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    ObservableList\u003cDay\u003e getScheduleList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySchoolworkTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Unmodifiable view of the schoolwork tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public interface ReadOnlySchoolworkTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an unmodifiable view of the assignment list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentsList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RestaurantBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.UniqueRestaurantList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Duplicates are not allowed (by .isSameRestaurant comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantBook implements ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final UniqueRestaurantList restaurants;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates an RestaurantBook using the Restaurants in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook(ReadOnlyRestaurantBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the contents of the restaurant list with {@code restaurants}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurants.setRestaurants(restaurants);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Resets the existing data of this {@code RestaurantBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void resetData(ReadOnlyRestaurantBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setRestaurants(newData.getRestaurantsList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// restaurant-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.contains(restaurant);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds a restaurant to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void addRestaurant(Restaurant p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the given restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(editedRestaurant);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void removeRestaurant(Restaurant key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.asUnmodifiableObservableList().size() + \" restaurants\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getRestaurantsList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof RestaurantBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurants.equals(((RestaurantBook) other).restaurants));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurants.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.ScheduleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Wraps all data at the schedule level."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Used only when {@code ScheduleCommand} is executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Schedule implements ReadOnlySchedule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final ScheduleList scheduleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the schedule size to the number of days queried by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void createSchedule(int numDays) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleList.setScheduleList(numDays);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Replaces the day at the specified index in the scheduleList with the new day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setDay(int index, Day toSet) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleList.setDay(index, toSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns the user\u0027s generated schedule for the next n days (including today) based on stored assignments,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * their deadlines and expected work hours per assignment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cDay\u003e getScheduleList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return scheduleList.getScheduleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SchoolworkTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.AssignmentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Wraps all data at the schoolwork tracker level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Duplicates are not allowed (by .isSameAssignment comparison)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class SchoolworkTracker implements ReadOnlySchoolworkTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final AssignmentList assignments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments \u003d new AssignmentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public SchoolworkTracker() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Creates an AssignmentList using the Assignments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public SchoolworkTracker(ReadOnlySchoolworkTracker toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Must not contain duplicate assignments."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(ObservableList\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Resets the existing data of this {@code AssignmentList} with {@code newData}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetData(ReadOnlySchoolworkTracker newData) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        setAssignments(newData.getAssignmentsList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if an identical assignment as {@code assignment} exists in the schoolwork tracker."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds an assignment to the schoolwork tracker."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The assignment must not already exist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignments.add(assignment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sort assignments in the schoolwork tracker by the filter."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.sort(comparator);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(markedAssignment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.setAssignment(target, markedAssignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Removes {@code key} from this {@code SchoolworkTracker}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * {@code key} must exist in the schoolwork tracker."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentsList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof SchoolworkTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 assignments.equals(((SchoolworkTracker) other).assignments));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return assignments.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 51,
      "ElysiaTanZY": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Path restaurantBookFilePath \u003d Paths.get(\"data\" , \"restaurantbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Path schedulerFilePath \u003d Paths.get(\"data\", \"assignments.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Path eventScheduleFilePath \u003d Paths.get(\"data\", \"events.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Path getEventScheduleFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventScheduleFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setSchedulerFilePath(Path schedulerFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(schedulerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedulerFilePath \u003d schedulerFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEventScheduleFilePath(Path eventScheduleFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(eventScheduleFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventScheduleFilePath \u003d eventScheduleFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 schedulerFilePath.equals(o.schedulerFilePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 eventScheduleFilePath.equals(o.eventScheduleFilePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 restaurantBookFilePath.equals(o.restaurantBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, restaurantBookFilePath,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                schedulerFilePath, eventScheduleFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        sb.append(\"Gui Settings : \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        sb.append(\"\\nLocal data file location : \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + addressBookFilePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + restaurantBookFilePath"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                + schedulerFilePath"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                + eventScheduleFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 16,
      "-": 83,
      "ElysiaTanZY": 10,
      "hhjoel": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an assignment that a user can keep track of."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Identity Fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Workload estHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title The description of the assignment to be completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param deadline The deadline by when the assignment needs to be completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours The estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment(Title title, Deadline deadline, Workload estHours) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title, deadline, estHours);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d new Status(Status.ASSIGNMENT_OUTSTANDING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructor to be used when loading saved assignments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title The description of the assignment to be completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param deadline The deadline by when the assignment needs to be completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours The estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param status The status of the assignment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment(Title title, Deadline deadline, Workload estHours, Status status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title, deadline, estHours);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Workload getWorkload() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return estHours;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nDue Date: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nEstimated work hours: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getWorkload())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\nStatus: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if both assignments are the same."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Two assignments are the same if they have the same title and deadline."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherAssignment.getDeadline().dateTime.compareTo(getDeadline().dateTime) \u003d\u003d 0"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 (otherAssignment.getTitle().equals(getTitle()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if both assignments have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof Assignment)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment otherAssignment \u003d (Assignment) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return otherAssignment.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherAssignment.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherAssignment.getWorkload().equals(getWorkload())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherAssignment.getDeadline().dateTime.compareTo(getDeadline().dateTime) \u003d\u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSameAssignment(Assignment)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * As such, adding and updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * ensure that the assignment being added or updated is unique in terms of identity in the AssignmentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(AssignmentList replacement) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e replacement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!assignmentsAreUnique(replacement)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sorts the scheduler list as an {@code ObservableList}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sort(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof AssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 internalList.equals(((AssignmentList) other).internalList));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment(Assignment target, Assignment markedAssignment) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(target, markedAssignment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!target.isSameAssignment(markedAssignment) \u0026\u0026 contains(markedAssignment)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        internalList.set(index, markedAssignment);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if {@code assignment} contains only unique assignments."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 75,
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Deadline in the Schoolwork Tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \"Deadline cannot be empty and has to be in yyyy-MM-dd HH:mm (24-hour clock) format. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + \"Make sure deadline is also after \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Deadline}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param deadline The day and time the assignment is due."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(deadline, inputFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Getter for datetime object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @return datetime of deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param testDeadline The input deadline to be tested."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if deadline is not an empty string, follows the required format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidDeadline(String testDeadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDateTime.parse(testDeadline, inputFormat);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param testDeadline The input deadline to be tested."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if the deadline that the user is trying to set for a new assignment is already past the current"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * date and time."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean hasDeadlinePassed(String testDeadline) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(testDeadline, inputFormat);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (dateTime.isBefore(LocalDateTime.now(ZoneId.of(\"Singapore\")))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return dateTime.format(outputFormat);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 dateTime.compareTo(((Deadline) other).dateTime) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 10,
      "ElysiaTanZY": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/DeadlineComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares deadline and sort them in chronological order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DeadlineComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (a1.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a2.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (a2.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a1.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (a1.getDeadline().getDateTime().isEqual(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                if (Float.parseFloat(a1.getWorkload().estHours) \u003d\u003d Float.parseFloat(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                } else if (Float.parseFloat(a1.getWorkload().estHours) \u003e Float.parseFloat(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (a1.getDeadline().getDateTime().isAfter(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 27,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Status in the Schoolwork Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String ASSIGNMENT_DONE \u003d \"COMPLETED\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String ASSIGNMENT_OUTSTANDING \u003d \"UNCOMPLETED\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status can only be \" + ASSIGNMENT_DONE + \" or \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + ASSIGNMENT_OUTSTANDING + \" (case insensitive)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Status(String status) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(status);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status.toUpperCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidStatus(String status) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return status.toUpperCase().equals(ASSIGNMENT_OUTSTANDING) || status.toUpperCase().equals(ASSIGNMENT_DONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 status.equals(((Status) other).status)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Title in the Schoolwork Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Assignment title cannot be left empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Title}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param title Title of the assignment to be stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input title to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if description of assignment is not empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/TitleComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares the title of assignment and sort the in alphabetical order"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class TitleComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (a1.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a2.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (a2.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a1.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (a1.getTitle().title.toLowerCase().compareTo(a2.getTitle().title.toLowerCase()) \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (a1.getTitle().title.toLowerCase().compareTo(a2.getTitle().title.toLowerCase()) \u003e 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 23,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Workload.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an Assignment\u0027s Workload in the Schoolwork Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWorkload(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Workload {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Estimated workload cannot be left empty, \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + \"if no estimates can be made enter \u00270\u0027. Round off estimates to the nearest half an hour.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+\\\\.?(\\\\d{0,1}[0,5])?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String estHours;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Workload}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param estHours Estimated hours required to complete the assignment."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Workload(String estHours) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireAllNonNull(estHours);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidWorkload(estHours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test The input duration to be tested."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if the input duration contains only numbers and contains at least one digit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidWorkload(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return estHours + \" hours\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Workload // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 estHours.equals(((Workload) other).estHours)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/WorkloadComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Compares workload and sort in increasing order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class WorkloadComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int compare(Assignment a1, Assignment a2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (a1.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a2.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (a2.getStatus().status.equals(Status.ASSIGNMENT_DONE)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u0026\u0026 a1.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (Float.parseFloat(a1.getWorkload().estHours) \u003d\u003d Float.parseFloat(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                if (a1.getDeadline().getDateTime().isEqual(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } else if (a1.getDeadline().getDateTime().isAfter(a2.getDeadline().getDateTime())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else if (Float.parseFloat(a1.getWorkload().estHours) \u003e Float.parseFloat(a2.getWorkload().estHours)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 27,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Signals that the operation will result in duplicate Assignments (Assignments are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/AllocatedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an assignment whose workload is allocated to a {@code Day} object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AllocatedAssignment extends Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final float allocatedHours;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AllocatedAssignment(float allocatedHours, String assignment) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(assignment);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.allocatedHours \u003d allocatedHours;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return super.toString() + \" (\" + allocatedHours + \" hours)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents an assignment that is associated with a given {@code Day} object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment (String assignment) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents a {@code Day} in the {@code ScheduleList}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Hours totalAllocatedHours;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ArrayList\u003cAssignment\u003e dueAssignments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ArrayList\u003cAssignment\u003e allocatedAssignments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Day() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.totalAllocatedHours \u003d new Hours(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.dueAssignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.allocatedAssignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Hours getTotalAllocatedHours() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return totalAllocatedHours;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setTotalAllocatedHours(float toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        totalAllocatedHours \u003d new Hours(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetDueAssignments() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        dueAssignments.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ArrayList\u003cAssignment\u003e getDueAssignments() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return dueAssignments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addDueAssignment(String assignment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        dueAssignments.add(new Assignment(assignment));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetAllocatedAssignments() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        allocatedAssignments.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ArrayList\u003cAssignment\u003e getAllocatedAssignments() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return allocatedAssignments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAllocatedAssignment(float hours, String assignment) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        allocatedAssignments.add(new AllocatedAssignment(hours, assignment));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Hours.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents the expected workload for a given {@code Day}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Hours {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final float hours;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Hours(float hours) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/ScheduleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A list of days that corresponds to the user\u0027s generated schedule based on uncompeted assignments, their deadlines"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * and estimated work hours."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final ObservableList\u003cDay\u003e scheduleList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ScheduleList() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cDay\u003e getScheduleList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Replaces the day at the specified index in the scheduleList with the new day."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setDay(int index, Day toSet) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleList.set(index, toSet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the size of the scheduleList to the number of days queried by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setScheduleList(int numDays) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int currSize \u003d scheduleList.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (numDays \u003e currSize) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            for (int i \u003d 0; i \u003c (numDays - currSize); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                scheduleList.add(new Day());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            for (int j \u003d 0; j \u003c (currSize - numDays); j++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                scheduleList.remove(scheduleList.size() - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int k \u003d 0; k \u003c scheduleList.size(); k++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            scheduleList.get(k).resetDueAssignments();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            scheduleList.get(k).resetAllocatedAssignments();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents an Event\u0027s duration."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@Link #isValidDuration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration cannot be left empty, \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"please give an estimate of duration if you are unable to get exact timing\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \" and round off to the nearest hour. \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,2}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Instance field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final String duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * durationHours + durationMinutes \u003d total duration of the event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param testDuration The input duration to be tested."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if the input duration contains only numbers and at least one digit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static boolean isValidDuration(String testDuration) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return testDuration.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return duration + \" hours\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.assignment.Workload // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 duration.equals(((seedu.address.model.event.Duration) other).duration)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/DurationComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Compares duration and sorts in increasing order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class DurationComparator implements Comparator\u003cEvent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int duration1 \u003d Integer.parseInt(e1.getDuration().duration);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int duration2 \u003d Integer.parseInt(e2.getDuration().duration);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // equal"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if ((duration1 \u003d\u003d duration2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else if (duration1 \u003e duration2) { // duration 1 \u003e duration 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else { // duration 2 \u003c duration 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 22,
      "Vanessa1098": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents a social event that a user wants to keep track of."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final EventTitle eventTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Place place;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Every field must be present and non-null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param eventTitle The description of the event to be attended."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param eventDate The date and time of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param duration The duration of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param place The place at which the event will be held."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Event(EventTitle eventTitle, EventDate eventDate, Duration duration, Place place) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(eventTitle, eventDate, duration, place);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventTitle \u003d eventTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Need for constructor to be used when loading saved events?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventTitle getEventTitle() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventDate getEventDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Duration getDuration () {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Place getPlace() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return place;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // NTS can change to start time \u0026 end time instead of duration?"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        builder.append(\"Event: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(getEventTitle())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(\"\\nDate of event: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(\"\\nDuration of event: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(\"\\nLocation of event: \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(getPlace())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if both events are the same."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Two events are the same if they have the same title and date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().dateTime.compareTo(getEventDate().dateTime) \u003d\u003d 0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 (otherEvent.getEventTitle().equals(getEventTitle()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return otherEvent.getEventTitle().equals(getEventTitle())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 otherEvent.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 otherEvent.getPlace().equals(getPlace())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().dateTime.compareTo(getEventDate().dateTime) \u003d\u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents an Event\u0027s date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@Link #isValidDate(String)} and {@Link #isValidTime(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \"Event date cannot be empty and has to be in yyyy-MM-dd HH:mm (24-hour clock) format. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + \"Make sure event date is also after \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            + LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Constructs a {@code EventDate}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventDate(String eventDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(eventDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        checkArgument(isValidEventDate(eventDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(eventDate, inputFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter for datetime object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return datetime of EventDate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param testEventDate The input event date to be tested."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return True if event date is not an empty string \u0026 follows required format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static boolean isValidEventDate(String testEventDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            LocalDateTime.parse(testEventDate, inputFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param testEventDate the input event date to be tested."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if the event date that the user is trying to set for a new event is already past the current"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * date and time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static boolean hasEventDatePassed(String testEventDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(testEventDate, inputFormat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (dateTime.compareTo(LocalDateTime.now(ZoneId.of(\"Singapore\"))) \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return dateTime.format(outputFormat);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.event.EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 dateTime.compareTo(((seedu.address.model.event.EventDate) other).dateTime) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Compares event date and sorts them in chronological order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventDateComparator implements Comparator\u003cEvent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // equal; we don\u0027t need to compare duration because no 2 event dates and times"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // should be the same! (can add an assert statement here to check)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (e1.getEventDate().getDateTime().isEqual(e2.getEventDate().getDateTime())) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else if (e1.getEventDate().getDateTime().isAfter(e2.getEventDate().getDateTime())) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return 1; // e1 date is after e2 date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.exceptions.ClashingEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * As such, adding and updating of events uses Event#isSameEvent(Event) for equality so as to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * ensure that the event being added or updated is unique in terms of identity in the EventSchedule."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvents(seedu.address.model.event.EventList replacement) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e replacement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!eventsAreUnique(replacement)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ClashingEventException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvent(Event target, Event markedEvent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(target, markedEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!target.isSameEvent(markedEvent) \u0026\u0026 contains(markedEvent)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        internalList.set(index, markedEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Adds an event to the schedule."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new ClashingEventException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if {@code EventSchedule} contains only unique events."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given event."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Removes the equivalent event from the Schedule."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * The Event must exist in the Schedule."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return size of the Event List."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Checks if there is a clashing event (determined by whether or not 2 events have the same date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * and time."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (internalList.get(i).getEventDate().dateTime.compareTo(event.getEventDate().dateTime) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Sorts the Event Schedule as an {@code ObservableList}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void sort(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.event.EventList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.event.EventList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTitle.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents an Event\u0027s title."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@Link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Event title cannot be empty!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Instance fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final String eventTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Constructs a {@code EventTitle}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param eventTitle Title of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventTitle(String eventTitle) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(eventTitle);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        checkArgument(isValidEventTitle(eventTitle), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventTitle \u003d eventTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static boolean isValidEventTitle(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.event.EventTitle // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 eventTitle.equals(((seedu.address.model.event.EventTitle) other).eventTitle)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventTitle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTitleComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Compares the title of an Event and sorts in alphabetical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventTitleComparator implements Comparator\u003cEvent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return e1.getEventTitle().eventTitle.compareTo(e2.getEventTitle().eventTitle);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Place.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents the location at which the Event will be held."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class Place {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Instance variable"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final String place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Place (String place) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(place);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return place;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.event.Place // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 place.equals(((seedu.address.model.event.Place) other).place)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/PlaceComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Compares the location of an Event and sorts in alphabetical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class PlaceComparator implements Comparator\u003cEvent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return e1.getPlace().place.compareTo(e2.getPlace().place);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/ClashingEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Signals that the operation will result in clashing Events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Events are considered duplicate if they have same Title and DateTime."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class ClashingEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public ClashingEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        super(\"Operation results in clashing events!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Signals that the operation will result in clashing Events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Events are considered duplicate if they have same Title and DateTime."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        super(\"Operation results in duplicate events!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Signals that the operation is unable to find the specified Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid address or address field is not supplied."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Birthday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents a Person\u0027s Birthday in the Address Book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Birthday has to be in MM-dd format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        .parseDefaulting(ChronoField.YEAR, 2020).toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final String birthday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code Birthday}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param date A valid birthday (Non-null)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Birthday(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param test the input date to be tested."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid birthday: Either empty or in the correct format required."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            LocalDate.parse(test, inputFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (birthday.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate bday \u003d LocalDate.parse(birthday, inputFormat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return bday.format(outputFormat);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 birthday.equals(((Birthday) other).birthday)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return birthday.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BirthdayComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Compares birthdays and sorts them in chronological order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class BirthdayComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        .parseDefaulting(ChronoField.YEAR, 2020).toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public int compare(Person p1, Person p2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return LocalDate.parse(p1.getBirthday().birthday, inputFormat)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .compareTo(LocalDate.parse(p2.getBirthday().birthday, inputFormat));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns true if a given string is a valid email or the email field is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "ElysiaTanZY": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Organization.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents a Person\u0027s Organization in the Address Book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Guarantees: immutable, is always valid."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class Organization {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // Instance variables"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final String organization;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Constructs a {@code Organization}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param organization A valid organization name (Non-null)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Organization(String organization) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(organization);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (this.organization.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this.organization;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof Organization // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 organization.equals(((Organization) other).organization)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return organization.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OrganizationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class OrganizationContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public OrganizationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getOrganization().organization, keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof OrganizationContainsKeywordsPredicate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((OrganizationContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Organization organization;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, ArrayList\u003cRemark\u003e remarks,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                Birthday birthday, Organization organization, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags); // do I need to put organization here?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remarks.addAll(remarks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ArrayList\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Organization getOrganization() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return organization;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Concatenates all the Person\u0027s tags together into one string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * This is to be used by the TagsContainsKeywordsPredicate class"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return String of all concatenated tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public String getTagsForPredicate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        String concatenatedTags \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (Iterator\u003cTag\u003e it \u003d tags.iterator(); it.hasNext(); ) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            Tag t \u003d it.next();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            concatenatedTags \u003d concatenatedTags + t.toString().toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return concatenatedTags;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 otherPerson.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 otherPerson.getOrganization().equals(getOrganization())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return Objects.hash(name, phone, email, address, remarks, birthday, organization, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nEmail: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nAddress: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nRemarks: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        getRemark().forEach(builder::append);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        builder.append(\"\\nBirthday: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nOrganization: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .append(getOrganization())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nTags: \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 27,
      "Vanessa1098": 9,
      "-": 112,
      "ElysiaTanZY": 9,
      "hhjoel": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonExistPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonExistPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonExistPredicate(Person person, Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean test(Person personToGet) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!person.isSamePerson(personToGet) \u0026\u0026 model.hasPerson(personToGet)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof PersonExistPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 person.equals(((PersonExistPredicate) other).person)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \"Remarks should not be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return !test.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return \u0027[\u0027 + value + \u0027]\u0027;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag}s matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .anyMatch(keyword -\u003e person.getTagsForPredicate().contains(keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // what is this equals here for?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final ObservableList\u003cPerson\u003e bDayList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns a list of contacts whose birthday is in the upcoming 5 days."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.setBdayList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return bDayList.sorted(new BirthdayComparator());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the birthday list with contacts whose birthday is in the upcoming 5 days."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setBdayList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ObservableList\u003cPerson\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now(ZoneId.of(\"Singapore\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            String bDay \u003d internalList.get(i).getBirthday().birthday;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (!bDay.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                if (withinRange(bDay, currDate, currDate.plusDays(5))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    result.add(internalList.get(i));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bDayList.setAll(result);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Checks whether the birthday of the user\u0027s contact is in the next 5 days from current date including today."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param bDay Birthday of contact."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param currDate Today\u0027s date."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param currDateAfter5Days Date 5 days from today."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @return Returns true if the contact\u0027s birthday is in the next 5 days from current date, including today."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws ParseException Thrown when bDay is empty."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean withinRange(String bDay, LocalDate currDate, LocalDate currDateAfter5Days) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .parseDefaulting(ChronoField.YEAR, LocalDate.now(ZoneId.of(\"Singapore\")).getYear())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(bDay, inputFormat);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (date.compareTo(currDate) \u003e\u003d 0 \u0026\u0026 date.compareTo(currDateAfter5Days) \u003c 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "ElysiaTanZY": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Cuisine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s cuisine in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCuisine(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Cuisine {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Cuisines should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*|^$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String cuisine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Cuisine}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param cuisine A valid cuisine."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Cuisine(String cuisine) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(cuisine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidCuisine(cuisine), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid cuisine."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidCuisine(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Cuisine // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 cuisine.equals(((Cuisine) other).cuisine)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Hours.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s hours in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHours(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Hours {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Hours should only contain of this format XXXX:YYYY, where XXXX and YYYY are the opening \u0026 closing times.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"(([0-1][0-9][0-5][0-9]|[2][0-3][0-5][0-9]):([0-1][0-9][0-5][0-9]|[2][0-3][0-5][0-9]))|^$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String hours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Hours}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param hours A valid hours."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Hours(String hours) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidHours(hours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid hours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidHours(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Hours // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 hours.equals(((Hours) other).hours)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Person\u0027s location in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Locations should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String fullLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        fullLocation \u003d location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 fullLocation.equals(((Location) other).fullLocation)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullLocation.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/LocationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Restaurant}\u0027s {@code Location} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class LocationContainsKeywordsPredicate implements Predicate\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Restaurant restaurant) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(restaurant.getLocation().fullLocation, keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.restaurant.LocationContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.address.model.restaurant.LocationContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s name in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Represents a Restaurant\u0027s name in the restaurant book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final String note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param note A valid note."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Note(String note) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 note.equals(((Note) other).note)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return note.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Restaurant\u0027s price in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Prices should contain only 1, 2, or 3 dollar signs, but can be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Only dollar signs allowed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\$\\\\$\\\\$|\\\\$\\\\$|\\\\$|^$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public final String price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 price.equals(((Price) other).price)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/RNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Tests that a {@code Restaurant}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class RNameContainsKeywordsPredicate implements Predicate\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public RNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Getter method for the number of keywords in the predicate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @return Number of keywords in the Predicate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean test(Restaurant restaurant) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(restaurant.getName().fullName, keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                || (other instanceof seedu.address.model.restaurant.RNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.address.model.restaurant.RNameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Restaurant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Restaurant {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // for sarah\u0027s use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Hours hours;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final Cuisine cuisine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Visit visit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e recommendedFood;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e goodFood;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cNote\u003e badFood;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Restaurant(Name name, Location location, Hours hours, Price price, Cuisine cuisine,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                      Visit visit, ArrayList\u003cNote\u003e recommendedFood,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                      ArrayList\u003cNote\u003e goodFood, ArrayList\u003cNote\u003e badFood) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(name, location);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood \u003d recommendedFood;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood \u003d goodFood;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood \u003d badFood;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Hours getHours() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Cuisine getCuisine() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Visit getVisit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return visit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ArrayList\u003cNote\u003e getRecommendedFood() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return recommendedFood;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ArrayList\u003cNote\u003e getGoodFood() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return goodFood;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ArrayList\u003cNote\u003e getBadFood() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return badFood;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if both restaurants of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean isSameRestaurant(Restaurant otherRestaurant) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (otherRestaurant \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return otherRestaurant !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 (otherRestaurant.getLocation().equals(getLocation()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * This defines a stronger notion of equality between two restaurants."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!(other instanceof Restaurant)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant otherRestaurant \u003d (Restaurant) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getHours().equals(getHours())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 otherRestaurant.getCuisine().equals(getCuisine())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 otherRestaurant.getVisit().equals(getVisit())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 otherRestaurant.getRecommendedFood().equals(getRecommendedFood())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 otherRestaurant.getGoodFood().equals(getGoodFood())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 otherRestaurant.getBadFood().equals(getBadFood());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return Objects.hash(name, location, hours, price, cuisine, visit, recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nLocation: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nHours: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getHours())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nPrice Point: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(\"\\nCuisine: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .append(getCuisine())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(\"\\nVisited: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(getVisit())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(\"\\nRecommended food: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(getRecommendedFood())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(\"\\nGood food: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(getGoodFood())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(\"\\nBad food: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .append(getBadFood());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 37,
      "hhjoel": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/UniqueRestaurantList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.exceptions.DuplicateRestaurantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.exceptions.RestaurantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A list of restaurants that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A restaurant is considered unique by comparing using {@code Restaurant#isSameRestaurant(Restaurant)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * As such, adding and updating of restaurants uses Restaurant#isSameRestaurant(Restaurant) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * so as to ensure that the restaurant being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * UniqueRestaurantList. However, the removal of a restaurant uses Restaurant#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * as to ensure that the restaurant with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * @see Restaurant#isSameRestaurant(Restaurant)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class UniqueRestaurantList implements Iterable\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if the list contains an equivalent restaurant as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean contains(Restaurant toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRestaurant);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Adds a restaurant to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void add(Restaurant toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant in t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * he list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!target.isSameRestaurant(editedRestaurant) \u0026\u0026 contains(editedRestaurant)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.set(index, editedRestaurant);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Removes the equivalent restaurant from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * The restaurant must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void remove(Restaurant toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(UniqueRestaurantList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replaces the contents of this list with {@code restaurants}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireAllNonNull(restaurants);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!restaurantsAreUnique(restaurants)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        internalList.setAll(restaurants);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Iterator\u003cRestaurant\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                || (other instanceof UniqueRestaurantList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRestaurantList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if {@code restaurants} contains only unique restaurants."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private boolean restaurantsAreUnique(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c restaurants.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            for (int j \u003d i + 1; j \u003c restaurants.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                if (restaurants.get(i).isSameRestaurant(restaurants.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/Visit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Represents a Restaurant\u0027s name in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVisit(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class Visit {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \"Visited field should only be Yes or No, and should not be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String RESTAURANT_VISITED \u003d \"Yes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String RESTAURANT_NOT_VISITED \u003d \"No\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Allows only \"Yes\" or \"No\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"Yes|No\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final String visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Constructs a {@code Visit}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @param visit A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Visit(String visit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        checkArgument(isValidVisit(visit), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns true if a given string is a valid visited status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static boolean isValidVisit(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return visit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                || (other instanceof Visit // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 visit.equals(((Visit) other).visit)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return visit.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 51,
      "hhjoel": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/exceptions/DuplicateRestaurantException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DuplicateRestaurantException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public DuplicateRestaurantException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super(\"Operation would result in duplicate restaurants\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/restaurant/exceptions/RestaurantNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric (spaces are allowed) \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        + \"but cannot be an empty string\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\d]+(?: [a-zA-Z\\\\d]+)*$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cRemark\u003e EMPTY_REMARK \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cRemark\u003e SOME_REMARK \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cNote\u003e SOME_RECOMMENDED_NOTE \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cNote\u003e SOME_GOOD_NOTE \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final ArrayList\u003cNote\u003e SOME_BAD_NOTE \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Birthday EMPTY_BIRTHDAY \u003d new Birthday(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final Organization EMPTY_ORGANIZATION \u003d new Organization(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        SOME_REMARK.add(new Remark(\"Likes seafood\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), SOME_REMARK,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    new Birthday(\"01-25\"), EMPTY_ORGANIZATION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    new Organization(\"NUS Climbing Club\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK, new Birthday(\"05-18\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    EMPTY_ORGANIZATION, getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Organization(\"Cell group\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK, new Birthday(\"10-12\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Organization(\"DBS\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK, EMPTY_BIRTHDAY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Organization(\"Accenture\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static Restaurant[] getSampleRestaurants() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        SOME_RECOMMENDED_NOTE.add(new Note(\"Mcspicy\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        SOME_GOOD_NOTE.add(new Note(\"Fries\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        SOME_BAD_NOTE.add(new Note(\"Salad\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant[] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new Restaurant(new seedu.address.model.restaurant.Name(\"McDonalds\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Location(\"West Coast\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Hours(\"0000:0000\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Price(\"$\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    new Cuisine(\"Fast Food\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    new Visit(\"Yes\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    SOME_RECOMMENDED_NOTE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    SOME_GOOD_NOTE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    SOME_BAD_NOTE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static ReadOnlyRestaurantBook getSampleRestaurantBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook sampleRb \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Restaurant sampleRestaurant : getSampleRestaurants()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            sampleRb.addRestaurant(sampleRestaurant);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 31,
      "-": 50,
      "ElysiaTanZY": 7,
      "hhjoel": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EventScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EventSchedule}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public interface EventScheduleStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Returns the file path of the data file */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Path getEventScheduleFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns EventSchedule data as a {@link ReadOnlyEventSchedule}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws DataConversionException if the data in the storage is not in expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws IOException If there was any problem when reading from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Optional\u003cReadOnlyEventSchedule\u003e readEventSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** See #getEventScheduleFilePath() */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Optional \u003cReadOnlyEventSchedule\u003e readEventSchedule(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Saves the given {@link ReadOnlyEventSchedule} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param eventSchedule cannot be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void saveEventSchedule(ReadOnlyEventSchedule eventSchedule) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** @see #saveEventSchedule(ReadOnlyEventSchedule) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void saveEventSchedule(ReadOnlyEventSchedule eventSchedule, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Jackson-friendly version of {@Link Assignment}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String estHours;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"title\") String title, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                             @JsonProperty(\"workload\") String estHours, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d estHours;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        deadline \u003d source.getDeadline().dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        estHours \u003d source.getWorkload().estHours;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        status \u003d source.getStatus().status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (estHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Workload.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Workload.isValidWorkload(estHours)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Workload modelEstHours \u003d new Workload(estHours);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Status modelStatus \u003d new Status(status);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Assignment(modelTitle, modelDeadline, modelEstHours, modelStatus);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.EventTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Place;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Jackson-friendly version of {@Link Event}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final String eventTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final String eventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final String place;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given Event details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventTitle\") String eventTitle, @JsonProperty(\"eventDate\") String eventDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                            @JsonProperty(\"duration\") String duration, @JsonProperty(\"place\") String place) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventTitle \u003d eventTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventTitle \u003d source.getEventTitle().eventTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventDate \u003d source.getEventDate().dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        duration \u003d source.getDuration().duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        place \u003d source.getPlace().place;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Converts this Jackson-friendly adapted Event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (eventTitle \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    EventTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!EventTitle.isValidEventTitle(eventTitle)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(EventTitle.MESSAGE_CONSTRAINTS); // until here"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final EventTitle modelEventTitle \u003d new EventTitle(eventTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!EventDate.isValidEventDate(eventDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final EventDate modelEventDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final Duration modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (place \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    Place.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final Place modelPlace \u003d new Place(place); // place has no invalid input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return new Event(modelEventTitle, modelEventDate, modelDuration, modelPlace);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class JsonAdaptedNote {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given {@code note}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedNote(String note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts a given {@code Notes} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        note \u003d source.note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String getNote() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts this Jackson-friendly adapted notes object into the model\u0027s {@code Notes} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted remark."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Note toModelType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Note(note);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedRemark\u003e remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final String birthday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"remark\") ArrayList\u003cJsonAdaptedRemark\u003e remark,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"birthday\") String birthday,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                             @JsonProperty(\"organization\") String organization,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (remark !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.remark.addAll(remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d source.getBirthday().birthday;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        organization \u003d source.getOrganization().organization;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.addAll(source.getRemark().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .map(JsonAdaptedRemark::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cRemark\u003e personRemarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (JsonAdaptedRemark r : remark) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            personRemarks.add(r.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!Birthday.isValidDate(birthday)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    Organization.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        final Organization modelOrganization \u003d new Organization(organization);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cRemark\u003e modelRemarks \u003d new ArrayList\u003c\u003e(personRemarks);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                modelRemarks, modelBirthday, modelOrganization, modelTags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 17,
      "Vanessa1098": 16,
      "-": 104,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRemark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Jackson-friendly version of {@link Remark}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class JsonAdaptedRemark {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String remarkName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Constructs a {@code JsonAdaptedRemark} with the given {@code remarkName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedRemark(String remarkName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remarkName \u003d remarkName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts a given {@code Remark} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public JsonAdaptedRemark(Remark source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarkName \u003d source.value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public String getRemarkName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return remarkName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Converts this Jackson-friendly adapted remark object into the model\u0027s {@code Remark} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Remark toModelType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Remark(remarkName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRestaurant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Jackson-friendly version of {@link Restaurant}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class JsonAdaptedRestaurant {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Restaurant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String hours;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String visit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedNote\u003e recommendedNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedNote\u003e goodNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedNote\u003e badNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code JsonAdaptedRestaurant} with the given restaurant details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRestaurant(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"hours\") String hours, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                                 @JsonProperty(\"cuisine\") String cuisine,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                 @JsonProperty(\"visit\") String visit,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                 @JsonProperty(\"recommendedNotes\") ArrayList\u003cJsonAdaptedNote\u003e recommendedNotes,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                 @JsonProperty(\"goodNotes\") ArrayList\u003cJsonAdaptedNote\u003e goodNotes,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                                 @JsonProperty(\"badNotes\") ArrayList\u003cJsonAdaptedNote\u003e badNotes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (recommendedNotes !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.recommendedNote.addAll(recommendedNotes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (goodNotes !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.goodNote.addAll(goodNotes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (badNotes !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            this.badNote.addAll(badNotes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts a given {@code Restaurant} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonAdaptedRestaurant(Restaurant source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        location \u003d source.getLocation().fullLocation;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        hours \u003d source.getHours().hours;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        price \u003d source.getPrice().price;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        cuisine \u003d source.getCuisine().cuisine;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        visit \u003d source.getVisit().visit;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        recommendedNote.addAll(source.getRecommendedFood().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .map(JsonAdaptedNote::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        goodNote.addAll(source.getGoodFood().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .map(JsonAdaptedNote::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        badNote.addAll(source.getBadFood().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .map(JsonAdaptedNote::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts this Jackson-friendly adapted restaurant object into the model\u0027s {@code Restaurant} object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted restaurant."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Restaurant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (hours \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hours.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Hours.isValidHours(hours)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Hours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Hours modelHours \u003d new Hours(hours);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (cuisine \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cuisine.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!Cuisine.isValidCuisine(cuisine)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new IllegalValueException(Cuisine.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        final Cuisine modelCuisine \u003d new Cuisine(cuisine);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (visit \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Visit.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!Visit.isValidVisit(visit)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            throw new IllegalValueException(Visit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final Visit modelVisit \u003d new Visit(visit);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cNote\u003e modelRecommendedNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (JsonAdaptedNote rnote : recommendedNote) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            modelRecommendedNote.add(rnote.toModelType());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cNote\u003e modelGoodNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (JsonAdaptedNote gnote : goodNote) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            modelGoodNote.add(gnote.toModelType());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        final ArrayList\u003cNote\u003e modelBadNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (JsonAdaptedNote bnote : badNote) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            modelBadNote.add(bnote.toModelType());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant(modelName, modelLocation, modelHours, modelPrice, modelCuisine, modelVisit,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                modelRecommendedNote, modelGoodNote, modelBadNote);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 56,
      "hhjoel": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonEventScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/** A class to access Event Schedule data stored on a JSON file on the hard disk. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class JsonEventScheduleStorage implements EventScheduleStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEventScheduleStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonEventScheduleStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Path getEventScheduleFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cReadOnlyEventSchedule\u003e readEventSchedule() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return readEventSchedule(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Similar to {@Link #readEventSchedule()}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param filePath Location of the data, cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws DataConversionException if the file is not in correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional \u003cReadOnlyEventSchedule\u003e readEventSchedule(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        Optional\u003cJsonSerializableEventSchedule\u003e jsonEventSchedule \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                filePath, JsonSerializableEventSchedule.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!jsonEventSchedule.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return Optional.of(jsonEventSchedule.get().toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void saveEventSchedule(ReadOnlyEventSchedule eventSchedule) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        saveEventSchedule(eventSchedule, filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Similar to {@link #saveEventSchedule(ReadOnlyEventSchedule)}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void saveEventSchedule(ReadOnlyEventSchedule eventSchedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(eventSchedule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEventSchedule(eventSchedule), filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRestaurantBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A class to access RestaurantBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class JsonRestaurantBookStorage implements RestaurantBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRestaurantBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonRestaurantBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Similar to {@link #readRestaurantBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Optional\u003cJsonSerializableRestaurantBook\u003e jsonRestaurantBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                filePath, JsonSerializableRestaurantBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!jsonRestaurantBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return Optional.of(jsonRestaurantBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Similar to {@link #saveRestaurantBook(ReadOnlyRestaurantBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(restaurantBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRestaurantBook(restaurantBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSchoolworkTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A class to access SchoolworkTracker data stored in a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSchoolworkTrackerStorage implements SchoolworkTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSchoolworkTrackerStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSchoolworkTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchoolworkTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return readSchoolworkTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Similar to {@link #readSchoolworkTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Optional\u003cJsonSerializableSchoolworkTracker\u003e jsonSchoolworkTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            filePath, JsonSerializableSchoolworkTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!jsonSchoolworkTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return Optional.of(jsonSchoolworkTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        saveSchoolworkTracker(schoolworkTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Similar to {@link #saveSchoolworkTracker(ReadOnlySchoolworkTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(schoolworkTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSchoolworkTracker(schoolworkTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        persons.addAll(source.getPersonsList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableEventSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * An unmodifiable events schedule that is serializable in JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "@JsonRootName(value \u003d \"eventSchedule\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class JsonSerializableEventSchedule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Event list contains duplicate events.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /** Constructs a {@code JsonSerializableEventSchedule} with the given Events. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonSerializableEventSchedule(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Converts a given {@code ReadOnlyEventSchedule} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEventSchedule}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public JsonSerializableEventSchedule(ReadOnlyEventSchedule source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        events.addAll(source.getEventsList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Converts this Event Schedule into the model\u0027s {@code Event Schedule} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventSchedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventSchedule eventSchedule \u003d new EventSchedule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (eventSchedule.hasEvent(event)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            eventSchedule.addEvent(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventSchedule;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRestaurantBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * An Immutable RestaurantBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "@JsonRootName(value \u003d \"restaurantbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class JsonSerializableRestaurantBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Restaurants list contains duplicate restaurant(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final List\u003cJsonAdaptedRestaurant\u003e restaurants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Constructs a {@code JsonSerializableRestaurantBook} with the given restaurants."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonSerializableRestaurantBook(@JsonProperty(\"restaurants\") List\u003cJsonAdaptedRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurants.addAll(restaurants);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts a given {@code ReadOnlyRestaurantBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestaurantBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public JsonSerializableRestaurantBook(ReadOnlyRestaurantBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurants.addAll(source"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .getRestaurantsList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .map(JsonAdaptedRestaurant::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Converts this restaurant book into the model\u0027s {@code RestaurantBook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public RestaurantBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (JsonAdaptedRestaurant jsonAdaptedRestaurant : restaurants) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            Restaurant restaurant \u003d jsonAdaptedRestaurant.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (restaurantBook.hasRestaurant(restaurant)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            restaurantBook.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableSchoolworkTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * An unmodifiable schoolwork tracker that is serializable in JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "@JsonRootName(value \u003d \"scheduler\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSerializableSchoolworkTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignment list contains duplicate assignments.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given assignments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSerializableSchoolworkTracker(@JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts a given {@code ReadOnlySchoolworkTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSchoolworkTracker}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public JsonSerializableSchoolworkTracker(ReadOnlySchoolworkTracker source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignments.addAll(source.getAssignmentsList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .map(JsonAdaptedAssignment::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts this schoolwork tracker into the model\u0027s {@code SchoolworkTracker} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public SchoolworkTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker schoolworkTracker \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (schoolworkTracker.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            schoolworkTracker.addAssignment(assignment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schoolworkTracker;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RestaurantBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RestaurantBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public interface RestaurantBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns RestaurantBook data as a {@link ReadOnlyRestaurantBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @see #getRestaurantBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Saves the given {@link ReadOnlyRestaurantBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param restaurantBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @see #saveRestaurantBook(ReadOnlyRestaurantBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SchoolworkTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Represents a storage for {@link SchoolworkTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public interface SchoolworkTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Path getSchoolworkTrackerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns SchoolworkTracker data as a {@link ReadOnlySchoolworkTracker}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @see #getSchoolworkTrackerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Saves the given {@link ReadOnlySchoolworkTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @param schoolworkTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @see #saveSchoolworkTracker(ReadOnlySchoolworkTracker) (ReadOnlySchoolworkTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public interface Storage extends AddressBookStorage, RestaurantBookStorage, UserPrefsStorage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    SchoolworkTrackerStorage, EventScheduleStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Path getSchoolworkTrackerFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Path getEventScheduleFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    Optional\u003cReadOnlyEventSchedule\u003e readEventSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    void saveEventSchedule(ReadOnlyEventSchedule eventSchedule) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 13,
      "-": 31,
      "ElysiaTanZY": 10,
      "hhjoel": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private RestaurantBookStorage restaurantBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private SchoolworkTrackerStorage schedulerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private EventScheduleStorage eventScheduleStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                          RestaurantBookStorage restaurantBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                          SchoolworkTrackerStorage schedulerStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                          EventScheduleStorage eventScheduleStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.restaurantBookStorage \u003d restaurantBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.schedulerStorage \u003d schedulerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.eventScheduleStorage \u003d eventScheduleStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookStorage.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return readRestaurantBook(restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return restaurantBookStorage.readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        saveRestaurantBook(restaurantBook, restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBookStorage.saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SchoolworkTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getSchoolworkTrackerFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerStorage.getSchoolworkTrackerFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return readSchoolworkTracker(schedulerStorage.getSchoolworkTrackerFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker(Path filePath)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return schedulerStorage.readSchoolworkTracker(filePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        saveSchoolworkTracker(schoolworkTracker, schedulerStorage.getSchoolworkTrackerFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schedulerStorage.saveSchoolworkTracker(schoolworkTracker, filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event SchoolworkTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Path getEventScheduleFilePath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventScheduleStorage.getEventScheduleFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cReadOnlyEventSchedule\u003e readEventSchedule() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return readEventSchedule(eventScheduleStorage.getEventScheduleFilePath());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public Optional\u003cReadOnlyEventSchedule\u003e readEventSchedule(Path filePath)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return eventScheduleStorage.readEventSchedule(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void saveEventSchedule(ReadOnlyEventSchedule eventSchedule) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        saveEventSchedule(eventSchedule, eventScheduleStorage.getEventScheduleFilePath());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void saveEventSchedule(ReadOnlyEventSchedule eventSchedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventScheduleStorage.saveEventSchedule(eventSchedule, filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 33,
      "-": 75,
      "ElysiaTanZY": 36,
      "hhjoel": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private HBox assignmentCardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label workload;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        deadline.setText(assignment.getDeadline().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        title.setText(assignment.getTitle().title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        status.setText(\" \" + assignment.getStatus().status + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        status.setStyle(\"-fx-text-fill: #000\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (assignment.getStatus().status.equals(Status.ASSIGNMENT_OUTSTANDING)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            status.setBackground(new Background(new BackgroundFill(Color.rgb(255, 87, 51),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            status.setBackground(new Background(new BackgroundFill(Color.rgb(218, 247, 166),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        workload.setText(\"Estimated workload: \" + assignment.getWorkload().estHours + \" hours\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 63,
      "ElysiaTanZY": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignmentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title.setText(\"To-Do List:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new AssignmentListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    class AssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(new AssignmentCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 46,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * A UI component displaying information of an {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private HBox eventCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Label eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private FlowPane place;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Label eventTitle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventDate.setText(event.getEventDate().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        duration.setText(event.getDuration().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        place.getChildren().add(new Label(event.getPlace().place));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventTitle.setText(event.getEventTitle().eventTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " * Panel containing the list of events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title.setText(\"Upcoming events:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Custom {@code EventListViewCell} that displays the graphics of a {@code Event}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * using a {@code EventCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 46,
      "ElysiaTanZY": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String HELP_MESSAGE \u003d HelpCommand.MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private PersonListPanelDetail personListPanel2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private AssignmentListPanel assignmentListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private RestaurantListPanel restaurantListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private PersonListBdayPanel personBdayPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ScheduleVisualPanel schedulePanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private StackPane personListPanelPlaceholder2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personBdayPanel \u003d new PersonListBdayPanel(logic.getBdayList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personBdayPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        resultDisplay.setFeedbackToUser(Messages.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Display specified person on third panel."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private void handleGet() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanel2 \u003d new PersonListPanelDetail(logic.getFilteredPersonListResult());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personListPanel2.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Display assignments on third panel."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private void handleAssignment() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Display Events on third panel."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private void handleEvent() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Display restaurants on third panel."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private void handleRestaurant() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        restaurantListPanel \u003d new RestaurantListPanel(logic.getFilteredRestaurantList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(restaurantListPanel.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Display address book on first panel."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void handleAddress() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Display upcoming birthdays on third panel."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private void handleShowBirthday() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personBdayPanel \u003d new PersonListBdayPanel(logic.getBdayList());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(personBdayPanel.getRoot());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Display estimated workload for the next 5 days (excluding today) based on stored assignments, their deadlines"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * and estimated work hours per assignment."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private void handleShowSchedule() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schedulePanel \u003d new ScheduleVisualPanel(logic.getSchedule());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().clear();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        personListPanelPlaceholder2.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (commandResult.isGet()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                handleGet();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (commandResult.isAssignment()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                handleAssignment();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            } else if (commandResult.isEvent()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                handleEvent();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else if (commandResult.isRestaurant()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                handleRestaurant();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else if (commandResult.isShowBirthday()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                handleShowBirthday();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else if (commandResult.isShowSchedule()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                handleShowSchedule();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            handleAddress();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 12,
      "Vanessa1098": 39,
      "-": 191,
      "ElysiaTanZY": 36,
      "hhjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCardBday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A UI component that displays the information of a person whose birthday is upcoming."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class PersonCardBday extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"PersonListBdayCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"MM-dd\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        .parseDefaulting(ChronoField.YEAR, 2020).toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonCardBday(Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday.setStyle(\"-fx-text-fill: #000\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (LocalDate.parse(person.getBirthday().birthday, inputFormat).compareTo(LocalDate.now()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setText(\" Today \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setBackground(new Background(new BackgroundFill(Color.rgb(255, 87, 51),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (LocalDate.parse(person.getBirthday().birthday, inputFormat)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .compareTo(LocalDate.now().plusDays(1)) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setText(\" Tomorrow \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setBackground(new Background(new BackgroundFill(Color.rgb(255, 195, 0),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setText(\" Upcoming: \" + person.getBirthday().toString() + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            birthday.setBackground(new Background(new BackgroundFill(Color.rgb(218, 247, 166),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String remarkValue \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        while (i \u003c person.getRemark().size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            remarkValue +\u003d person.getRemark().get(i).value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (i !\u003d person.getRemark().size() - 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                remarkValue +\u003d \", \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        remark.setText(\"Remarks: \" + remarkValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        PersonCardBday card \u003d (PersonCardBday) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return person.equals(card.person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCardDetail.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonCardDetail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"PersonListCardDetail.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private HBox cardPaneDetail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Label organization;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonCardDetail(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        address.setText(\"Address: \" + person.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        email.setText(\"Email: \" + person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        birthday.setText(\"Birthday: \" + person.getBirthday().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        organization.setText(\"Organization: \" + person.getOrganization().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String remarkValue \u003d \"\\nRemarks:\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c person.getRemark().size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            remarkValue +\u003d \"\\t\" + index + \". \" + person.getRemark().get(i).value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d person.getRemark().size() - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                remarkValue +\u003d \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.setText(remarkValue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        PersonCardDetail card \u003d (PersonCardDetail) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "Vanessa1098": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListBdayPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Panel containing the list of Persons whose birthday is upcoming in the next 5 days (including today)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class PersonListBdayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"PersonListBdayPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListBdayPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ListView\u003cPerson\u003e bdayListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonListBdayPanel(ObservableList\u003cPerson\u003e bdayList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title.setText(\"Wish your friends a Happy Birthday!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bdayListView.setItems(bdayList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bdayListView.setCellFactory(listView -\u003e new PersonListBdayPanel.PersonBdayViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    class PersonBdayViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(new PersonCardBday(person).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanelDetail.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class PersonListPanelDetail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanelDetail.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ListView\u003cPerson\u003e personView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonListPanelDetail(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        title.setText(\"Showing contact details:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personView.setItems(personList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        personView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(new PersonCardDetail(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RestaurantCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * An UI component that displays information of a {@code Restaurant}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class RestaurantCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public final Restaurant restaurant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private HBox restaurantCardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Label visit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label locationR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label hours;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label cuisine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label recommendedFood;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label goodFood;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Label badFood;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantCard(Restaurant restaurant, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        name.setText(restaurant.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        locationR.setText(restaurant.getLocation().fullLocation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        hours.setText(restaurant.getHours().hours);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        price.setText(restaurant.getPrice().price);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        cuisine.setText(restaurant.getCuisine().cuisine);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String visited;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (restaurant.getVisit().visit.equals(\"Yes\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            visit.setText(\"Visited\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            visit.setBackground(new Background(new BackgroundFill(Color.rgb(30, 170, 50),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            visit.setText(\"Not Visited\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            visit.setBackground(new Background(new BackgroundFill(Color.rgb(114, 13, 40),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String recommended \u003d \"Recommended food: \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        i \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c restaurant.getRecommendedFood().size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            recommended +\u003d restaurant.getRecommendedFood().get(i).note;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d restaurant.getRecommendedFood().size() - 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                recommended +\u003d \", \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        recommendedFood.setText(recommended);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String good \u003d \"Good food: \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        i \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c restaurant.getGoodFood().size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            good +\u003d restaurant.getGoodFood().get(i).note;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d restaurant.getGoodFood().size() - 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                good +\u003d \", \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        goodFood.setText(good);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String bad \u003d \"Bad food: \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        i \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        while (i \u003c restaurant.getBadFood().size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            bad +\u003d restaurant.getBadFood().get(i).note;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (i !\u003d restaurant.getBadFood().size() - 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                bad +\u003d \", \";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        badFood.setText(bad);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        if (!(other instanceof RestaurantCard)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        RestaurantCard card \u003d (RestaurantCard) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u0026\u0026 restaurant.equals(card.restaurant);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 110,
      "ElysiaTanZY": 1,
      "hhjoel": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RestaurantListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class RestaurantListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RestaurantListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ListView\u003cRestaurant\u003e restaurantListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantListPanel(ObservableList\u003cRestaurant\u003e restaurantList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title.setText(\"Saved restaurants:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        restaurantListView.setItems(restaurantList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        restaurantListView.setCellFactory(listView -\u003e new RestaurantListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    class RestaurantListViewCell extends ListCell\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        protected void updateItem(Restaurant restaurant, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            super.updateItem(restaurant, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            if (empty || restaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                setGraphic(new RestaurantCard(restaurant, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 46,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleDayCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A UI Component that displays the information of a {@code Day}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleDayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"ScheduleDayCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public final Day day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label hours;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label dueAssignments;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label allocatedAssignments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ScheduleDayCard(Day day, int numDays) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        date.setStyle(\"-fx-text-fill: #000\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        date.setText(\" \" + LocalDate.now().plusDays(numDays).format(DateTimeFormatter.ofPattern(\"dd MMM\")) + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        hours.setText(\"Estimated workload for today: \" + day.getTotalAllocatedHours().hours + \" hours\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        dueAssignments.setText(\"Assignments due today:\" + convertAssignmentsToString(day.getDueAssignments()) + \"\\n\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        allocatedAssignments.setText(\"To-Do List:\" + convertAssignmentsToString(day.getAllocatedAssignments()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if ((numDays \u003d\u003d 0 \u0026\u0026 day.getDueAssignments().size() !\u003d 0) || day.getTotalAllocatedHours().hours \u003e 10) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            date.setBackground(new Background(new BackgroundFill(Color.rgb(255, 87, 51),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else if (day.getTotalAllocatedHours().hours \u003e 5 \u0026\u0026 day.getTotalAllocatedHours().hours \u003c\u003d 10) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            date.setBackground(new Background(new BackgroundFill(Color.rgb(255, 195, 0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            date.setBackground(new Background(new BackgroundFill(Color.rgb(218, 247, 166),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Converts the assignments allocated to a particular day into a string for display on GUI."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private String convertAssignmentsToString(ArrayList\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            result \u003d result + \"\\n\" + (i + 1) + \". \" + assignments.get(i).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ScheduleDayCard card \u003d (ScheduleDayCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return day.equals(card.day);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleVisualPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * Panel containing the list od days."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleVisualPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String FXML \u003d \"ScheduleVisualPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleVisualPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ListView\u003cDay\u003e scheduleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ScheduleVisualPanel(ObservableList\u003cDay\u003e scheduleVisual) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        title.setText(\"Schedule for the next \" + scheduleVisual.size() + \" days:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleListView.setItems(scheduleVisual);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleVisualPanel.ScheduleViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    class ScheduleViewCell extends ListCell\u003cDay\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        protected void updateItem(Day day, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            super.updateItem(day, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (empty || day \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                setGraphic(new ScheduleDayCard(day, getIndex()).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cHBox id\u003d\"assignmentCardPane\" fx:id\u003d\"assignmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"workload\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$workload\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 34,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 8,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003cHBox id\u003d\"eventCardPane\" fx:id\u003d\"eventCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                \u003cLabel fx:id\u003d\"eventTitle\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"place\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 35
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 8,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cfx:root maxHeight\u003d\"600.0\" minHeight\u003d\"600.0\" maxWidth \u003d \"1050.0\" minWidth\u003d\"1050.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Naggy Joel\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "      \u003cVBox maxWidth\u003d\"800.0\" minHeight\u003d\"600.0\" minWidth\u003d\"800.0\" prefHeight\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" minHeight\u003d\"30.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.29797979797979796, 0.5\" minHeight\u003d\"500.0\" minWidth\u003d\"800.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"500.0\" minHeight\u003d\"450.0\" maxWidth\u003d\"350.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"500.0\" prefWidth\u003d\"350.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutX\u003d\"32.0\" layoutY\u003d\"-5.0\" maxHeight\u003d\"500.0\" maxWidth\u003d\"350.0\" minHeight\u003d\"378.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"414.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"86.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutX\u003d\"29.0\" layoutY\u003d\"427.0\" maxWidth\u003d\"350.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"73.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"427.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"694.0\" minHeight\u003d\"450.0\" maxWidth\u003d\"350.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"694.0\" prefWidth\u003d\"400.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                          \u003cVBox fx:id\u003d\"personList\" layoutX\u003d\"28.0\" layoutY\u003d\"-3.0\" maxWidth\u003d\"400.0\" minHeight\u003d\"400.0\" minWidth\u003d\"400.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" layoutX\u003d\"24.0\" minHeight\u003d\"162.0\" minWidth\u003d\"400.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"2.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003cAnchorPane maxHeight\u003d\"599.0\" minHeight\u003d\"450.0\" maxWidth\u003d\"350.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"300.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cVBox fx:id\u003d\"personCard\" maxWidth\u003d\"300.0\" minHeight\u003d\"400.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder2\" layoutX\u003d\"-51.0\" layoutY\u003d\"128.0\" maxHeight\u003d\"600.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"556.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"300\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 38,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListBdayCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$birthday\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListBdayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cminWidth\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cListView fx:id\u003d\"bdayListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 20
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"45\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ElysiaTanZY": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCardDetail.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPaneDetail\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            \u003cLabel fx:id\u003d\"organization\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organization\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 38
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanelDetail.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cListView fx:id\u003d\"personView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 15
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cHBox id\u003d\"restaurantCardPane\" fx:id\u003d\"restaurantCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            \u003cLabel fx:id\u003d\"visit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"locationR\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"hours\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$hours\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"cuisine\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cuisine\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"recommendedFood\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$recommendedFood\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"goodFood\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$goodFood\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            \u003cLabel fx:id\u003d\"badFood\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$badFood\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 39,
      "hhjoel": 1
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    \u003cListView fx:id\u003d\"restaurantListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 8,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/main/resources/view/ScheduleDayCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"hours\" text\u003d\"\\$hours\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"dueAssignments\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$assignments\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cLabel fx:id\u003d\"allocatedAssignments\" text\u003d\"\\$allocatedAssignments\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 37
    }
  },
  {
    "path": "src/main/resources/view/ScheduleVisualPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" style\u003d\"-fx-text-fill:#FFF\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "  \u003cListView fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CUISINE_AMEENS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HOURS_AMEENS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LOCATION_AMEENS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_NAME_AMEENS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PRICE_AMEENS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VISITED_AMEENS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2103;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORKLOAD_DESC_CS2103;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddRestaurantCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.storage.JsonEventScheduleStorage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.storage.JsonSchoolworkTrackerStorage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.RestaurantBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new JsonRestaurantBookStorage(temporaryFolder.resolve(\"restaurantBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchoolworkTrackerStorage schedulerStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonSchoolworkTrackerStorage(temporaryFolder.resolve(\"assignments.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        JsonEventScheduleStorage eventScheduleStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new JsonEventScheduleStorage(temporaryFolder.resolve(\"events.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                schedulerStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                eventScheduleStorage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String deleteCommand \u003d \"(ab)delete 9\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonRestaurantBookStorage(temporaryFolder.resolve(\"ioExceptionRestaurantBook.json\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchoolworkTrackerStorage assignmentScheduleStorage \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonSchoolworkTrackerStorage(temporaryFolder.resolve(\"ioExceptionAssignments.json\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        JsonEventScheduleStorage eventScheduleStorage \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new JsonEventScheduleStorage(temporaryFolder.resolve(\"ioExceptionEvents.json\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                assignmentScheduleStorage,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                eventScheduleStorage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Setup LogicManager with JsonAssignmentScheduleIoExceptionThrowingStub"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentScheduleStorage \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new JsonSchoolworkTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAssignments.json\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            restaurantBookStorage,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentScheduleStorage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            eventScheduleStorage,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        addCommand \u003d AddAssignmentCommand.COMMAND_WORD + TITLE_DESC_CS2103 + DEADLINE_DESC_CS2103"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + WORKLOAD_DESC_CS2103;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(CS2103_TP).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel.addAssignment(expectedAssignment);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Setup LogicManager with JsonRestaurantBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentScheduleStorage \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new JsonSchoolworkTrackerStorage(temporaryFolder.resolve(\"ioExceptionAssignments.json\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new JsonRestaurantBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionRestaurantBook.json\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            restaurantBookStorage,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentScheduleStorage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            eventScheduleStorage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        addCommand \u003d AddRestaurantCommand.COMMAND_WORD + DESC_NAME_AMEENS + DESC_LOCATION_AMEENS + DESC_HOURS_AMEENS"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + DESC_CUISINE_AMEENS + DESC_PRICE_AMEENS + DESC_VISITED_AMEENS;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Restaurant expectedRestaurant \u003d new RestaurantBuilder().withRecommended(\"\").withBad(\"\").withGood(\"\").build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel.addRestaurant(expectedRestaurant);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static class JsonRestaurantBookIoExceptionThrowingStub extends JsonRestaurantBookStorage {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        private JsonRestaurantBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static class JsonSchoolworkTrackerIoExceptionThrowingStub extends JsonSchoolworkTrackerStorage {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        private JsonSchoolworkTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker, Path filePath)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 10,
      "-": 156,
      "ElysiaTanZY": 91,
      "hhjoel": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAssignmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAssignmentCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_assignmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ModelStubAcceptingAssignmentAdded modelStub \u003d new ModelStubAcceptingAssignmentAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        CommandResult commandResult \u003d new AddAssignmentCommand(validAssignment).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(String.format(AddAssignmentCommand.MESSAGE_SUCCESS, validAssignment),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(Arrays.asList(validAssignment), modelStub.assignmentsAdded);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddAssignmentCommand addAssignmentCommand \u003d new AddAssignmentCommand(validAssignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ModelStubWithAssignment modelStub \u003d new ModelStubWithAssignment(validAssignment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(CommandException.class, AddAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            -\u003e addAssignmentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment cs2103Tp \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment cs3243Tut \u003d new AssignmentBuilder().withTitle(\"CS3243 Tut\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddAssignmentCommand addCs2103Command \u003d new AddAssignmentCommand(cs2103Tp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddAssignmentCommand addCs3243Command \u003d new AddAssignmentCommand(cs3243Tut);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(addCs2103Command.equals(addCs2103Command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddAssignmentCommand addCs2103CommandCopy \u003d new AddAssignmentCommand(cs2103Tp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(addCs2103Command.equals(addCs2103CommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(addCs2103Command.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(addCs2103Command.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(addCs2103Command.equals(addCs3243Command));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A Model stub that contains a single assignment."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private class ModelStubWithAssignment extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        private final Assignment assignment;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ModelStubWithAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return this.assignment.isSameAssignment(assignment);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A Model stub that always accept the assignment being added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private class ModelStubAcceptingAssignmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final ArrayList\u003cAssignment\u003e assignmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return assignmentsAdded.stream().anyMatch(assignment::isSameAssignment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentsAdded.add(assignment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ReadOnlySchoolworkTracker getSchoolworkTracker() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return new SchoolworkTracker();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                model.getRestaurantBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonsList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 42,
      "ElysiaTanZY": 4,
      "hhjoel": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class AddInfoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_addInfoUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(REMARK_STUB));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(FIRST_INDEX, remarks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(AddInfoCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(addInfoCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(REMARK_STUB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased()))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(FIRST_INDEX, remarks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(AddInfoCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(expectedModel, FIRST_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(addInfoCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand remarkCommand \u003d new AddInfoCommand(outOfBoundIndex, remarks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(outOfBoundIndex, remarks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(addInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarkArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarkArrayList.add(new Remark(\"NO\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final AddInfoCommand standardCommand \u003d new AddInfoCommand(FIRST_INDEX, remarks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddInfoCommand commandWithSameValues \u003d new AddInfoCommand(FIRST_INDEX, remarks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new AddInfoCommand(SECOND_INDEX, remarks)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new AddInfoCommand(FIRST_INDEX, remarkArrayList)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 109,
      "ElysiaTanZY": 21,
      "hhjoel": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.logic.commands.ClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 3,
      "-": 28,
      "ElysiaTanZY": 3,
      "hhjoel": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // [sarah] commenting this out bc someone edited some command and now this cant compile - I can run it though"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, false)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        //different get value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            true, false, false, false, false, false)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different assignment value -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, true, false, false, false, false)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different restaurant value -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            false, false, false, false, true, false)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            true, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different get value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, true, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different assignment value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, false, true, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different restaurant value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            false, false, false, false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 2,
      "Vanessa1098": 23,
      "-": 49,
      "ElysiaTanZY": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUISINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ESTHOURS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM_DAYS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"05-31\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"08-25\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Likes skiing.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DELETE_TAG_DESC \u003d \" \" + PREFIX_DELETE_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"31-05\"; // wrong format for date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_TITLE_CS2103 \u003d \"CS2103 tP\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_DEADLINE_CS2103 \u003d \"2020-12-11 14:00\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_WORKLOAD_CS2103 \u003d \"11.5\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_STATUS_CS2103 \u003d \"Completed\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_TITLE_CS3243 \u003d \"CS3243 Tut\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_DEADLINE_CS3243 \u003d \"2020-11-11 14:00\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_WORKLOAD_CS3243 \u003d \"5\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_STATUS_CS3243 \u003d \"Uncompleted\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_TITLE \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_DEADLINE \u003d \"2020-16-05 13:00\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_WORKLOAD \u003d \"ghjgj\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_STATUS \u003d \"done\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String TITLE_DESC_CS2103 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS2103;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEADLINE_DESC_CS2103 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_CS2103;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String WORKLOAD_DESC_CS2103 \u003d \" \" + PREFIX_ESTHOURS + VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String STATUS_DESC_CS2103 \u003d \" \" + PREFIX_STATUS + VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String TITLE_DESC_CS3243 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS3243;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEADLINE_DESC_CS3243 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_CS3243;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + INVALID_TITLE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + INVALID_DEADLINE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_WORKLOAD_DESC \u003d \" \" + PREFIX_ESTHOURS + INVALID_WORKLOAD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + INVALID_STATUS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_NAME_AMEENS \u003d \"Ameens\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_LOCATION_AMEENS \u003d \"Clementi\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_HOURS_AMEENS \u003d \"0900:2300\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_PRICE_AMEENS \u003d \"$\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_CUISINE_AMEENS \u003d \"Indian\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_VISITED_AMEENS \u003d \"Yes\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_NAME_AMEENS \u003d \" \" + PREFIX_RESTAURANT + VALID_NAME_AMEENS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_LOCATION_AMEENS \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_AMEENS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_HOURS_AMEENS \u003d \" \" + PREFIX_OPERATING_HOURS + VALID_HOURS_AMEENS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_PRICE_AMEENS \u003d \" \" + PREFIX_PRICE + VALID_PRICE_AMEENS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_CUISINE_AMEENS \u003d \" \" + PREFIX_CUISINE + VALID_CUISINE_AMEENS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_VISITED_AMEENS \u003d \" \" + PREFIX_VISITED + VALID_VISITED_AMEENS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String VALID_NUM_DAYS \u003d \"5\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String INVALID_NUM_DAYS \u003d \"0\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_INVALID_NUM_DAYS \u003d \" \" + PREFIX_NUM_DAYS + INVALID_NUM_DAYS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DESC_VALID_NUM_DAYS \u003d \" \" + PREFIX_NUM_DAYS + VALID_NUM_DAYS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final EditAssignmentDescriptor DESC_CS2103;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final EditAssignmentDescriptor DESC_CS3243;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_AMY).withTagsToAdd(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTagsToAdd(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DESC_CS2103 \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(VALID_DEADLINE_CS2103).withStatus(VALID_STATUS_CS2103)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DESC_CS3243 \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS3243)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(VALID_DEADLINE_CS3243).withStatus(VALID_STATUS_CS3243)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS3243).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 5,
      "-": 122,
      "ElysiaTanZY": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAssignmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalSchoolworkTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DeleteAssignmentCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new RestaurantBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        getTypicalSchoolworkTracker(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new EventSchedule(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment assignmentToDelete \u003d model.getFilteredAssignmentList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteAssignmentCommand deleteCommand \u003d new DeleteAssignmentCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(DeleteAssignmentCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .MESSAGE_DELETE_ASSIGNMENT_SUCCESS, assignmentToDelete), false, false, false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            true, false, false, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            getTypicalSchoolworkTracker(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteAssignmentCommand deleteCommand \u003d new DeleteAssignmentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteAssignmentCommand deleteFirstCommand \u003d new DeleteAssignmentCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteAssignmentCommand deleteSecondCommand \u003d new DeleteAssignmentCommand(SECOND_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteAssignmentCommand commandWithSameValues \u003d new DeleteAssignmentCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(SECOND_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand commandWithSameValues \u003d new DeleteCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(FIRST_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 4,
      "-": 93,
      "ElysiaTanZY": 21,
      "hhjoel": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAssignmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3243;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_CS3243;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalSchoolworkTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new RestaurantBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        getTypicalSchoolworkTracker(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new EventSchedule(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withTitle(VALID_TITLE_CS2103).withWorkload(VALID_WORKLOAD_CS2103)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(VALID_DEADLINE_CS3243).withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS2103).withDeadline(VALID_DEADLINE_CS3243).withStatus(VALID_STATUS_CS2103)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand editCommand \u003d new EditAssignmentCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(EditAssignmentCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment), false, false, false,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            true, false, false, false, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(model.getSchoolworkTracker()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withTitle(VALID_TITLE_CS2103)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand editCommand \u003d new EditAssignmentCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(EditAssignmentCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment), false, false, false,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            true, false, false, false, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(model.getSchoolworkTracker()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_duplicateAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(firstAssignment).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand editCommand \u003d new EditAssignmentCommand(SECOND_INDEX, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandFailure(editCommand, model, EditAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void execute_invalidAssignmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand editCommand \u003d new EditAssignmentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final EditAssignmentCommand standardCommand \u003d new EditAssignmentCommand(FIRST_INDEX, DESC_CS2103);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor copyDescriptor \u003d new EditAssignmentDescriptor(DESC_CS2103);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand commandWithSameValues \u003d new EditAssignmentCommand(FIRST_INDEX, copyDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAssignmentCommand(SECOND_INDEX, DESC_CS2103)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAssignmentCommand(FIRST_INDEX, DESC_CS3243)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAssignmentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3243;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_CS3243;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS3243;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS3243;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS3243;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptorWithSameValues \u003d new EditAssignmentDescriptor(DESC_CS2103);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(DESC_CS2103.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(DESC_CS2103.equals(DESC_CS2103));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(DESC_CS3243));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor editedCs2103 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new EditAssignmentDescriptorBuilder(DESC_CS2103).withTitle(VALID_TITLE_CS3243).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(editedCs2103));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedCs2103 \u003d new EditAssignmentDescriptorBuilder(DESC_CS2103).withDeadline(VALID_DEADLINE_CS3243).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(editedCs2103));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different workload -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedCs2103 \u003d new EditAssignmentDescriptorBuilder(DESC_CS2103).withWorkload(VALID_WORKLOAD_CS3243).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(editedCs2103));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedCs2103 \u003d new EditAssignmentDescriptorBuilder(DESC_CS2103).withStatus(VALID_STATUS_CS3243).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_CS2103.equals(editedCs2103));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new SchoolworkTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTagsToAdd(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.setPerson(editedPerson, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(expectedModel, FIRST_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(personInFilteredList, editedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(SECOND_INDEX, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonsList().get(SECOND_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(FIRST_INDEX, DESC_AMY);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(FIRST_INDEX, copyDescriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(SECOND_INDEX, DESC_AMY)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(FIRST_INDEX, DESC_BOB)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 5,
      "Vanessa1098": 5,
      "-": 142,
      "ElysiaTanZY": 30,
      "hhjoel": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.person.PersonExistPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "class EditInfoCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_editInfoUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withEditRemark(0, REMARK_STUB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(FIRST_INDEX,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                1, new Remark(REMARK_STUB));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(EditInfoCommand.MESSAGE_EDIT_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(editInfoCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased()))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                .withEditRemark(0, REMARK_STUB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(FIRST_INDEX,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                1, new Remark(REMARK_STUB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(EditInfoCommand.MESSAGE_EDIT_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                false, false, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new RestaurantBook(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                        new SchoolworkTracker(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                        new EventSchedule(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        showPersonAtIndex(expectedModel, FIRST_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        PersonExistPredicate personExistPredicate \u003d new PersonExistPredicate(editedPerson, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel.updateFilteredPersonListResult(personExistPredicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertCommandSuccess(editInfoCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(outOfBoundIndex, 1, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(editInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index outOfBoundIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonsList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        EditInfoCommand editInfoCommand \u003d new EditInfoCommand(outOfBoundIndex, 1, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandFailure(editInfoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        final EditInfoCommand standardCommand \u003d new EditInfoCommand(FIRST_INDEX, 1,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditInfoCommand commandWithSameValues \u003d new EditInfoCommand(FIRST_INDEX, 1,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInfoCommand(SECOND_INDEX, 1,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInfoCommand(FIRST_INDEX, 1,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 4,
      "Vanessa1098": 100,
      "ElysiaTanZY": 21,
      "hhjoel": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different birthday -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTagsToAdd(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 56,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, true, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new RestaurantBook(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new SchoolworkTracker(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "            new EventSchedule(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // All commented out tests need to be re-written (TBD by sarah)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 13,
      "-": 70,
      "ElysiaTanZY": 3,
      "hhjoel": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_helpChooseCommand_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        int index \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.LIST_OF_COMMANDS.get(index - 1) + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"Type \\\"help\\\" to return to the list of commands.\", true, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                false, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(new HelpCommand(index), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void execute_helpList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.MESSAGE, true, false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            false, false, false, false, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertCommandSuccess(new HelpCommand(-1), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 11,
      "-": 16,
      "ElysiaTanZY": 1,
      "hhjoel": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.EventSchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new RestaurantBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new SchoolworkTracker(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new EventSchedule(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        showPersonAtIndex(model, FIRST_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 35,
      "ElysiaTanZY": 5,
      "hhjoel": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.ReadOnlyEventSchedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlySchoolworkTracker getSchoolworkTracker() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonListResult() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void updateFilteredPersonListResult(Predicate\u003cPerson\u003e predicate, boolean isGet) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventsList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void addAssignment(Assignment toAdd) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public boolean hasAssignment(Assignment toAdd) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void sortAssignment(Comparator\u003cAssignment\u003e comparator) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment(Assignment assignmentToUpdate, Assignment updatedAssignment) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void deleteAssignment(Assignment assignmentToDelete) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasAssignmentDueOnSameDate(Event event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setEventSchedule(ReadOnlyEventSchedule eventSchedule) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ReadOnlyEventSchedule getEventSchedule() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void addEvent(Event toAdd) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void setEvent(Event eventToUpdate, Event updatedEvent) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public void deleteEvent(Event toDelete) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public boolean hasEvent(Event toAdd) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public boolean hasClashingEvent(Event toAdd) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void sortEvent(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBdayListResult() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void createSchedule(int numDays) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setDay(int index, Day toSet) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public ObservableList\u003cDay\u003e getSchedule() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int undoStackSize() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int redoStackSize() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 20,
      "Vanessa1098": 37,
      "ElysiaTanZY": 202,
      "hhjoel": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAssignmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORKLOAD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORKLOAD_DESC_CS2103;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AddAssignmentCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private AddAssignmentCommandParser parser \u003d new AddAssignmentCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(CS2103_TP).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_CS2103 + DEADLINE_DESC_CS2103"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + WORKLOAD_DESC_CS2103, new AddAssignmentCommand(expectedAssignment));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_CS2103 + DEADLINE_DESC_CS2103 + WORKLOAD_DESC_CS2103,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103 + VALID_DEADLINE_CS2103 + WORKLOAD_DESC_CS2103,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // missing workload prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103 + DEADLINE_DESC_CS2103 + VALID_WORKLOAD_CS2103,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_CS2103 + VALID_DEADLINE_CS2103 + VALID_WORKLOAD_CS2103,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DEADLINE_DESC_CS2103 + WORKLOAD_DESC_CS2103,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103 + INVALID_DEADLINE_DESC + WORKLOAD_DESC_CS2103,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid workload"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103 + DEADLINE_DESC_CS2103 + INVALID_WORKLOAD_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //+ ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // multiple birthdays - last birthday accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_tagMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + BIRTHDAY_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_emailMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withEmail(\"\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_addressMissing_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withAddress(\"\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_birthdayMissing_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no birthday"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withBirthday(\"\").build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + INVALID_BIRTHDAY_DESC + VALID_TAG_FRIEND, Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 12,
      "-": 102,
      "ElysiaTanZY": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddInfoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class AddInfoCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private AddInfoCommandParser parser \u003d new AddInfoCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AddInfoCommand expectedCommand \u003d new AddInfoCommand(FIRST_INDEX, remarks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, AddInfoCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, AddInfoCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 39,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.AddInfoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + FIRST_INDEX.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(new DeleteCommand(FIRST_INDEX), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + FIRST_INDEX.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(new EditCommand(FIRST_INDEX, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    // needs to be re-written (tbd by sarah)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new Remark(\"Some remark.\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        AddInfoCommand command \u003d (AddInfoCommand) parser.parseCommand(AddInfoCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                + FIRST_INDEX.getOneBased() + \" \" + PREFIX_REMARK + remarks.get(0).value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(new AddInfoCommand(FIRST_INDEX, remarks), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 5,
      "Vanessa1098": 13,
      "-": 89,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteAssignmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DeleteAssignmentCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private DeleteAssignmentCommandParser parser \u003d new DeleteAssignmentCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteAssignmentCommand(FIRST_INDEX));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            DeleteAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(FIRST_INDEX));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ElysiaTanZY": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditAssignmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_CS3243;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORKLOAD_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2103;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS3243;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_CS2103;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_CS3243;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS3243;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORKLOAD_DESC_CS2103;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.THIRD_INDEX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAssignmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private EditAssignmentCommandParser parser \u003d new EditAssignmentCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\", EditAssignmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_CS2103, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_CS2103, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORKLOAD_DESC, Workload.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid title followed by valid deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + DEADLINE_DESC_CS2103, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid title followed by invalid title. The test case for invalid title followed by valid title"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + TITLE_DESC_CS2103 + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_WORKLOAD_DESC + VALID_DEADLINE_CS2103,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS2103 + WORKLOAD_DESC_CS2103 + STATUS_DESC_CS2103"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + DEADLINE_DESC_CS2103;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(VALID_DEADLINE_CS2103).withStatus(VALID_STATUS_CS2103)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_CS2103 + STATUS_DESC_CS2103;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_CS2103)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d THIRD_INDEX;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS2103;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS2103).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_CS2103;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_CS2103).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // workload"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WORKLOAD_DESC_CS2103;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // status"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STATUS_DESC_CS2103;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_CS2103 + DEADLINE_DESC_CS2103 + TITLE_DESC_CS3243"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + DEADLINE_DESC_CS3243;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withTitle(VALID_TITLE_CS3243)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(VALID_DEADLINE_CS3243).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_CS3243;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_CS3243).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditAssignmentCommand expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_CS2103 + INVALID_TITLE_DESC + STATUS_DESC_CS2103"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + TITLE_DESC_CS2103;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_CS2103)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withStatus(VALID_STATUS_CS2103).withTitle(VALID_TITLE_CS2103).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditAssignmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELETE_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.THIRD_INDEX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, \"1 u/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_CONSTRAINTS); // invalid birthday"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // while parsing {@code PREFIX_DELETE_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_DELETE_TAG + \" \" + DELETE_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid tags with valid tags"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // parsing the prefix of compulsory fields alone"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_PHONE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d SECOND_INDEX;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withTagsToAdd(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d THIRD_INDEX;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // tag to be added"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTagsToAdd(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // tag to be deleted"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + DELETE_TAG_DESC;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTagsToDelete(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // just delete tag prefix"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSetTagsToEmpty().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withTagsToAdd(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 2,
      "-": 182,
      "ElysiaTanZY": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditInfoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.commands.EditInfoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class EditInfoCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private EditInfoCommandParser parser \u003d new EditInfoCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final int lineNum \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Index targetIndex \u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LINE_NUMBER"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + lineNum + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        EditInfoCommand expectedCommand \u003d new EditInfoCommand(FIRST_INDEX, 1, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LINE_NUMBER + lineNum + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedCommand \u003d new EditInfoCommand(FIRST_INDEX, 1, new Remark(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditInfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, EditInfoCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertParseFailure(parser, EditInfoCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                + PREFIX_LINE_NUMBER + lineNum + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 44,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    To be re-written by Sarah"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"  \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"31-05\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d \"05-31\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String VALID_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(FIRST_INDEX, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(FIRST_INDEX, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_validValueWithoutWhitespace_returnsBirthday() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 187,
      "ElysiaTanZY": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_INVALID_NUM_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VALID_NUM_DAYS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUM_DAYS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseSuccess(parser, DESC_VALID_NUM_DAYS, new ScheduleCommand(Integer.valueOf(VALID_NUM_DAYS)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // missing num_days prefix"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, VALID_NUM_DAYS, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid num_days"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertParseFailure(parser, DESC_INVALID_NUM_DAYS, expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonsList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonsList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker assignmentSchedule \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        EventSchedule eventSchedule \u003d new EventSchedule();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, restaurantBook, assignmentSchedule, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, restaurantBook,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentSchedule, eventSchedule, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, restaurantBook,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentSchedule, eventSchedule, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, restaurantBook,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentSchedule, eventSchedule, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, restaurantBook,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentSchedule, eventSchedule, differentUserPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 5,
      "-": 127,
      "ElysiaTanZY": 6,
      "hhjoel": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RestaurantBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.TypicalRestaurants.AMEENS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.TypicalRestaurants.getTypicalRestaurantBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.model.restaurant.exceptions.DuplicateRestaurantException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.testutil.RestaurantBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantBookTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private final RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(Collections.emptyList(), restaurantBook.getRestaurantsList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e restaurantBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void resetData_withValidReadOnlyRestaurantBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBook newData \u003d getTypicalRestaurantBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(newData, restaurantBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void resetData_withDuplicateRestaurants_throwsDuplicateRestaurantException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // Two restaurants with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant editedRestaurant \u003d new RestaurantBuilder(AMEENS).withPrice(\"$$\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        List\u003cRestaurant\u003e newRestaurants \u003d Arrays.asList(AMEENS, editedRestaurant);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBookStub newData \u003d new RestaurantBookStub(newRestaurants);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(DuplicateRestaurantException.class, () -\u003e restaurantBook.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void hasRestaurant_nullRestaurant_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e restaurantBook.hasRestaurant(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void hasRestaurant_restaurantNotInRestaurantBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(restaurantBook.hasRestaurant(AMEENS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void hasRestaurant_restaurantInRestaurantBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.addRestaurant(AMEENS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(restaurantBook.hasRestaurant(AMEENS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void hasRestaurant_restaurantWithSameIdentityFieldsInRestaurantBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        restaurantBook.addRestaurant(AMEENS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant editedRestaurant \u003d new RestaurantBuilder(AMEENS).withPrice(\"$$\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(restaurantBook.hasRestaurant(editedRestaurant));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void getRestaurantList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e restaurantBook.getRestaurantsList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * A stub ReadOnlyRestaurantBook whose restaurants list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static class RestaurantBookStub implements ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        private final ObservableList\u003cRestaurant\u003e restaurants \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        RestaurantBookStub(Collection\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            this.restaurants.setAll(restaurants);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        public ObservableList\u003cRestaurant\u003e getRestaurantsList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return restaurants;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SchoolworkTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2106_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalSchoolworkTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class SchoolworkTrackerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final SchoolworkTracker schoolworkTracker \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(Collections.emptyList(), schoolworkTracker.getAssignmentsList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e schoolworkTracker.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetData_withValidReadOnlySchoolworkTracker_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker newData \u003d getTypicalSchoolworkTracker();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(newData, schoolworkTracker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void resetData_withDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Two assignments with the same title and deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedCs2103Tp \u003d new AssignmentBuilder(CS2103_TP).withWorkload(VALID_WORKLOAD_CS2103)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        List\u003cAssignment\u003e newAssignments \u003d Arrays.asList(CS2103_TP, editedCs2103Tp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTrackerStub newData \u003d new SchoolworkTrackerStub(newAssignments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e schoolworkTracker.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void hasAssignment_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e schoolworkTracker.hasAssignment(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void hasAssignment_assignmentNotInSchoolworkTracker_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(schoolworkTracker.hasAssignment(CS2103_TP));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void hasAssignment_assignmentInSchoolworkTracker_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.addAssignment(CS2103_TP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(schoolworkTracker.hasAssignment(CS2103_TP));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void hasAssignment_assignmentWithSameTitleAndDeadlineInSchoolworkTracker_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        schoolworkTracker.addAssignment(CS2106_ASSIGNMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedCs2106Assignment \u003d new AssignmentBuilder(CS2106_ASSIGNMENT).withWorkload(VALID_WORKLOAD_CS2103)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(schoolworkTracker.hasAssignment(editedCs2106Assignment));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void getAssignmentsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e schoolworkTracker.getAssignmentsList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * A stub ReadOnlySchoolworkTracker whose assignment list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static class SchoolworkTrackerStub implements ReadOnlySchoolworkTracker {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        private final ObservableList\u003cAssignment\u003e assignments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTrackerStub(Collection\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            this.assignments.setAll(assignments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentsList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            return assignments;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS3243_TUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AssignmentListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private final AssignmentList assignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void contains_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(assignmentList.contains(CS2103_TP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(assignmentList.contains(CS2103_TP));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void contains_assignmentWithSameTitleAndDeadline_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(CS2103_TP).withStatus(VALID_STATUS_CS2103)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withWorkload(VALID_WORKLOAD_CS2103).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(assignmentList.contains(editedAssignment));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void add_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void add_duplicateAssignment_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e assignmentList.add(CS2103_TP));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_nullTargetAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.setAssignment(null, CS2103_TP));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_nullEditedAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.setAssignment(CS2103_TP, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_targetAssignmentNotInList_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e assignmentList.setAssignment(CS3243_TUT, CS3243_TUT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_editedAssignmentIsSameAssignment_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.setAssignment(CS2103_TP, CS2103_TP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedAssignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_editedAssignmentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(CS2103_TP).withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.setAssignment(CS2103_TP, editedAssignment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedAssignmentList.add(editedAssignment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_editedAssignmentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.setAssignment(CS2103_TP, CS3243_TUT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedAssignmentList.add(CS3243_TUT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignment_editedAssignmentHasNonUniqueIdentity_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS3243_TUT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e assignmentList.setAssignment(CS2103_TP, CS3243_TUT));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void remove_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e assignmentList.remove(CS2103_TP));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void remove_existingAssignment_removesAssignment() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.remove(CS2103_TP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignments_nullAssignmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.setAssignments((AssignmentList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignments_uniqueAssignmentList_replacesOwnListWithProvidedAssignmentList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedAssignmentList.add(CS3243_TUT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.setAssignments(expectedAssignmentList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e assignmentList.setAssignments((List\u003cAssignment\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.add(CS2103_TP);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        List\u003cAssignment\u003e providedAssignmentList \u003d Collections.singletonList(CS3243_TUT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assignmentList.setAssignments(providedAssignmentList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        AssignmentList expectedAssignmentList \u003d new AssignmentList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        expectedAssignmentList.add(CS3243_TUT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(expectedAssignmentList, assignmentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setAssignments_listWithDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        List\u003cAssignment\u003e listWithDuplicateAssignments \u003d Arrays.asList(CS2103_TP, CS2103_TP);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                assignmentList.setAssignments(listWithDuplicateAssignments));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            -\u003e assignmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORKLOAD_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS3243_TUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isSameAssignment() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(CS2103_TP.isSameAssignment(CS2103_TP));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS2103_TP.isSameAssignment(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different title  -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(CS2103_TP).withTitle(\"CS3243 Proj\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS2103_TP.isSameAssignment(editedAssignment));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAssignment \u003d new AssignmentBuilder(CS2103_TP).withDeadline(\"2020-03-31 23:59\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS2103_TP.isSameAssignment(editedAssignment));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same title, same deadline, different status and workload -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAssignment \u003d new AssignmentBuilder(CS2103_TP).withWorkload(VALID_WORKLOAD_CS2103)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .withStatus(VALID_STATUS_CS2103).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(CS2103_TP.isSameAssignment(editedAssignment));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Assignment cs2103Copy \u003d new AssignmentBuilder(CS2103_TP).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(CS2103_TP.equals(cs2103Copy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null -\u003e Returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS2103_TP.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different type -\u003e Returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS2103_TP.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different assignment -\u003e Returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(CS3243_TUT.equals(CS2103_TP));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidDate \u003d \"2020-31-05 23:59\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidTime \u003d \"2020-05-31 25:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidTime));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2020-03-31 24:59\")); // Time does not exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2020-13-05 23:59\")); // Date does not exist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2020-31-03 23:59\")); // Wrong date format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2020-03-31 23-59\")); // Wrong time format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid date and time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"2020-03-31 23:59\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void hasDeadlinePassed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Deadline has not passed yet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.now(ZoneId.of(\"Singapore\")).plusHours(2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Deadline.hasDeadlinePassed(dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Deadline is already over"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        dateTime \u003d LocalDateTime.now(ZoneId.of(\"Singapore\")).minusHours(5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Deadline.hasDeadlinePassed(dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/StatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class StatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Status(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_invalidStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidStatus \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Status(invalidStatus));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Status.isValidStatus(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Status.isValidStatus(\"done\")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"Completed\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"comPleTed\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"COMPLETED\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"Uncompleted\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"unComplEtEd\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Status.isValidStatus(\"UNCOMPLETED\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidTitle \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103 tP\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Title.isValidTitle(\"-\")); // one character"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103 team project which has to be done ASAP!!!\")); // long title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/WorkloadTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class WorkloadTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Workload(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidWorkload() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null workload"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Workload.isValidWorkload(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid workload"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Workload.isValidWorkload(\" \")); // spaces only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Workload.isValidWorkload(\" efwefewf \")); // contains letters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Workload.isValidWorkload(\"-1\")); // negative workload"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Workload.isValidWorkload(\"34.58\")); // Should be rounded off to the nearest half an hour"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Workload.isValidWorkload(\"45.6\")); // Should be rounded off to the nearest half an hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid workload"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Workload.isValidWorkload(\"45.5\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Workload.isValidWorkload(\"40\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Workload.isValidWorkload(\"100\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String invalidBirthday \u003d \"31-05\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(Birthday.isValidDate(\"31-05\")); // Wrong date format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(Birthday.isValidDate(\"05-31\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345678\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // different birthday -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "ElysiaTanZY": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"91122334\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void withinRange() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MM-dd\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now(ZoneId.of(\"Singapore\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        LocalDate fiveDaysLater \u003d LocalDate.now(ZoneId.of(\"Singapore\")).plusDays(5);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Birthday is today"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String bDay \u003d LocalDate.now(ZoneId.of(\"Singapore\")).format(format);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(uniquePersonList.withinRange(bDay, currDate, fiveDaysLater));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Birthday is four days later"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bDay \u003d LocalDate.now(ZoneId.of(\"Singapore\")).plusDays(4).format(format);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(uniquePersonList.withinRange(bDay, currDate, fiveDaysLater));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Birthday is five days later"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        bDay \u003d LocalDate.now(ZoneId.of(\"Singapore\")).plusDays(5).format(format);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(uniquePersonList.withinRange(bDay, currDate, fiveDaysLater));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setBdayList_contactHasNoBirthday_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Contact has no birthday"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person person \u003d new PersonBuilder(ALICE).withBirthday(\"\").build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.add(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.setBdayList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(uniquePersonList.getBdayList().isEmpty());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void setBdayList_contactHasBirthday_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Contact\u0027s birthday not in the next 5 days"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Person person \u003d new PersonBuilder(ALICE).withBirthday(LocalDate.now(ZoneId.of(\"Singapore\")).plusDays(5)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"MM-dd\"))).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.add(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.setBdayList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertTrue(uniquePersonList.getBdayList().isEmpty());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Contact\u0027s birthday in the next 5 days"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        person \u003d new PersonBuilder(BOB).withBirthday(LocalDate.now(ZoneId.of(\"Singapore\"))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"MM-dd\"))).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.add(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        uniquePersonList.setBdayList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(uniquePersonList.getBdayList(), Arrays.asList(person));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 170,
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/BadFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class BadFoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note note \u003d new Note(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(note));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note noteCopy \u003d new Note(note.note);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(noteCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note differentNote \u003d new Note(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(differentNote));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/CuisineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class CuisineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cuisine(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidCuisine() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null cuisine"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cuisine.isValidCuisine(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid cuisine"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Cuisine.isValidCuisine(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Cuisine.isValidCuisine(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Cuisine.isValidCuisine(\" \")); // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid cuisine"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Cuisine.isValidCuisine(\"sdaZ fs C 3 \")); // long cuisines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/GoodFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class GoodFoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note note \u003d new Note(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(note));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note noteCopy \u003d new Note(note.note);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(noteCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note differentNote \u003d new Note(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(differentNote));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/HoursTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class HoursTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hours(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidHours() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null hours"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Hours.isValidHours(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid hours"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"sdaZ fs C 3 \")); // long hourss"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"$$\")); // long hourss"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"0000:2400\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"0000:24003\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Hours.isValidHours(\"0523:2360\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid hours"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Hours.isValidHours(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Hours.isValidHours(\"1500:1400\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Hours.isValidHours(\"0000:2359\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String invalidLoc \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLoc));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Location.isValidLocation(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Location.isValidLocation(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Location.isValidLocation(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Location.isValidLocation(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Location.isValidLocation(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Location.isValidLocation(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Location.isValidLocation(\"sdaZ fs C 3 \")); // long locations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.restaurant.Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.restaurant.Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.restaurant.Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(seedu.address.model.restaurant.Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(seedu.address.model.restaurant.Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(seedu.address.model.restaurant.Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(seedu.address.model.restaurant.Name.isValidName(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(seedu.address.model.restaurant.Name.isValidName(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(seedu.address.model.restaurant.Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(seedu.address.model.restaurant.Name.isValidName(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(seedu.address.model.restaurant.Name.isValidName(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Name.isValidName(\"sdaZ fs C 3 \")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/PriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"sdaZ fs C 3 \")); // long prices"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$$$$$$$$$$$$$$$$$$\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid price"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$$\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$$$\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/RecommendedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RecommendedFoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note note \u003d new Note(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(note));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note noteCopy \u003d new Note(note.note);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(note.equals(noteCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Note differentNote \u003d new Note(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(note.equals(differentNote));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/RestaurantTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.TypicalRestaurants.AMEENS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.TypicalRestaurants.KFC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import seedu.address.testutil.RestaurantBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class RestaurantTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isSameRestaurant() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(AMEENS.isSameRestaurant(AMEENS));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.isSameRestaurant(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different name and location -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant editedAmeens \u003d new RestaurantBuilder(AMEENS).withLocation(\"Rubbish\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.isSameRestaurant(editedAmeens));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withName(\"AAA\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.isSameRestaurant(editedAmeens));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same name, same location, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withName(\"Ameens\").withLocation(\"Clementi\").withVisit(\"No\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(AMEENS.isSameRestaurant(editedAmeens));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant aliceCopy \u003d new RestaurantBuilder(AMEENS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(AMEENS.equals(aliceCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(AMEENS.equals(AMEENS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different restaurant -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(KFC));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Restaurant editedAmeens \u003d new RestaurantBuilder(AMEENS).withName(\"KFC\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withLocation(\"Bedok\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withName(\"Ameens2\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withPrice(\"$$$\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different cuisine -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withCuisine(\"Jap\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // different hours -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        editedAmeens \u003d new RestaurantBuilder(AMEENS).withHours(\"1234:2345\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(AMEENS.equals(editedAmeens));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/restaurant/VisitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package seedu.address.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class VisitTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Visit(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Visit(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void isValidVisit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // null visit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Visit.isValidVisit(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // invalid visit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"dasd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"afsa sdads\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"pfas3 33as\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"s sZSW sZ\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertFalse(Visit.isValidVisit(\"sdaZ fs C 3 \")); // long visits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // valid visit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Visit.isValidVisit(\"Yes\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertTrue(Visit.isValidVisit(\"No\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAssignment.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_TP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonAdaptedAssignmentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"2020-14-31 23:59\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_WORKLOAD \u003d \"0.6\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_TITLE \u003d CS2103_TP.getTitle().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_DEADLINE \u003d CS2103_TP.getDeadline().dateTime"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_WORKLOAD \u003d CS2103_TP.getWorkload().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_STATUS \u003d CS2103_TP.getStatus().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_validAssignmentDetails_returnsAssignment() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(CS2103_TP);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(CS2103_TP, assignment.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(INVALID_TITLE, VALID_DEADLINE, VALID_WORKLOAD, VALID_STATUS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(null, VALID_DEADLINE, VALID_WORKLOAD, VALID_STATUS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(VALID_TITLE, INVALID_DEADLINE, VALID_WORKLOAD, VALID_STATUS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(VALID_TITLE, null, VALID_WORKLOAD, VALID_STATUS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_invalidWorkload_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(VALID_TITLE, VALID_DEADLINE, INVALID_WORKLOAD, VALID_STATUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d Workload.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_nullWorkload_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                new JsonAdaptedAssignment(VALID_TITLE, VALID_DEADLINE, null, VALID_STATUS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Workload.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"31-05\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private static final String VALID_ORGANIZATION \u003d BENSON.getOrganization().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, remarks,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        INVALID_BIRTHDAY, VALID_ORGANIZATION, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        ArrayList\u003cJsonAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remarks.add(new JsonAdaptedRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, remarks,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                        VALID_BIRTHDAY, VALID_ORGANIZATION, invalidTags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 1,
      "Vanessa1098": 42,
      "-": 100,
      "ElysiaTanZY": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSchoolworkTrackerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103_QUIZ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.IS1103_QUIZ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalSchoolworkTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSchoolworkTrackerStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        \"JsonSchoolworkTrackerStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void readSchoolworkTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readSchoolworkTracker(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private java.util.Optional\u003cReadOnlySchoolworkTracker\u003e readSchoolworkTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new JsonSchoolworkTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .readSchoolworkTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertFalse(readSchoolworkTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchoolworkTracker(\"notJsonFormatSchoolworkTracker.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void readSchoolworkTracker_invalidAssignmentScheduler_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchoolworkTracker(\"invalidSchoolworkTracker.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void readSchoolworkTracker_invalidAndValidSchoolworkTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            readSchoolworkTracker(\"invalidAndValidSchoolworkTracker.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void readAndSaveSchoolworkTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempSchoolworkTracker.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker original \u003d getTypicalSchoolworkTracker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchoolworkTrackerStorage jsonAssignmentScoolworkTrackerStorage \u003d new JsonSchoolworkTrackerStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        jsonAssignmentScoolworkTrackerStorage.saveSchoolworkTracker(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlySchoolworkTracker readBack \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            jsonAssignmentScoolworkTrackerStorage.readSchoolworkTracker(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(original, new SchoolworkTracker(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        original.addAssignment(IS1103_QUIZ);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        jsonAssignmentScoolworkTrackerStorage.saveSchoolworkTracker(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        readBack \u003d jsonAssignmentScoolworkTrackerStorage.readSchoolworkTracker(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(original, new SchoolworkTracker(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        original.addAssignment(CS2103_QUIZ);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        jsonAssignmentScoolworkTrackerStorage.saveSchoolworkTracker(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        readBack \u003d jsonAssignmentScoolworkTrackerStorage.readSchoolworkTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(original, new SchoolworkTracker(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker_nullSchoolworkTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchoolworkTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Saves {@code schoolwork Tracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private void saveSchoolworkTracker(ReadOnlySchoolworkTracker schoolworkTracker, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            new JsonSchoolworkTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                    .saveSchoolworkTracker(schoolworkTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void saveSchoolworkTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchoolworkTracker(new SchoolworkTracker(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        //dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 38,
      "ElysiaTanZY": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableSchoolworkTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.testutil.TypicalAssignments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class JsonSerializableSchoolworkTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableSchoolworkTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Path TYPICAL_ASSIGNMENTS_FILE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalSchoolworkTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Path INVALID_ASSIGNMENT_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidSchoolworkTracker.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private static final Path DUPLICATE_ASSIGNMENT_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateSchoolworkTracker.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_typicalAssignmentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableSchoolworkTracker dataFromFile \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_ASSIGNMENTS_FILE, JsonSerializableSchoolworkTracker.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker schoolworkTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker typicalAssignmentsList \u003d TypicalAssignments.getTypicalSchoolworkTracker();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(schoolworkTrackerFromFile, typicalAssignmentsList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_invalidAssignmentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableSchoolworkTracker dataFromFile \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_ASSIGNMENT_FILE, JsonSerializableSchoolworkTracker.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void toModelType_duplicateAssignments_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSerializableSchoolworkTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ASSIGNMENT_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                JsonSerializableSchoolworkTracker.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSchoolworkTracker.MESSAGE_DUPLICATE_ASSIGNMENT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalSchoolworkTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.ReadOnlySchoolworkTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        JsonRestaurantBookStorage restaurantBookStorage \u003d new JsonRestaurantBookStorage(getTempFilePath(\"rb\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        JsonEventScheduleStorage eventScheduleStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                new JsonEventScheduleStorage(getTempFilePath(\"eventSchedule\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        JsonSchoolworkTrackerStorage schedulerStorage \u003d new JsonSchoolworkTrackerStorage(getTempFilePath(\"schedule\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                restaurantBookStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                schedulerStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "                eventScheduleStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void getSchoolworkTrackerFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertNotNull(storageManager.getSchoolworkTrackerFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public void assignmentScheduleReadSave() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "         * {@link JsonSchoolworkTrackerStorage} class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonSchoolworkTrackerStorageTest} class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker original \u003d getTypicalSchoolworkTracker();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        storageManager.saveSchoolworkTracker(original);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        ReadOnlySchoolworkTracker retrieved \u003d storageManager.readSchoolworkTracker().get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        assertEquals(original, new SchoolworkTracker(retrieved));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 3,
      "-": 67,
      "ElysiaTanZY": 24,
      "hhjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A utility class to help with building {@code Assignment} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class AssignmentBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS2103 tP\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"2020-11-17 23:59\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_WORKLOAD \u003d \"100\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"Uncompleted\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Workload estHours;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Initialises AssignmentBuilder with the data of {@Assignment toCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder(Assignment toCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d toCopy.getTitle();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d toCopy.getDeadline();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d toCopy.getWorkload();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d toCopy.getStatus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d new Workload(DEFAULT_WORKLOAD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d new Status(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@Title} of the {@Assignment} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@Deadline} of the {@Assignment} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@Workload} of the {@Assignment} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder withWorkload(String estHours) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.estHours \u003d new Workload(estHours);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@Status} of the {@Assignment} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public AssignmentBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.status \u003d new Status(status);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public Assignment build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new Assignment(title, deadline, estHours, status);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAssignmentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.logic.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Workload;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A utility class to help with building EditAssignmentDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class EditAssignmentDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private EditAssignmentDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder(EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.descriptor \u003d new EditAssignmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns an {@code EditAssignmentDescriptor} with fields containing {@code assignment}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder(Assignment assignment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTitle(assignment.getTitle());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setWorkload(assignment.getWorkload());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setDeadline(assignment.getDeadline());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setStatus(assignment.getStatus());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Title} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Workload} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder withWorkload(String workload) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setWorkload(new Workload(workload));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Status} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setStatus(new Status(status));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditAssignmentDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setBirthday(person.getBirthday());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setOrganization(person.getOrganization());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToBeAdded(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToBeDeleted(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToEmpty(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditPersonDescriptorBuilder withTagsToAdd(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToBeAdded(tagSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditPersonDescriptorBuilder withTagsToDelete(String... tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToBeDeleted(tagSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets an empty hash set to the {@code EditPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditPersonDescriptorBuilder withSetTagsToEmpty() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setTagsToBeDeleted(new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 86,
      "ElysiaTanZY": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "import seedu.address.model.person.Organization;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"01-15\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public static final String DEFAULT_ORGANIZATION \u003d \"SOC Comp Club\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    private Organization organization;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.add(new Remark(DEFAULT_REMARK));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        organization \u003d new Organization(DEFAULT_ORGANIZATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        remark.addAll(personToCopy.getRemark());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        birthday \u003d personToCopy.getBirthday();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        organization \u003d personToCopy.getOrganization();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark.add(new Remark(remark));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public PersonBuilder withEditRemark(int line, String remark) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.remark.set(line, new Remark(remark));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     * Sets the {@code Organization} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    public PersonBuilder withOrganization(String organization) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        this.organization \u003d new Organization(organization);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nidorinas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nidorinas"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new Person(name, phone, email, address, remark, birthday, organization, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nidorinas": 13,
      "Vanessa1098": 26,
      "-": 92,
      "ElysiaTanZY": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANIZATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.logic.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + person.getBirthday().birthday + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                .append(birthday.birthday).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        descriptor.getOrganization().ifPresent(organization -\u003e sb.append(PREFIX_ORGANIZATION)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .append(organization.organization).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        if (descriptor.getTagsToBeDeleted().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 1,
      "-": 58,
      "ElysiaTanZY": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RestaurantBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Cuisine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Hours;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Visit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * A utility class to help with building {@code Restaurant} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class RestaurantBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Ameens\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Clementi\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_HOURS \u003d \"0900:2300\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_CUISINE \u003d \"Indian\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_VISIT \u003d \"Yes\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_RECOMMENDED \u003d \"Butter chicken\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_GOOD \u003d \"Cheese Fries\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final String DEFAULT_BAD \u003d \"Fried rice\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Hours hours;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Cuisine cuisine;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private Visit visit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cNote\u003e recommendedFood;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cNote\u003e goodFood;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private ArrayList\u003cNote\u003e badFood;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Initialises RestaurantBuilder with the data of {@Restaurant toCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder(Restaurant toCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.name \u003d toCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.location \u003d toCopy.getLocation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.hours \u003d toCopy.getHours();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.price \u003d toCopy.getPrice();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.cuisine \u003d toCopy.getCuisine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d toCopy.getVisit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood \u003d toCopy.getRecommendedFood();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood \u003d toCopy.getGoodFood();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood \u003d toCopy.getBadFood();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.hours \u003d new Hours(DEFAULT_HOURS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.cuisine \u003d new Cuisine(DEFAULT_CUISINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d new Visit(DEFAULT_VISIT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        recommendedFood.add(new Note(DEFAULT_RECOMMENDED));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        goodFood.add(new Note(DEFAULT_GOOD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        badFood.add(new Note(DEFAULT_BAD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Name} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Location} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Hours} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withHours(String hours) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.hours \u003d new Hours(hours);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Price} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Cuisine} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withCuisine(String cuisine) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.cuisine \u003d new Cuisine(cuisine);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Visit} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withVisit(String visit) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.visit \u003d new Visit(visit);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Notes} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withRecommended(String recommendedFood) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.recommendedFood.add(new Note(recommendedFood));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Notes} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withGood(String goodFood) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.goodFood.add(new Note(goodFood));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Sets the {@Notes} of the {@Restaurant} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public RestaurantBuilder withBad(String badFood) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        this.badFood.add(new Note(badFood));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Builds the restaurant"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * @return restaurant that is created"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public Restaurant build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new Restaurant(name, location, hours, price, cuisine, visit,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                recommendedFood, goodFood, badFood);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 147,
      "hhjoel": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAssignments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.SchoolworkTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " * A utility class containing a list of {@Assignment} objects to be used in tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "public class TypicalAssignments {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS3243_TUT \u003d new AssignmentBuilder().withTitle(\"CS3243 Tut\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-11-11 13:00\").withWorkload(\"4\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS2106_ASSIGNMENT \u003d new AssignmentBuilder().withTitle(\"CS2106 Assignment\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-10-26 14:00\").withWorkload(\"10\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS3244_TUT \u003d new AssignmentBuilder().withTitle(\"CS3244 Tut\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-08-27 12:00\").withWorkload(\"5\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS2103_TP \u003d new AssignmentBuilder().withTitle(\"CS2103 tP\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-12-11 14:00\").withWorkload(\"11.5\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS3243_PROJ \u003d new AssignmentBuilder().withTitle(\"CS3243 Project\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-09-03 23:59\").withWorkload(\"40\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS3244_PROJ \u003d new AssignmentBuilder().withTitle(\"CS3244 Project\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-10-11 23:59\").withWorkload(\"40\").withStatus(\"Completed\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    // Manually Added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment IS1103_QUIZ \u003d new AssignmentBuilder().withTitle(\"IS1103 Quiz\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-05-11 23:59\").withWorkload(\"40\").withStatus(\"Uncompleted\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Assignment CS2103_QUIZ \u003d new AssignmentBuilder().withTitle(\"CS2103 Quiz\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withDeadline(\"2020-05-18 23:59\").withWorkload(\"1\").withStatus(\"Uncompleted\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    private TypicalAssignments() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     * Returns a scheduler with all the typical assignments in loaded."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static SchoolworkTracker getTypicalSchoolworkTracker() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        SchoolworkTracker assignmentSchedule \u003d new SchoolworkTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        for (Assignment assignment : getTypicalAssignments()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            assignmentSchedule.addAssignment(assignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return assignmentSchedule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static List\u003cAssignment\u003e getTypicalAssignments() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS3243_TUT, CS2106_ASSIGNMENT, CS3244_TUT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "                CS2103_TP, CS3243_PROJ, CS3244_PROJ));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ElysiaTanZY": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Index FIRST_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Index SECOND_INDEX \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "    public static final Index THIRD_INDEX \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "ElysiaTanZY": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\").withBirthday(\"01-15\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBirthday(\"02-15\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"She likes pink.\").withBirthday(\"\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"Plays sport.\").withBirthday(\"\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822245\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"Likes cycling.\").withBirthday(\"\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824274\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"Does not eat seafood.\").withBirthday(\"\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824422\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withRemark(\"Can\u0027t drink milk.\").withBirthday(\"\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824243\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821312\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB).withRemark(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ElysiaTanZY"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 18,
      "-": 60,
      "ElysiaTanZY": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRestaurants.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "import seedu.address.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " * A utility class containing a list of {@Restaurant} objects to be used in tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "public class TypicalRestaurants {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant AMEENS \u003d new RestaurantBuilder().withName(\"Ameens\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Clementi\").withHours(\"0900:2300\").withPrice(\"$\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withCuisine(\"Indian\").withVisit(\"Yes\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant SWEE_CHOON \u003d new RestaurantBuilder().withName(\"Swee Choon\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Lavender\").withHours(\"1800:0600\").withPrice(\"$\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withCuisine(\"Dim Sum\").withVisit(\"Yes\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant HAI_DI_LAO \u003d new RestaurantBuilder().withName(\"Hai Di Lao\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Jurong East\").withHours(\"2230:0600\").withPrice(\"$$$\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withCuisine(\"Chinese steamboat\").withVisit(\"No\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant MCD \u003d new RestaurantBuilder().withName(\"Mcdonalds\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Tampines\").withHours(\"0000:0000\").withPrice(\"$\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withCuisine(\"Fast Food\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant TIAN_TIAN \u003d new RestaurantBuilder().withName(\"Tian Tian Chicken Rice\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Clementi\").withHours(\"1000:2000\").withPrice(\"$\").withCuisine(\"Chinese\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withVisit(\"Yes\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant KOH_GRILL \u003d new RestaurantBuilder().withName(\"Koh Grill\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withLocation(\"Orchard\").withHours(\"1130:2200\").withPrice(\"$$\").withCuisine(\"Japanese\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withVisit(\"No\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    //Manually added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static final Restaurant KFC \u003d new RestaurantBuilder().withName(\"KFC\").withLocation(\"Clementi\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            .withHours(\"0800:2230\").withPrice(\"$\").withCuisine(\"Fast Food\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            .withVisit(\"Yes\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    private TypicalRestaurants() {};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     * Returns a RestaurantBook with all the typical restaurants in loaded."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static RestaurantBook getTypicalRestaurantBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        RestaurantBook rb \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        for (Restaurant restaurant : getTypicalRestaurants()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "            rb.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    public static List\u003cRestaurant\u003e getTypicalRestaurants() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AMEENS, SWEE_CHOON, HAI_DI_LAO,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "                MCD, TIAN_TIAN, KOH_GRILL));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vanessa1098"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vanessa1098": 48,
      "hhjoel": 7
    }
  }
]
