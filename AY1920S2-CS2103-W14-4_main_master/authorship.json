[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d CoderLifeInsights"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/3dd835e750584121bf94b97532fc5763[link\u003d\"https://app.codacy.com/gh/AY1920S2-CS2103-W14-4/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S2-CS2103-W14-4/main\u0026utm_campaign\u003dBadge_Grade_Settings\"]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "https://app.netlify.com/sites/coderlifeinsights/deploys[image:https://api.netlify.com/api/v1/badges/b5a97d95-6703-47d5-a236-60572231fb30/deploy-status[![Netlify Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103-W14-4/main[image:https://travis-ci.org/AY1920S2-CS2103-W14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "https://ci.appveyor.com/project/harrychengly/main/branch/master[image:https://ci.appveyor.com/api/projects/status/jfbm08f7kf5r999b/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103-W14-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103-W14-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Hungry for data?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Looking for insights in your social life as a programmer?Look no further!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* CoderLifeInsights (CLI) is a desktop application that provides you insights and suggestions to your social life as a programmer using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Keep track of the social interactions you have with your friends and family."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* No dinner plans on a Friday night? Get suggestions on who to call for that Japanese restaurant you\u0027re craving."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Spice up your social life with CoderLifeInsights (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d Licence : https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "harrychengly": 13,
      "-": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    archiveName \u003d \u0027CoderLifeInsights.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u0027site-name\u0027: \u0027CoderLifeInsights\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W14-4/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 4,
      "l2ejected": 1,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Developed by the https://github.com/orgs/AY1920S2-CS2103-W14-4/teams/developers/members[CoderLifeInsights] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Cheng Lit Yaw"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::harrychengly.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "{empty}[https://github.com/harrychengly[github]] [\u003c\u003charrychengly#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Responsibilities: Scheduling and Tracking, Integration, UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Raivat Bhupesh Shah"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::raivatshah.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "{empty}[http://github.com/raivatshah[github]] [\u003c\u003craivatshah#, porfolio\u003e\u003e] [https://raivat.dev[homepage]] +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Responsibilities: Dev Ops, Group Commands, System Design"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Mah Cai Jun, Terence"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::terencemah.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "{empty}[http://github.com/terencemah[github]] +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Responsibilities: Documentation, Code Quality"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Ernest Lian Qi Quan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::l2ejected.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "{empty}[http://github.com/l2ejected[github]] [\u003c\u003cl2ejected#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Responsibilities: Deliverables and Deadlines, Testing, Documentation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "harrychengly": 12,
      "l2ejected": 2,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103-W14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** `lityaw_c [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** `raivat [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** `terence.mcj [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** `E0319092 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "harrychengly": 9,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d CoderLifeInsights - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "By: `CoderLifeInsights`      Since: `March 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "CoderLifeInsights is a desktop application that provides you insights and suggestions to your social life as"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "a programmer using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Managing social life as a programmer can be difficult since you spend most of the in front of the screen,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "probably coding. And thus, it is easy to lose track of people who you spend time with or need to spend time with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "CoderLifeInsights helps you track and gain insights on your social life off the screen."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "CoderLifeInsights is a Command Line Interface (CLI) application that also has a Graphical User Interface (GUI). Thus,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the users are expected to use CoderLifeInsights mainly through CLI, but the GUI is used to give the user a glimpse of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "their data, show insights and error messages whenever applicable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "We\u0027re delighted that you\u0027re interested in the development of CoderLifeInsights and reading this guide is a great first"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "step to get upto speed with the codebase and how it is organised. This guide also serves as reference for all current"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "developers when needed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the https://github.com/AY1920S2-CS2103-W14-4/main/tree/master/docs/diagrams[diagrams] folder."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`Main` has two classes called link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/Main.java[`Main`]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "and link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*API* : link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "The `ResultDisplay`, in turn, is made up of further component parts, such as `AllEventPanel`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "All these components, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `UI` component uses JavaFx UI framework."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For example, the layout of the link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "is specified in link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ". `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ". This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ". The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ". The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ". In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`[section modified by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*API* : link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* stores the CoderLifeInsights data."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Also exposes an unmodifiable `ObservableList\u003cGroup\u003e` and `ObservableList\u003cEvent\u003e for the same reason as above."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`[section modified by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*API* : link:https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* can save the CoderLifeInsights data in json format and read it back."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Import feature"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The import feature allows users to import data from a comma-separated values (CSV) file."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "It allows users to bulk import their contacts, groups and events from a previously exported data from CoderLifeInsights application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Given below is the sequence diagram to illustrate how the import operation interacts with the command `import l/life.csv g/group.csv e/event.csv` :"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Import feature sequence diagram."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#ImportFileSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::ImportFileSequenceDiagram.png[][pdfwidth\u003d\"70%\",width\u003d\"70%\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User enters `import l/life.csv g/group.csv e/event.csv`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. All 3 files would then be parsed by `ImportCommandParser` to check if the files exist with the path specified."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "3. On successful check, `ImportCommand` would be created and calls `ImportFile#importCsv`, `ImportFile#importGroupCsv` and"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`ImportFile#importEventCsv`to check if the CSV file headers are valid."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "4. `ImportCommand` would then call `Model#importCsvToAddressBook`, `Model#importCsvGroupsToAddressBook` and `Model#importCsvEventsToAddressBook`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "to check if the persons, groups and events are duplicates of the current CoderLifeInsights."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "5. If the imported data are not duplicates, it will then create a valid list of persons, groups and events to be added to CoderLifeInsights."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "6. CoderLifeInsights will then populate the 3 lists to the current data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is an activity diagram to summarise the steps above."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Import feature activity diagram."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#ImportFileActivityDiagram,align\u003d\"center\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::ImportFileActivityDiagram.png[][pdfwidth\u003d\"40%\",width\u003d\"40%\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Csv file format and constraints"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "In order for data to be imported into CoderLifeInsights, the CSV file provided must be in the exact format."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For `life.csv`:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Headers required:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `name`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `phone`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `email`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `address`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `tagged`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `time`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `places`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `activities`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Cell Formatting"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* No leading and trailing spaces in a cell."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* To specify a comma within a cell, the value of the cell should be inside double quotes."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Eg:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** \"Friends, Family\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** \"High School, Colleague\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Aspect | Alternative 1 (current choice) | Alternative 2"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| How import executes |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports the entire Csv file, converts all the rows into a list of `Person`, `Group` and"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`Event` objects and add the list into the spending list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Better performance."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Requires additional methods to implement the features."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports the Csv file, converts all the rows into a list of `Person`, `Group` and `Event`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "objects respectively and add each object accordingly."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Easy to implement."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Re-use existing methods."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "May cause performance issues regarding memory issues."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The first alternative was chosen as performance of the application is prioritised over ease of implementation."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "There would be risk of the application stop responding if the second alternative was chosen."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Export feature"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The export feature allows users to export their current data into a comma-separated value file with file name specified."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is a sequence diagram to illustrate how the export operation interacts with the command `export l/life.csv g/group.csv e/event.csv` :"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Export feature activity diagram."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#ExportFileSequenceDiagram,align\u003d\"center\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::ExportFileSequenceDiagram.png[][pdfwidth\u003d\"70%\",width\u003d\"70%\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User enters `export l/life.csv g/group.csv e/event.csv`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. All 3 files would then be parsed by `ExportCommandParser` to check if the files specified exist within the specified file path."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "3. This is necessary to avoid existing files being overwritten."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "4. If files do not exist, `ExportCommand` would then be created and calls `ExportFile#exportCsv`, `ExportFile#exportGroupCsv`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "and `ExportFile#exportEventCsv`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "5. Life, groups and events data would then be exported `life.csv`, `group.csv` and `event.csv` respectively."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is an activity diagram to summarise the steps above."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Export feature activity diagram."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#ExportFileActivityDiagram,align\u003d\"center\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::ExportFileActivityDiagram.png[][pdfwidth\u003d\"40%\",width\u003d\"40%\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "//end::importexport[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Suggestion Feature"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The suggestion feature allows users to get a person to hangout with, a place to hangout or an activity to do."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is an sequence diagram illustrating how the suggestion operation works with the command `suggest person`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Suggest person feature sequence diagram."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#SuggestPersonSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::SuggestPersonSequenceDiagram.png[][pdfwidth\u003d\"70%\", width\u003d\"70%\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User enters `suggest person`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. `SuggestCommandParser` would then check if keyword entered corresponds to `person`, `place` or `activity`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "3. Upon valid keyword entered, `SuggestCommand` would call `Model#suggestPerson` to return a suggested person."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "4. ObservableList of filteredPersons would be iterated to get suggested person based on least time spent and reverse"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "lexicographical order of name as a tie breaker. `Model` would self-invoke the method `Model#updateFilteredPersonList`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "to update filteredPersonList."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "5. filteredPersonList would then be updated to reflect on the GUI as a suggestion."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "A similar approach would apply to `place` and `activity` where instead of `Model#suggestPerson`, it would be"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`Model#suggestPlace` or `Model#suggestActivity` where an ObservableList of filteredEvents would be iterated to get"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "suggested place or activity based on the least frequency of the place visited or activity done."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If there are multiple place visited or activity done has the same frequency, a tie breaker would be introduced where a random place/activity would be suggested among the same frequencies."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Given below is an activity diagram to summarise the steps above."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Suggest person feature activity diagram."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#SuggestPersonActivityDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::SuggestPersonActivityDiagram.png[][pdfwidth\u003d\"40%\",width\u003d\"40%\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "//end::suggest[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//tag::add_group[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Add Group Feature"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The Add Group feature is implemented to allow users to track social activities with a group of people"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "(instead of just one person). A `Group` represents a social group containing"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1 or more `Person`. To avoid dependencies, a `Group` class stores the index of a `Person` instead of the `Person` object"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "itself. A `Group` can be created with or without `Person` as member(s), but must have a `Name`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This feature creates a new `Group` instance, which is then stored in an instance of `UniqueGroupList`,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "which in turn is stored in the `AddressBook`. These classes are part of the `model` component."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The feature is supported by the `AddGroupCommand` class, which extends the abstract"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "class `Command` and `AddGroupCommandParser`, which implements the `Parser` interface. These classes are part of the"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`logic` component."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The following class diagram showcases the relationship between the main classes that support this command and"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "key attributes and methods:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#AddGroupClassDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::AddGroupClassDiagram.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here below is an example usage scenario and how the `add_group` feature works at each step:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User enters `add_group n/group_name` or `add_group n/group_name m/index ...` into the app."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. The request is handled by the `LogicManager#execute(String)`, which then calls and passes the input to the `AddressBookParser#parseCommand(String)`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "method."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "3. `AddressBookParser` detects the command word `add_group` in the input string and creates an `AddGroupCommandParser` to parse inputs"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "according to the format specified for `AddGroupCommand`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "4. `AddGroupCommandParser` parses the input and also performs input validation to check for correct types"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "(eg alphanumeric characters for `Name` and `Integer` for memberIDs) using the `AddGroupCommandParser#parse(String)` method."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "5. `AddressBookParser#parse(String)` calls the constructor of `Group` and creates a new `Group` instance with"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the inputs from the user. It creates a new `AddGroupCommand` and passes the newly created `Group` to it."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "6. `AddressBookParser` returns the new `Command` object to the `AddressBookParser`, which in turn returns it to"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`LogicManager`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "7. `LogicManager` calls the `AddGroupCommand#execute(model)` method"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "8. The `AddGroupCommand#execute(model)` method obtains a copy of the `FilteredPersonList` from `Model` using the `Model#getFilteredList()`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "method. Using the list, the method verifies if the member indexes in the `Group` instance exist in the `Person` list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "9. the `AddGroupCommand` adds the group to the app by calling the `Model#addGroup(Group)` method."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "10. As a last step, the `AddGroupCommand` creates a `CommandResult` with `SuccessMessage` and `ViewType` and returns it"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "to `LogicManager`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The process is shown in the following sequence diagram:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#AddGroupSequenceDiagam,align\u003d\"center\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "image::AddGroupSequenceDiagram.png[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//end::add_group[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Aspect: How the `add_group` command executes"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 1 (current choice): Separate parsing from code execution"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: Clear distinction between class responsibilities."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: More code, may increase coupling as objects are passed around between the classes."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 2: Parse and Execute in the same class"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: Less code, less variables/object to pass between classes."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: No separate classes so maybe harder to trace bugs. It maybe harder to understand for future developers, as the"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "design would be different to the `add_person` command (adapted from AddressBookLevel 3)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Aspect: How to store the `group` instances"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 1 (current choice): Store in a separate `UniqueGroupList`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: Separate List is easier to manage and edit. Thus, this option is also advantageous as there is an `edit_group`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "command as well."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: Another list to be stored in AddressBook, which might lead to more memory usage. Since the target user is"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "may keep the app running in the background, this can be disadvantageous."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 2: Store inside Person Objects, which are stored in `UniquePersonList`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: No need of a separate list, one list to store all essential data. This might be better from a memory standpoint."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: Harder to maintain group instances inside person as there will be multiple copies and for most users,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the number of groups of people will be less than the number of people. This alternative would also make the Person class"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "depend upon the Group class, which can be error-prone."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//tag::delete_group[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Delete Group Feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The Delete Group feature allows the user to delete a previously `Group`. This feature is implemented using the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`DeleteGroupCommand`, which extends the abstract class `Command` and the `DeleteGroupCommandParser`, which implements"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the `Parser` interface.The feature is also supported by `UniqueGroupList`,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "which stores the `Group` instances. The relationship between classes is similar to the one seen in diagram x.x and hence"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "is omitted for conciseness."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here below is an example workflow, which is shown using an activity diagram:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#DeleteGroupActivityDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::DeleteGroupActivityDiagram.png[[pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The above workflow is achieved due to the interlinked classes. Their behaviour during an execution of the DeleteGroup"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "feature is shown using the following Sequence Diagram."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#DeleteGroupSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "image::DeleteGroupSequenceDiagram.png[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Aspect: how the delete group feature executes"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 1 (current choice) : Separate `DeleteGroupCommand` and `DeleteGroup` classes to support the feature. +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Pros: clear class responsibility, easier to trace bugs. Since this follows the design of most other commands,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    intuitive to understand for new developers +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Cons: increases the amount of code, which might introduce more errors."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 2: The `DeleteGroupCommand` class parses the inputted index +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Pros: Since only one argument to parse, this eliminates the need for another class. Less code."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Cons: Can cause confusion among developers regarding the class responsibility."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//end::delete_group[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//tag::list_group[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d List Group Feature"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The list group feature allows users to view all the `Group` instances currently stored in CoderLifeInsights."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This feature is mainly supported by the `ListGroupCommand`, which extends the abstract class `Command`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here below is a sequence diagram showcasing how the command works."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#ListGroupSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "image::ListGroupSequenceDiagram.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The following is an example usage scenario and how the list group mechanism behaves at each step."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User enters `list_groups` into the command prompt"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. The `LogicManager` calls `AddressBookParser#parseCommand()` with the arguments supplied by the user"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "3. The method `AddressBookParser#parseCommand()` checks if the input is valid and if yes, creates a `ListGroupCommand`."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "4. The `ListGroupCommand` calls the `updateFilteredGroupList` method of `Model` to update the GUI."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "5. The `ListGroupCommand` returns the `CommandResult` to AddressBookParser"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "6. The `AddressBookParser` returns the `CommandResult` to `LogicManager`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The following activity diagram summarises the workflow for the list group feature."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#ListGroupCommandActivity,align\u003d\"center\"]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::ListGroupCommandActivity.png[pdfwidth\u003d\"30%\",width\u003d\"30%\"]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//end::list_group[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//tag::edit_group[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Edit Group Feature"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The Edit Group Feature allows the user to edit an existing `Group` in the app."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The Edit Group Feature is facilitated by the `EditGroupCommand`, which extends the abstract class `Command`, and"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the `EditGroupCommandParser`, which implements the `Parser` interface. Both of these classes are part of the `Logic`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "component. Additionally, a private and static `EditGroupDescriptor` class is present in `EditGroupCommand` as a container"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "class to encapsulate attributes to be edited for a `Group`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "he following operations are implemented and used for accomplishing this feature:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `EditGroupCommandParser#parser(String args)` - Parses the input to obtain the arguments and returns an"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`EditGroupCommand` instance with the arguments."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `EditGroupCommandParser#arePrefixesPresent(ArgumentMultimap argumentMultiMap, Prefix... prefixes)` - checks if the"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "member indexes are supplied by the user."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `EditGroupCommand#EditGroupCommand(Index index, EditGroupDescriptor editGroupDescriptor)` - Creates a new"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`EditGroupCommand` instance with the supplied index and editGroupDescriptor."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `EditGroupCommand#createEditedGroup(Group groupToEdit, EditGroupDescriptor editGroupDescriptor)` - Modifies the given"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`groupToEdit` with the details given in `editGroupDescriptor`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The following is an example usage scenario and how the edit group mechanism behaves at each step:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User types `edit_group index n/new_name` or `edit_group index m/index ...` into the app."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. The request is handled by `LogicManager#execute(String)`, which then calls and passes the input to"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the `AddressBookParser#parseCommand(String)` method."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "3. `AddressBookParser` detects the command word `edit_group` in the input string and creates a new"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`EditGroupCommandParser` to parse inputs according to the format specified for `EditGroupCommand`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "4. Input is parsed using the `EditGroupCommandParser#parse(String)` method, which also performs input validation. The"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "method creates a `EditGroupDescriptor` using the parsed inputs by calling the static constructor inside `EditGroupCommand`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "5. The `EditGroupCommandParser` creates a new `EditGroupCommand` instance with the given `index` and newly created"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`EditGroupDescriptor` object and returns it to `AddressBookParser`, which in turn returns it to `LogicManager`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "6. `LogicManager` calls the `EditGroupCommand#execute(model)` method."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "7. `EditGroupCommand` obtains a copy of the `FilteredPersonList` by calling the `Model#getFilteredPersonList()` method."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This is used to check if the member indexes supplied by the user exist in the app and that there are no duplicate person"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "indexes in the command."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "8. `EditGroupCommand` edits the group at given index by calling its own private static method"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`EditGroupCommand#createEditGroup(Group, EditGroupDescriptor)`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "9. `EditGroupCommand` obtains a copy of the `FilteredGroupList` by calling the `Model#getFilteredGroupList()` method."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This is used to check if the edited group already exits in the app."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "10. As a last step, `EditGroupCommand` creates a `CommandResult` with `SuccessMessage` and `ViewType` and returns it to"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`LogicManager`."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The above process is shown in the following sequence diagram:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#EditGroupSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "image::EditGroupSequenceDiagram.png[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "The following activity diagram summarises the general workflow for the Edit Group Feature"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[#EditGroupActivityDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::EditGroupActivityDiagram.png[][pdfwidth\u003d\"60%\",width\u003d\"60%\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Aspect: What and how to edit"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 1 (current choice): Only edit parameters that are supplied. For the parameters that are supplied,"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "overwrite the existing entry."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: The single edit group feature can achieve both addition and deletion of members"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "as well as renaming of the group. Better maintainability of code."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: Overwriting all existing entries might affect usability as the user will have to re-enter the current member"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "indexes if they want to add to member indexes rather than delete."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 2: Only edit parameters that are supplied. For the parameters that are supplied, add to the existing"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "entries instead of overwriting."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: The user will not have to re-enter member indexes if they choose to retain members inside a group."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: Will require implementing a separate command to then delete member indexes from a group. This can also confuse"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the user if there are too many commands."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* Alternative 3: Edit all parameters. Overwrite all existing entries."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Pros: Simplest to implement in terms of code. Will require less code than alternative 1 and 2."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Cons: Cumbersome for the user as they have to enter an attribute value even if they don\u0027t want to change it."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "//end::edit_group[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//tag::addEvent[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Add Event Feature"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The add event feature allows users to add an event to a saved contact or group in CoderLifeInsights specified using the member `m/` tag or the group `g/` tag."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Command: `add_event ACTIVITY m/INDEX time/TIME place/PLACE` or `add_event ACTIVITY g/INDEX time/TIME place/PLACE`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* TIME is the variable used to store the time the user has spent with a saved contact or group."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* TIME parameter must contain at least 2 digits. For example: A time of 1 hour and 30 minutes will be input as `130`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* An event added must have time of at least 1 minute. e.g. time/01"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* PLACE and ACTIVITY are case-sensitive"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Example usage: `add_event date night m/1 time/230 place/Gardens by the Bay`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The command above will add the following to the Person whose index is `1` on the filtered or unfiltered list:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Activity `date night` into the Person\u0027s activityList."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Place `Gardens by the Bay` into the Person\u0027s placeList."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Time `230` which equals 2 hours and 30 minutes, will be added to the Person\u0027s time."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "It will also create an Event with the following attributes:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Activity: `date night`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Place: `Gardens by the Bay`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Time: `2h 30m`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The sequence diagram below showcases how the command works with a valid input:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "image::addEventSequence.png[pdfwidth\u003d\"100%\",width\u003d\"92.5%\"]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "***"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Depicted below is the class diagram of the Event class, displaying how the UniqueEventList and Event classes are associated to the AddressBook class:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "image::EventClassDiagram.png[pdfwidth\u003d\"100%\",width\u003d\"100%\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The Event created is stored in an UniqueEventList, which is saved to the Json file as well."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The Events saved are used to generate output for features."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The following class diagram shows how the Time, PlaceList and ActivityList are associated with a Person object."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The Person class only displays relevant information to the Time, PlaceList and ActivityList classes:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "image::AddEventClassDiagram.png[pdfwidth\u003d\"100%\",width\u003d\"100%\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The Time, ActivityList and PlaceList classes were implemented similar to a Person\u0027s Name or Address. A Person\u0027s Time is displayed on the GUI as well for users to know how much time they have spent with that Person."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The reason behind this implementation was to ensure that information added from the AddEventCommand would be saved through changes to Persons or Groups in CoderLifeInsights."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The pertinent information would then be used in following features which require these data to generate output. +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "A Group object also has the same implementation of Time, PlaceList and ActivityList and its class diagram is similar to the diagram above, with the Person class being substituted by the Group class."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "These information are also saved for the Group object when an Event is added to a Group object."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "***"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The following activity diagram depicts the following scenario:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "1. User enters `add_event date night m/1 time/230 place/Gardens by the Bay` into the command prompt."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "2. The `LogicManager` calls `AddressBookParser#parseCommand()`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "3. The method `AddressBookParser#parseCommand()` creates a `AddEventCommandParser` and calls the `AddEventCommandParser#parse()` method."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "4. `AddEventCommandParser#parse()` checks if input is valid."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "5. `AddEventCommandParser#parse()` then creates a new instance of an `Event`."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "6. `AddEventCommandParser#parse()` then creates a new instance of `AddEventCommand`, with the created `Event` as it\u0027s parameter."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "7. `AddEventCommand` calls the `AddEventCommand#execute()` method."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "8. `AddEventCommand#execute()` retrieves the filtered list with the call to `model#getFilteredPersonList()`."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "9. `AddEventCommand#execute()` then retrieves the Person object to be edited with the call to `model#getFilteredPersonList()#get()`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "10. `AddEventCommand#execute()` then computes the new Time by retrieving the Person\u0027s current Time with the call to `person#getTime()` ,then adding it to the input Time."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "11. `AddEventCommand#execute()` then creates a new ActivityList by retrieving the Person\u0027s ActivityList with the call to `person#getActivityList2()`, followed by `ActivityList#addActivity()`, which returns a new ActivityList with the new activity added."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "12. `AddEventCommand#execute()` then creates a new PlaceList by retrieving the Person\u0027s PlaceList with the call to `person#getPlaceList2()`, followed by `PlaceList#addPlace()`, which returns a new PlaceList with the new place added."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "13. `AddEventCommand#execute()` then creates a new Person object with all the same attributes except for the Time, PlaceList, and ActivityList which is replaced by the new Time computed, the new PlaceList and the new ActivityList with the call to the Person constructor."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "14. `AddEventCommand#execute()` then replaces the existing Person object with the new Person object with the call to `model#setPerson()`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "15. `AddEventCommand#execute()` then updates the filtered list with the call to `model#updateFilteredPersonList()`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "16. `AddEventCommand#execute()` then updates the UniqueEventList with the call to `model#addEvent()`, which adds the created `Event` to the UniqueEventList."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "17. `AddEventCommand` returns the `CommandResult` to `AddressBookParser`."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "18. `AddressBookParser` returns the `CommandResult` to `LogicManager`."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "image::addEventActivity.png[pdfwidth\u003d\"100%\",width\u003d\"75%\"]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The Add Event feature and the relevant classes were added and implemented to add and store Events and relevant data that are used to generate output for other features such as insights."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//end::addEvent[]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "terencemah"
        },
        "content": "//tag::insights[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003d\u003d\u003d Insights feature"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Mah Cai Jun, Terence]`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "terencemah"
        },
        "content": "The Insights feature displays various insights about the persons, groups and events stored in Coder Life Insights."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "terencemah"
        },
        "content": "It is activated by the command word `view`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewCommandCondensedGenericSequenceDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "terencemah"
        },
        "content": "image::ViewCommandCondensedGenericSequenceDiagram.png[pdfwidth\u003d\"100%\",width\u003d\"100%\"]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "terencemah"
        },
        "content": "There are 4 key steps, as labelled in the diagram above, that are essential to how the Insights feature"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "terencemah"
        },
        "content": "and `view` functionality are implemented. Rather than updating the model with incoming information, this"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "terencemah"
        },
        "content": "command is concerned with retrieving updated information from the model, and displaying the right information"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "terencemah"
        },
        "content": "by switching between the various possible view panels on the GUI."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "terencemah"
        },
        "content": "To ensure that up-to-date information is retrieved, the Model contains `ObservableLists` which allow"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "terencemah"
        },
        "content": "listeners to be updated whenever the list contents are updated."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "terencemah"
        },
        "content": "In Step 1, the `ViewCommand` object updates the relevant `ObservableList` in the `ModelManager`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "terencemah"
        },
        "content": "with the user\u0027s desired information. It checks the appropriate view panel for displaying the desired"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "terencemah"
        },
        "content": "information, represented as a `ViewType` Enum within the returned `CommandResult`. In Step 2,"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "terencemah"
        },
        "content": "the `MainWindow` retrieves the appropriate `ViewType` from the `CommandResult`, thus knowing which"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "terencemah"
        },
        "content": "view panel to use. In Step 3, it retrieves the appropriate `ObservableList` from the Model, previously"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "terencemah"
        },
        "content": "updated by the `ViewCommand`. In Step 4, it displays, on the view panel determined in Step 2, the"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "terencemah"
        },
        "content": "information retrieved from Step 3."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "terencemah"
        },
        "content": "The class diagram below depicts the key relationships between the important features."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "terencemah"
        },
        "content": "The main GUI controller, `MainWindow`, composes the Logic component, which in turn composes"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "terencemah"
        },
        "content": "the Model component. This allows `MainWindow` to access the `ObservableLists` in the Model."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewCommandClassDiagram, align\u003d\"center\"]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "terencemah"
        },
        "content": "image::ViewCommandClassDiagram.png[pdfwidth\u003d\"100%\",width\u003d\"100%\"]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "//tag::undoredo[]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`currentStatePointer`."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current CoderLifeInsights state in its history."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous CoderLifeInsights state from its history."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone CoderLifeInsights state from its history."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `VersionedAddressBook` will be initialized with the initial CoderLifeInsights state, and the `currentStatePointer` pointing to that single CoderLifeInsights state."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the CoderLifeInsights."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the CoderLifeInsights after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `add` command also calls `Model#commitAddressBook()`, causing another modified CoderLifeInsights state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the CoderLifeInsights state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous CoderLifeInsights state, and restores the CoderLifeInsights to that state."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial CoderLifeInsights state, then there are no previous CoderLifeInsights states to restore."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the CoderLifeInsights to that state."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest CoderLifeInsights state, then there are no undone CoderLifeInsights states to restore."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 5. The user then decides to execute the command `list`."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Commands that do not modify the CoderLifeInsights, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all CoderLifeInsights states after the `currentStatePointer` will be purged."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We designed it this way because it no longer makes sense to redo the `add n/David ...` command."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire CoderLifeInsights."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of CoderLifeInsights states."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Cons: Logic is duplicated twice."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5. These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Hybrids of unit and integration tests."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "We also use https://www.codacy.com/[Codeacy] to automate code quality reviews."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "See https://support.codacy.com/hc/en-us/articles/360010263540-Getting-started-with-Codacy[Getting Started with Codacy]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "for more details."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Continuous Deployment"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "We maintain a site for this project https://ay1920s2-cs2103-w14-4.github.io/main/[here]. To ensure that each PR complies"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "with our site requirements for auto-deploy, we use Netlify for Continuous Deployment. Read"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://docs.netlify.com/configure-builds/get-started/#basic-build-settings[this guide] to get upto speed with Netlify CD."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Pull Requests"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Branch protection was applied to the master branch of the repository to protect from rogue merges. A mandatory review is required"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "before a pull request can be merged into the master branch."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "A project often depends on third-party libraries."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Managing these _dependencies_ can be automated using Gradle."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* prefers command-line apps over GUI-intensive apps"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* has a need to manage and maintain their social life"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* wants to analyse data from their social life"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Value proposition*: provides insights of the user\u0027s social life and encourages social interactions"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`*` |user with many persons in the CoderLifeInsights |sort persons by name |locate a person easily."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | add time spent with a person |track and analyse how much time has been spent with that person or the social group they belong to."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|`* * *` |user | places I have been with a person |track and analyse the different places the user has been with along the person."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | add activity done with a person |track and analyse types of activities done with that person or the social group they belong to."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | import csv contacts | build upon my existing contacts directory and not start from scratch."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | export csv contacts | take backup of my progress."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | create a new social group | track a cluster of people together, e.g. secondary school friends, JC friends, family, university friends etc."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|`* * *` |user | assign persons to different groups | track people I know from multiple places (Eg workplace and school both)."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|`* * *` |user | edit group | change the name of a social circle. Add or remove people."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | delete group | remove social circles that are no longer needed."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* * *` |user | list all groups | get a glimpse of all social circles."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | list specific group places | know which places the group has been to."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | list specific group activities | know which activites the group has been doing."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | list specific group time spent | know how much time has been spent with this group."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | randomly select person | get a person to hangout with."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get suggestions on a person based time spent | know who to hangout with."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get suggestions on an activity based on my activities done | to know which activity to do."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get suggestions on a place based on my places visited | know which place to go to."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get insights on places I have been to. | get a glimpse of all the places I have been to."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get insights on time spent with all groups  | know time spent distribution within a group."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get insights on all activities done.  | know which activities I have done and their frequency."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get insights on time spent with individuals  | know the spread of time with all individuals."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|`* *` |user | get the last 5 events that happened  | get a glimpse of what I did the last 5 events."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "(For all use cases below, the *System* is the `CoderLifeInsights` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights shows a list of persons"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "3. User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "4. CoderLifeInsights deletes the person"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The list is empty."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 3a."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Specific person selected to be deleted not in list."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to add person"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights adds the person and displays their details"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No details of the person provided as arguments."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: Find a person by name"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to search a person with specified keyword"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights displays a list of people matching the keyword specified"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No details of the person provided as arguments."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: Add group"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to add group"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. CoderLifeInsights adds the group and displays its details"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Group name not provided"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Step 1 continues until name is provided +"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* 1b."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Member indexes provided are invalid (don\u0027t exist in the app)"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** 1b1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Step 1 continues until valid member indexes are supplied or no indexes are supplied (member indexes are optional) +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Group"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Preconditions: group to be deleted exists in the app +"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to delete group with specified index"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. CodeLifeInsights deletes the group and displays its details"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Group"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Preconditions: group to be deleted exists in the app +"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to edit group with specified index"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CodeLifeInsights deletes the group and displays its details +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "No values to edit are provided"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message telling the user a group can\u0027t be edited with no new info. +"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Step 1 continues until at least one new value is provided. +"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* 1b."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "If member indexes are provided, they are invalid (don\u0027t exist in the app) +"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1b1. CoderLifeInsights shows an error message telling the user that one or more member indexes are invalid. +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Step 1 continues until all member indexes provided are correct or no new member indexes are provided at all. +"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Use case: List Group"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. User requests to list all groups"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. CoderLifeInsights displays all the groups in a list format with their indexes, time spent, member indexes, and"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "event ids. +"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: Export data"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests to export life, group and event data to specified CSV file path."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights exports data to specified CSV files."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No file path specified."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "+"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: Import data"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests to import life, group and event data from specified CSV file path."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights imports data from specified CSV files. +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No file path specified."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** 1a1. CoderLifeInsights shows an error message."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "+"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: Suggest person"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests for suggestion of person."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights suggests a person to hangout with. +"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No person available in CoderLifeInsights to suggest +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: Suggest place"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests for suggestion of place."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights suggests a place to visit. +"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No place available in CoderLifeInsights to suggest +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: Suggest activity"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests for suggestion of activity."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights suggests an activity to do. +"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No activity available in CoderLifeInsights to suggest +"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Use case: View time"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. User requests to view time comparison between individuals and groups."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. CoderLifeInsights displays pie chart of Individual time spent vs Group time spent. +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No event data for group or individual available for comparison. +"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "// tag::useCaseAddEvent[]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Use case: Add an event with a person"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "1. User wants to add an Event with the following details to the first person displayed on the Person List on CoderLifeInsights: +"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Activity: `swimming` Place: `pool` Time: `1 hour and 30 minutes`"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "2. User enters correct command with valid input and prefixes"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "3. Event is created and added to the Person +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Use case ends*"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2a. User enters incorrect command"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a1. Invalid command error is displayed"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a2. User re-enters valid command with valid input +"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2b. User enters correct command but invalid input"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2b1. Invalid command error is displayed"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2b2. User re-enters valid and correct command with valid input +"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2c. Person index specified is out of bounds"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2c1. Invalid person index error message is displayed"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2c2. User re-enters command with correct and valid person index +"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Use case: Add an event with a group"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "1. User wants to add an Event with the following details to the first group displayed on the Group List on CoderLifeInsights: +"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Activity: `dancing` Place: `dance studio` Time: `1 hour and 30 minutes`"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "2. User enters correct command with valid input and prefixes"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "3. Event is created and added to the Group +"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Use case ends*"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2a. User enters incorrect command"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a1. Invalid command error is displayed"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a2. User re-enters valid command with valid input +"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2b. User enters correct command but invalid input"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2b1. Invalid command error is displayed"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2b2. User re-enters valid and correct command with valid input +"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2c. Group index specified is out of bounds"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2c1. Invalid group index error message is displayed"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2c2. User re-enters command with correct and valid group index +"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "// end::useCaseAddEvent[]"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Use case: View the places or activities visited with a group"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "1. User wants to view insights on the places or activities been to or carried out with a group."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "2. User enters view group command"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "3. CoderLifeInsights displays the requested information in table form for the user. +"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Use case ends*"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* 2a. User enters valid command with invalid group index"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a1. Invalid group index error message is displayed"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** 2a2. User re-enters command with a valid group index +"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Use case resumes at 3."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should be easy to log info onto the application."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should not require user to install"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Features implemented should be testable using automated and manual testing."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should work for a single user only."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Should be able to run with or without internet connection."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[[mainstream-os]]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Mainstream OS::"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[[private-contact-detail]]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Private contact detail::"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[[coderlifeinsights]]"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "CoderLifeInsights::"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "An application."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[[social-group]]"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "(Social) Group::"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "A cluster of 0 or more other people with a commonality as identified by the user (eg same JC, same OG, etc)."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "An empty `Group`is allowed since it is assumed that the user themselves is a member of the social group (which is why"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "they would want to track it.)"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[[event]]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Event::"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "An event is an event that the user took part in, either with another individual or group. An event has an activity"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "(what the user engaged in), a place, time spent and the person/group."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[[time]]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Time::"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Time represents the time spent in an event. It is represented by number of hours (0 or greater) and"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "number of minutes (between 0 and 59 inclusive)."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: First contact is deleted from the list."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Details of the deleted contact shown in the status message."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: No person is deleted."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Error details shown in the status message."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Finding a person"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Finding a person with keywords"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have person data containing keyword available for search."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `find betty`"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Details of betty shown in GUI."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `find jjjjjjjj`"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: No detail of jjjjjjjj shown in GUI."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "0 persons listed! shown in status message."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Nothing displayed in Person column."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Other incorrect find commands to try: `find`, `find ukloiuj` +"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d  Suggest a person"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest a person to hangout with"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have person data with event added for suggestion."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest person`"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Details of person with the least time spent shown in People column"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest person with no events added."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have person data with no events added."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest person`"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: The last People alphabetically in CoderlifeInsights shown in People column."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest person with no person data."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have no person data in CoderLifeInsights"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest person`"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Nothing shown in People column."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Person suggestion provided shown in status message."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d  Suggest a place"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest a place to visit"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have events added for suggestion."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest place`"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Details of place with the least frequency visited shown in Insights column"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest place with no events added."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have data with no events added."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest place`"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Nothing shown in Insights column."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Place suggestion provided shown in status message."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Suggest an activity"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest an activity to do."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have events added for suggestion."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest activity`"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Details of activity with the least frequency visited shown in Insights column"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Suggest activity with no events added."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: Have data with no events added."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `suggest activity`"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Nothing shown in Insights column."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Activity suggestion provided shown in status message."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Import CoderLifeInsights data"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Import life, group and event data."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: CSV files containing named `life.csv`, `group.csv`"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "and `event.csv` data available in specified path."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "No duplicates of person, group and events available in CoderLifeInsights."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `import l/life.csv g/group.csv e/event.csv`"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: People column populated with person data. +"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Insights column populated with time data. +"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Groups column populated with group data. +"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Files imported: life.csv groups.csv events.csv shown in status message."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Import life, group and event data with non-existent file."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: CSV files of provided path does not exist."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `import l/test.csv g/grouptest.csv e/eventtest.csv"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: CoderLifeInsights will return error message showing that path provided does not exist."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Export CoderLifeInsights data"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Export life, group and event data."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: CSV files of provided file name must not exist."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `export l/life.csv g/group.csv e/event.csv`"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: All valid life, group and event data will be exported to the respective CSV files."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Export life, group and event data with CSV files that exist in path provided."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Prerequisites: CSV files of provided file name must exist."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test case: `export l/life.csv g/group.csv e/event.csv`"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: CoderLifeInsights will return error message showing that files already exist."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Another naming convention is required."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Adding an event"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Add an event to a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Have a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 1 (adding an event to a person): `add_event anything place/anywhere time/30 m/1` +"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: New event successfully added: Event: anything place: anywhere for 0h 30m"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 2 (adding an event to a group): `add_event anything place/anywhere time/30 g/1` +"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: New event successfully added: Event: anything place: anywhere for 0h 30m"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event to a person or group not saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Choose an index that is greater than the number of persons and groups saved in CoderLifeInsights, for example, 100 for the sample test data"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 1(adding an event to a person): `add_event anything place/anywhere time/30 m/100` +"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: The person index provided is invalid"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 2 (adding an event to a group): `add_event anything place/anywhere time/30 g/100` +"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: The group index provided is invalid"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event to a person or group with time spent of 0 hours and 0 minutes:"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Have a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 1 (adding an event to a person): `add_event anything place/anywhere time/00 m/1`+"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Time parameter has to be greater than 0 minutes"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Test case 2 (adding an event to a group): `add_event anything place/anywhere time/00 g/1` +"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Time parameter has to be greater than 0 minutes"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event with required fields missing:"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Have a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 1: `add_event place/anywhere time/30 m/1`"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 2: `add_event anything place/ time/30 m/1`"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 3: `add_event anything time/30 m/1`"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 4: `add_event anything place/anywhere time/ m/1`"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 5: `add_event anything place/anywhere m/1`"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 6: `add_event anything place/anywhere time/30`"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 7: `add_event` +"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Invalid command format! +"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "add_event: Creates an event with a group or an individual that adds an activity, place and time to the subject. +"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Parameters: ACTIVITY place/PLACE m/INDEX time/TIME +"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "OR +"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Parameters: ACTIVITY place/PLACE g/INDEX time/TIME +"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Example: add_event Dancing place/SCAPE m/1 time/300"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event with an invalid person or group index"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Have a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 1: `add_event anything place/anywhere time/30 m/`"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 2: `add_event anything place/anywhere time/30 m/s`"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 3: `add_event anything place/anywhere time/30 m/1 s` +"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Index is not a non-zero unsigned integer."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event with an invalid time"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: Have a person or group saved in CoderLifeInsights"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 1: `add_event anything place/anywhere time/0 m/s`"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 2: `add_event anything place/anywhere time/30s m/s`"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 3: `add_event anything place/anywhere time/test m/s` +"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Time parameter needs to be unsigned integers of at least 2 digits. +"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "For example: [5 minutes \u003d 05]; [1 hour \u003d 100]; [10 hours and 30 minutes \u003d 1030]"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ". Adding an event to both group and member at the same time"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".. Testcase 1: `add_event anything place/anywhere time/30s m/1 g/1` +"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Expected: Invalid command format! +"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "add_event: Creates an event with a group or an individual that adds an activity, place and time to the subject. +"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Parameters: ACTIVITY place/PLACE m/INDEX time/TIME +"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "OR +"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Parameters: ACTIVITY place/PLACE g/INDEX time/TIME +"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Example: add_event Dancing place/SCAPE m/1 time/300"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//\u003d\u003d\u003d Viewing places visited or activities carried out with a group"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//. Obtain insights on the number of times an activity has been done with a specific group or the number of times a place has been visited with that same group."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//.. Prerequisites: Have a group saved in CoderLifeInsights and add an event with that group"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//.. Test case 1 (view places visited with group): `view_group places g/1`"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//.. Test case 2 (view activities done with group): `view_group activities g/1`"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Add a Group"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Adding an empty group"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `add_group n/empty_group_name` +"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: New group added to CoderLifeInsights, new group displayed in groups panel and success message displayed"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Adding a group with members (Persons)"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: Member indexes must exist in the app. Hence, add as many members you want as `Person\u0027 before."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "... For example, add a Person using the command `add_person n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]`"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "... Note down the person indexes for persons whom you want as members of the new group"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `add_group n/new_group_name m/1 m/2 ...`"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: New group added to CoderLifeInsights, new group displayed in groups panel and success message displayed"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Delete a Group"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Deleting an existing group"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the group to be removed must exist in CoderLifeInsights."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "... If for example the app contains no groups, add a group using `add_group n/delete_demo`. It should have index 1."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `delete_group 1`"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: Group deleted from the app and success message shown to the user."
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Deleting a non-existent group"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the group to be deleted (referenced by the index) must not exist in CoderLifeInsights. To be safe,"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "use the index that is 1 more than the largest index of the current groups. You can find the largest index using"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`list_groups` and observing the last group entry. If the app has 99 groups, choose 100 as the index of the group to be"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "deleted."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `delete group 100`"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: Group not deleted as there is no group at given index. Error message shown to user saying Group Index"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "specified is invalid."
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Edit a Group"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Editing all fields possible of an existing group"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the group to be edited must exist in CoderLifeInsights. Follow `8.9` to create a group in the app if"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "one doesn\u0027t exit already. Note down the index of the group either when it is created or using the group list on the"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "right in the GUI. The new members to be included in the group must also exist in the app."
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: If you want to edit the group with index 1 and change member list to only have person with index 1,"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "enter `edit_group 1 n/new_name m/1`."
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: Group at index 1 is changed. Name is `new_name` whereas `members` now only has `1` (instead of the indexes"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "that existed earlier)."
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Editing the name of an existing group"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the group to be edited must exist in CoderLifeInsights."
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `edit_group 1 n/another_name`."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: The name of group at index 1 is changed of `another_name`. Success message displayed to the user. The"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "member list of the group at index 1 remains unchanged."
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Editing the member indexes of an existing group"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the new member indexes must exist in CoderLifeInsights."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `edit_group 1 m/1 ..`."
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: The member list of the group at index 1 is changed to the new member indexes supplied. The name of the group"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "at index 1 remains unchanged. Success message is displayed to the user."
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". Editing a non-existent group"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: the group at specified index must not exist in CoderLifeInsights. Pick an index that is larger than"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "the current largest index of groups in the app. If 99 is the largest index, choose 100."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test case: `edit_group 100`."
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: Error message saying group index is invalid is displayed to the user."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d List all Groups"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ". List all groups"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Prerequisites: None."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ".. Test Case: `list_groups`"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Expected: the group panel will show all the groups currently in the app. If there are no groups, it will be blank."
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "A success message will be shown to the user."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Exiting the program"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Exit the program"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".. Test Case: `exit` +"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Expected: Exits the program."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "To develop and implement the features we have for CoderLifeInsights was difficult and time consuming. For a project"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "of this size, effective communication was required amongst the team members and the situation was made worse due to quarantine"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "measures of the COVID-19. As a result, conflicts arose in the group but was quickly resolved for the better of the project."
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "All of us dealt with the situation professionally and was determined to complete and deliver CoderLifeInsights as a working application."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Some difficulties that we face during implementation of CoderLifeInsights:"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "1. Multiple entity implementation:"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Designing `Event` and `Group` class was challenging as we had to consider the data being stored in each class that would be independent"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "of the existing `Person` class. A great deal architecture analysis was done to avoid dependency between classes. At the same time,"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "we enhanced the `Person` class to store additional information according to our user\u0027s needs."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "2. JSON Implementation"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* We have to learn about the JSON packages that were available and apply it to not only existing `Person` class but also `Event`"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "in the form of `UniqueEventList` and `Group` class similar to `Person`. This also required an in-depth understanding of Java"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "data structures and `Optional` class."
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* With this implementation, we were able to develop the `import` and `export` features to enable the user to transfer data from"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "one computer to another. This is crucial to our user as programmers would work between multiple computers and would want to keep"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a backup and keep their data in sync across computers."
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "3. Redesigning UI of AB3"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Considering our lack of knowledge in UI designs and JavaFX, we had to learn to implement the PanelLists as well as the Pie Chart class"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "to display meaningful information to our users. In total we had more than 3 PanelLists and all of which had to interact with each of the"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "features implemented. The flow of the application in between each command was also well thought out and seamless."
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* We further enhanced the UI from AB3 from a single column application to a resizable multiple column application. In order for"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "the application columns to fit the desired window size of the user, each column size was carefully measured and well thought out to"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "fit our user\u0027s need as a programmer. The colors were carefully selected to brighten up the user\u0027s mood after a long day of work."
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "As it is a social application, bright color scheme would be ideal."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "After going through this project, we not only learnt good Software Engineering practices but also communication skills between"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "team members that was crucial to the success of CoderLifeInsights. As we have invested a significant amount of time towards this project,"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "we aim to continue developing the application during the summer holidays to further enhance the features of the project."
      }
    ],
    "authorContributionMap": {
      "raivatshah": 425,
      "terencemah": 34,
      "harrychengly": 719,
      "l2ejected": 212,
      "-": 368
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d CoderLifeInsights - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "By: `Team CoderLifeInsights`      Since: `Mar 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "CoderLifeInsights is a CLI (Command Line Interface) driven desktop application that a programmer can use to record his or her social interactions with individual friends, or group of friends. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "CoderLifeInsights gives the programmer insights into his or her social life, and provides suggestions to liven up their social life by analysing the social events recorded in CoderLifeInsight through the CLI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Download the latest `coderlifeinsights.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your CoderLifeInsights."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *`list_persons`* : lists all contacts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* **`add_person n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to your Life."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* **`delete_person 2` : deletes the 2rd contact shown in the current list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Command Format and Specifications*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* ALL commands are case sensitive."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`,`p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `PERSON_INDEX` refers to the `INDEX` of a `Person` in CoderLifeInsights and similarly, `GROUP_INDEX` refers to the `INDEX` of a `Group`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add_person`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Adds a person to the CoderLifeInsights +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Format: `add_person n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"30%,\u003c20%,\u003c60%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Example | Command | Result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Add a person John Doe to CoderLifeInsights|`add_person n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` | John Doe is added to CoderLifeInsights with the input information."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Add a person Betsy Crowe to CoderLifeInsights| `add_person n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` | Betsy Crowe is added to CoderLifeInsights with the input information."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Listing saved data : `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Shows a list of recorded information in CoderLifeInsights. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format: `list_LIST_PARAMETER`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* LIST_PARAMETER include `persons`,`groups`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* CoderLifeInsights will display an indexed list of the saved `LIST_PARAMATER`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"30%,\u003c20%,\u003c60%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Example | Command | Result"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Show all persons| `list_persons` | Returns a list of the saved persons in CoderLifeInsights."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Show all groups | `list_groups` | Returns a list of the saved groups in CoderLifeInsights."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Edits an existing person in the CoderLifeInsights. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"40%,\u003c20%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Example| Command | Result"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Change the phone number and email address of the 1st person|`edit 1 p/91234567 e/johndoe@example.com` |"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Change the name of the second person and remove tags| `edit 2 n/Betsy Crower t/` |"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::add_group[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Adding a Group: `add_group`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Creates an empty social group with given name. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format: `add_group n/GROUP_NAME m/MEMBER_IDs ...`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "A group can have any number of member_ids (including 0)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* 1 required parameter (group_name)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* CoderLifeInsights will create a new group and show a uniquely generated Group ID for the same."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Member_IDs will be added to the group and displayed if supplied while creating the group."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Create a group| `add_group n/SoC Friends` | Creates a group named `SoC Friends` and assigns a group ID, which is shown to the user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Create a group and add members into that group| `add_group n/RC Friends m/1 m/2 m/3` |"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Creates a group named `RC Friends` and assigns a group ID and the given memberIDs to the group. Both are displayed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "to the user after creation."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::add_group[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::edit_group[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Editing a Group: `edit_group`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Edit a group with a given group index +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Format: `edit_group GROUP_INDEX n/GROUP_NAME m/MEMBER_IDs`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* CoderLifeInsights will edit the group with given index to change the name to supplied name and change the list of members to the ones supplied."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Either a new name or new member(s) is required to edit the group."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Change name of 1st group|`edit_group 1 n/FOS` |Changes the name of the group with index 1 in CoderLifeInsights to `FOS` from whatever it was"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "before. Name overwritten, memberIDs remain the same as before."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Edit the members in the 1st group| `edit_group 1 m/1 m/5` | Changes the members of the group with index 1 in CoderLifeInsights to `1 and 2` from whatever"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "it was before. Member list overwritten, Name stays the same."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Change the name and members of the first group| `edit_group 1 n/new_name m/1` | Changes both the name and members of the group with index 1 in Coder Life Insights. Both values overwritten."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::edit_group[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::addEvent[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Adding an Event: `add_event`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Adds an event to a person or a group at the specified INDEX. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format for adding to a person: `add_event ACTIVITY_NAME place/PLACE_NAME time/TIME m/INDEX` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format for adding to a group: `add_event ACTIVITY_NAME place/PLACE_NAME time/TIME g/INDEX` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* TIME has to be in entered in the format `HHMM`: +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Input for a time of 1 hour and 5 minutes would be: `time/105` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Input for a time of 9 minutes would be: `time/09`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* MM entered has to be between 00 and 60 (01 to 59)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* The INDEX refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The INDEX must be a positive integer."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* CoderLifeInsights uses 1-indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "CoderLifeInsights will store the input `ACTIVITY` and `PLACE` in the Json file so that all events added are kept even through termination of CoderLifeInsights."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The input `TIME` will be added to the respective persons or events and the cumulative time spent with a person or a group is recorded and displayed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "This cumulative `TIME` is also stored to the Json file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Insights and suggestions will be generated from the saved `PLACES`, `ACTIVITIES` and `TIME`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Adding an event with a person from the fully listed persons list | `list_persons`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event Date Night place/MBS time/300 m/2`| Creates an Event Date Night at MBS with a time spent of 3 hours and adds it to the second person in CoderLifeInsights."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Adding an event with a group from the fully listed groups list| `list_groups`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event Dancing lessons place/Changi Country Club time/130 g/1` |"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Creates an Event Dancing lessons at Changi Country Club with a time spent of 1 hour and 30 minutes and adds it to the first group in CoderLifeInsights."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Adding an event to a person after using the find function |"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`find Betsy`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event Date Night place/MBS time/300 m/1`|"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Creates an Event Date Night at MBS with a time spent of 3 hours and adds it to the first result returned by the `find Betsy` command in CoderLifeInsights."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::addEvent[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Suggestions: `suggest`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Suggests a person to hang out with, a place to go or an activity to do. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format: `suggest SUGGESTION_PARAMETER`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Suggestion parameters include `person`, `activity` or `place`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* CoderLifeInsights will suggest:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** A person to hangout with."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Suggestion is based on time spent with a person."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** CoderLifeInsights will return a person which the user has spent the least time with."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** If there are multiple people with the same amount of time spent, CoderLifeInsights will return a person based on reverse-lexicographical order of the people with the least amount of time spent."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** A place to go to."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Suggestion is based on frequency of place visited from events added."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** CoderLifeInsights will return the events that happened at the suggested place which the user has visited the least in terms of frequency."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** If there are multiple places with the same frequency, CoderLifeInsights will return a random selection among the places with the same frequency."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** An activity to do."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Suggestion is based on frequency of activity done from events added."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** CoderLifeInsights will return the events that happened with the suggested activity which the user has done the least in terms of frequency."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** If there are multiple activities with the same frequency, CoderLifeInsights will return a random selection among the activities with the same frequency."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Look for a person to do something with.|`suggest person` | Returns a person to hangout with."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Look for a place to do something at.|`suggest place` | Returns events based on suggested place to go to."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Look for an activity to do.|`suggest activity` | Returns events based on suggested activity to do."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::viewGroup[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::view[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Insights: `view`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan and Mah Cai Jun, Terence]`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Displays various insights about the person\u0027s, groups and events stored in Coder Life Insights."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "terencemah"
        },
        "content": "(You might need to enlarge the application window for the best view.)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "terencemah"
        },
        "content": "This feature encompasses a range of functions which share the following format:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "terencemah"
        },
        "content": "`view INSIGHT_PARAMETER [m/PERSON_INDEX] [g/GROUP_INDEX]`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Note that the application will only accept EITHER a person index OR a group index, never both."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Also, whether an index is required or possibly not allowed depends on the insight parameter."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "terencemah"
        },
        "content": "* The available insight parameters are: `places`, `activities`, `recent`, `all`, and `time`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "terencemah"
        },
        "content": "** `Places` (must enter an index)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** This function lists all the places that the user has visited with the target person or target group, and their frequencies, in descending order of frequency."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "terencemah"
        },
        "content": ".View Places example"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewPlacesExample, align\u003d\"center\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::viewplacesexample.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "terencemah"
        },
        "content": "** `Activities` (must enter an index)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** This function lists all the activities that the user has done with the target person or target group, and their frequencies, in descending order of frequency."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "terencemah"
        },
        "content": ".View Activities example"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewActivitiesExample, align\u003d\"center\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::viewactivitiesexample.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "terencemah"
        },
        "content": "** `Recent` (can have an index or no index)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** If an index is entered, this function lists the user\u0027s last 5 events with the target person or target group, in reverse chronological order."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** If no index is entered, this function lists the user\u0027s last 5 events overall, in reverse chronological order."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** The event display features each event\u0027s place, activity, duration, and serial number."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "terencemah"
        },
        "content": ".View Recent example"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewRecentExample, align\u003d\"center\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::viewrecentexample.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "terencemah"
        },
        "content": "** \u0027All\u0027 (cannot have an index)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** This function lists all events that the user has added, in chronological order."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** The event display features each event\u0027s place, activity, duration, and serial number."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "terencemah"
        },
        "content": ".View All example"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewAllExample, align\u003d\"center\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::viewallexample.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "terencemah"
        },
        "content": "** `Time` (cannot have an index)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "terencemah"
        },
        "content": "*** This function compares the user\u0027s total time spent with individuals against his/her total time spent with groups, in the form of a pie chart."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "terencemah"
        },
        "content": ".View Time example"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[#ViewTimeExample, align\u003d\"center\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::viewtimeexample.png[][pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Take note that Places and Activities are case-sensitive:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "terencemah"
        },
        "content": "* `Swimming Pool` and `swimming pool` are considered different places"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "terencemah"
        },
        "content": "* `SWIMMING` and `swimming` are considered different activities"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "terencemah"
        },
        "content": "The examples below provide an exhaustive list of permissible command formats:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "terencemah"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c70%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "terencemah"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view places m/1`|View places visited with person 1 from the active person list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view places g/1`|View places visited with group 1 from the active group list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view activities m/1`|View activities done with person 1 from the active person list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view activities g/1`|View activities done with group 1 from the active group list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view recent`|View the last 5 events overall."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view recent m/1`|View the last 5 events with person 1 from the active person list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view recent g/1`|View the last 5 events with group 1 from the active group list."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view all`|View all events the user has added to Coder Life Insights."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "terencemah"
        },
        "content": "|`view time`|View a pie chart displaying the proportion of individual time vs group time spent."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::view[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "// end::viewGroup[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"40%,\u003c20%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Find all persons whose name contains John| `find John` | Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Find all persons whose name contains \u0027Betsy\u0027, \u0027Tim\u0027 or \u0027John\u0027| `find Betsy Tim John` |Returns all persons having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Import Life CSV: `import`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports your existing Life CSV into the application +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format: `import l/LIFE_FILE_PATH g/GROUP_FILE_PATH e/EVENT_FILE_PATH`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Imports your existing Life contacts into the application."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* An existing CSV file exported from CoderLifeInsights must exist before import."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* LIFE_FILE_PATH, GROUP_FILE_PATH and EVENT_FILE_PATH must match your existing file path."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* ALL three parameters must be specified for successful import."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"40%,\u003c20%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Import Life from file \"life.csv\", group data from \"groups.csv\" and event data from \"events.csv\""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| `import l/life.csv +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "g/groups.csv +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e/events.csv` |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports your Life from `life.csv` , group data from `groups.csv` and event data from `events.csv`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Import Life from file \"life.csv\", \"groups.csv\" and \"events.csv\" at specific file path |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`import l/C:\\Users\\User\\Documents\\life.csv +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "g/C:\\Users\\User\\Documents\\groups.csv +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e/C:\\Users\\User\\Documents\\events.csv` |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports your Life from `C:\\Users\\Harry\\Desktop\\Documents\\life.csv` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ", your Group from `C:\\Users\\User\\Documents\\groups.csv` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "and your Events from `C:\\Users\\User\\Documents\\events.csv`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Import Life from file \"life.csv\", \"groups.csv\" and \"events.csv\"  at specific file path"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| `import l/./Desktop/life.csv +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "g/./Desktop/groups.csv +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "e/./Desktop/events.csv` |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Imports your Life from `./Desktop/life.csv` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ", your Group from `./Desktop/groups.csv` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "and your Events from `./Desktop/events.csv`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d Retrieving File Path"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For Windows:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Navigate to the file where you saved CoderLifeInsights data files."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Click on the address bar of File Explorer window."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Refer to the diagram below for reference."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".File path finding in Windows"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#RetrievingFilePathWindows, align\u003d\"center\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::windowsPathFinding.png[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For Mac:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Navigate to the file where you saved CoderLifeInsights data files."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Right-click on the CSV File and select `Get info`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Refer to the diagram below for reference."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".File path finding in MacOS"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#RetrievingFilePathMac, align\u003d\"center\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::macPathFinding.png[pdfwidth\u003d\"50%\",width\u003d\"50%\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d CSV File Constraints"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For `Life.csv`:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Before using the `import` command with `Life.csv`, please ensure the following headers are present."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `name`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `phone`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `email`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `address`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `tagged`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `time`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `places`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `activities`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Refer to image below for reference:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Example Life.csv format"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#CSVFileConstraintsLife, align\u003d\"center\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::lifeCSVFormat.png[pdfwidth\u003d\"70%\",width\u003d\"70%\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`Tags`, `Places` and `Activities` should be separated by a semi-colon."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `friends;school-mate`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `Orchard;NUS`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `Gym;Rock-Climbing`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For `Groups.csv`:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Before using the `import` command with `Groups.csv`, please ensure the following headers are present."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `name`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `groupId`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `timeSpent`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `memberIDs`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `eventIDs`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* `places`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* `activities`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Example Groups.csv format"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#CSVFileConstraintsGroups, align\u003d\"center\"]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::eventCSVFormat.png[pdfwidth\u003d\"70%\",width\u003d\"70%\"]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`memberIDs`, `eventIDs` should be separated by a semi-colon."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `1;2;3`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `5;6`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "For `Events.csv`:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Before using the `import` command with `Events.csv`, please ensure the following headers are present."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `eventId`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `activity`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `place`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `withPerson`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `withGroup`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* `time`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Example Events.csv format"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#CSVFileConstraintsEvents, align\u003d\"center\"]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "image::eventCSVFormat.png[pdfwidth\u003d\"70%\",width\u003d\"70%\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Export Life CSV: `export`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Exports your existing Life into a CSV file. +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format: `export l/LIFE_FILE_NAME g/GROUP_FILE_NAME e/EVENT_FILE_NAME`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Exports your existing Life contacts, group data and event data into 3 CSV files respectively."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* Specify the file name you want to export for life, group and event data."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* ALL three parameters must be specified for successful export."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* On the very first run of CoderLifeInsights, this command is invalid as there is no saved data and CoderLifeInsights is using a sample data file to display sample contacts."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Please proceed to add events, groups or persons before trying to export the information to the respective CSV files."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| Example | Command | Result"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Export current life, group and event data | `export l/life.csv g/groups.csv e/events.csv` |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Exports your Life to `life.csv` +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Exports your group data to `groups.csv` +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Exports your event data to `events.csv`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Deleting a Person or a Group : `delete`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Deletes an entity, such as a Person or Group from the CoderLifeInsights +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Format: `delete_person PERSON_INDEX` (for person) +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`delete_group GROUP_INDEX` (for group)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Remarks: CoderLifeInsights uses 1-indexing."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|Example| Command | Result"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Delete the 2nd person in the fully listed persons list|`list_persons` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`delete_person 2` | Deletes the 2nd person in CoderLifeInsights."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Delete the 2nd group in the fully listed groups list| `list_groups` +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`delete_group 2` | Deletes the 2nd group in CoderLifeInsights."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|Find a person and delete the person from the list returned|`find Betsy` +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`delete_person 1` | Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "//end::delete[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Clears all entries from the CoderLifeInsights. +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "CoderLifeInsights data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Getting a random person: `random` `[coming in v2.0]`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Finds a random person from contacts saved in CoderLifeInsights. +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Format: `random`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* No additional parameters required."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* CoderLifeInsights will return the name of a random contact that is saved in CoderLifeInsights."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* Selection of contact is completely random with no parameters used for selection."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "****"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* `random` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Returns the name of a random person saved in CoderLifeInsights."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Deleting an event: `delete_event` `[coming in v2.0]`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Deletes an event from a person or group saved in CoderLifeInsights. +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Format: `delete_event EVENTID m/INDEX` or `delete_event EVENTID g/INDEX`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Editing an event: `edit_event` `[coming in v2.0]`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Ernest Lian Qi Quan]`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Edit the information of an event with a person or group saved in CoderLifeInsights. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Format: `edit_event EVENTID m/INDEX [activity/ACTIVITY] [place/PLACE] [time/TIME]` or `edit_event EVENTID g/INDEX [activity/ACTIVITY] [place/PLACE] [time/TIME]` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Edits the event\u0027s respective details to the one specified in the command."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Toggle command shortcuts : `toggle shortcuts` `[coming in v2.0]`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Enable toggle command shortcuts to have commands shortened."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Instead of `add_group`, `ag` would suffice when adding groups to CoderLifeInsights +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Format `toggle shortcuts`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Find group command : `find_group` `[coming in v2.0]`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`[written by: Raivat Bhupesh Shah]`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Enable searching for groups with specified keyword. The feature would match the given keyword with group indexes and then update"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This feature will be useful when there are at least a certain number of groups. +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Format: `find_group keyword`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CoderLifeInsights folder."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`[written by: Cheng Lit Yaw]`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"30%,\u003c30%,\u003c40%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "| Feature | Usage | Example |"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Add Person* | `add_person n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` |"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_person n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` |"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*List* | `list_LIST_PARAMETER` | `list_persons`, `list_groups`|"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Edit* | `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`|"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`edit 1 p/91234567 e/johndoe@example.com`|"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Add Group*| `add_group n/GROUP_NAME m/MEMBER_INDEX`| `add_group n/SoC Friends` +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_group n/RC Friends m/1 m/2 m/3`|"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Edit Group* | `edit_group GROUP_INDEX n/GROUP_NAME m/MEMBER_INDEXs` |"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`edit_group 1 n/FOS` +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`edit_group 1 m/1 m/5` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`edit_group 1 n/new_name m/1` |"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Add Event* |`add_event ACTIVITY_NAME place/PLACE_NAME time/TIME m/INDEX` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "or +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event ACTIVITY_NAME place/PLACE_NAME time/TIME g/INDEX`|"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`list_persons` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event Date Night place/MBS time/300 m/2` +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "or +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`list_groups` +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`add_event Dancing lessons place/Changi Country Club time/130 g/1` |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Suggest* | `suggest SUGGESTION_PARAMETER` |  `suggest person` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`suggest place` +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`suggest activity`|"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*View* | `view INSIGHT_PARAMETER [m/PERSON_INDEX] [g/GROUP_INDEX]` | `view places m/1` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`view activity g/1` +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`view time` +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`view recent` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`view all`|"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Find* | `find KEYWORD [MORE_KEYWORDS]` |  `find John` |"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Import* | `import l/LIFE_FILE_PATH g/GROUP_FILE_PATH e/EVENT_FILE_PATH` |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`import l/life.csv"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " g/groups.csv"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " e/events.csv`|"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Export* | `export l/LIFE_FILE_NAME g/GROUP_FILE_NAME e/EVENT_FILE_NAME` |"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`export l/life.csv g/groups.csv e/events.csv` |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*Delete* | `delete_person PERSON_INDEX`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "or +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "`delete_group GROUP_INDEX`| `list_persons` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`delete_person 2` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "or +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`list_groups` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "`delete_group 2`|"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Clear* | `clear`||"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*Exit* | `exit`||"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32,
      "terencemah": 60,
      "harrychengly": 387,
      "l2ejected": 89,
      "-": 131
    }
  },
  {
    "path": "docs/team/harrychengly.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d Cheng Lit Yaw - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d PROJECT: CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "CoderLifeInsights (CLI) is a desktop application that provides you insights and suggestions to your social life as a programmer using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d My Role"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "I am responsible to complete the import, export features as well as the suggestion and time insights feature. Besides that I am also tasked to improve the Graphical User Interface (GUI) of the application. I have also made notable contributions to the User Guide and Developer Guide."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Listed in the table below are some notations that are used throughout the document."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ".Legend table"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[#Legend]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"^15%,85%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a| *Icon* | *Description*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a| `command` | Command that can be executed, or a component, class or object in the architecture of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\", size\u003d\"2x\"] | Tips that might be helpful in navigating the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note blue\", size\u003d\"2x\"] | Important information that should be noted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "a| \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d\u003d | Useful information for a deeper understanding of the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "As shown in \u003c\u003cLegend\u003e\u003e, these icons associated to their following descriptions, such as commands, tips, important information and useful information, enable greater clarity in understanding the document. Note that useful information will have text enclosed in its box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Major enhancements:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Major enhancement #1*: Implemented import \u0026 export features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** What it does: It allows the user to save his CoderLifeInsights data in an external file and modifies the data before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "importing it back into the application. It also allows the user to change between computers without a fear of"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "losing his CoderLifeInsights data."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Justification: This feature improves the product significantly as the user may have existing data before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "starting to use the application and to export the CoderLifeInsights data if he/she would like to change between multiple"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "computers."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Highlights: This enhancement functions well with existing commands as it adds more CoderLifeInsights into the list,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "all the other features such as groups, and events are updated as well. It required an in-depth analysis"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "of design alternatives."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Credits: [https://github.com/FasterXML/jackson[Jackson]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Major enhancement #2*: Implemented suggestion features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** What it does: It allows the user to suggest a person, place or activity from based on their existing CoderLifeInsights data."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Suggestion of person would return one person that the user spends the least time with sorted by lexicographical order of name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Suggestion of place would return one place that the user visits the least in terms of frequency."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "Suggestion of activity would return one activity that the user does the least in terms of frequency."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Justification: This feature improves the product significantly simplifies the process when deciding a person to hangout with, a place to go to or an activity to do."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Highlights: This enhancement functions well with existing commands. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d\u003d Minor enhancements:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Minor enhancement #1*: Redesigned user interface"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** What it does: This enhancement allows the application to have a better-looking, more user-friendly colour"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "theme as well as allows the application window size to be resizeable."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Justification: To better fit and light up the social life as a Coder, it would be more pleasing to view the application in a brighter color as"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "compared to the dark theme provided in AddressBook - Level3."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Highlights: Window size is adjustable to fit all components in to the desired smaller window size. It allows the user to use the application in full screen mode or as a smaller window without disruption of coding productivity."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Minor enhancement #2*: Added view time insights feature"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** What is does: This enhancement allows users to be able to view insights of individual time spent vs group time spent in the form of a pie chart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Justification: Users are able to gain knowledge on whether they spend more time with individuals or group as a whole."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Highlights: This enhancement functions well with existing commands. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Code contributed*:[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dharrychengly\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Created all major milestones on GitHub page"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Updated the GUI color scheme and layout (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/95[#95], https://github.com/AY1920S2-CS2103-W14-4/main/pull/69[#69])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Added contents of the User Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/12[#12], https://github.com/AY1920S2-CS2103-W14-4/main/pull/13[#13])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Added contents of the Developer Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/74[#74], https://github.com/AY1920S2-CS2103-W14-4/main/pull/80[#80])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** PRs reviewed: https://github.com/AY1920S2-CS2103-W14-4/main/pull/11[#11]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Integrated Netlify for the team repo to allow continuous deployment of documentation previews"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "*** Assisted in integrating Codeacy to allow continuous deployment of code quality."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "harrychengly": 117
    }
  },
  {
    "path": "docs/team/l2ejected.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d Ernest Lian (l2ejected) - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d PROJECT: CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "CoderLifeInsights is a CLI (Command Line Interface) driven desktop application that a programmer can use to record his or her social interactions with individual friends, or group of friends. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "CoderLifeInsights gives the programmer insights into his or her social life, and provides suggestions to liven up their social life by analysing the social events recorded in CoderLifeInsight through the CLI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d My Role"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "I was tasked to implement the AddEventCommand with its relevant classes, namely the Time, PlaceList and ActivityList classes. I also made the inputs from the aforementioned command savable to the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "This command and its implementation is the backbone of all our relevant features."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "I also made minor changes to the GUI displays, as well as contributions to the Developers\u0027 Guide and User Guide."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Listed in the table below are some notations that are used throughout the document."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ".Legend table"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[#Legend]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"^15%,85%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "a| *Icon* | *Description*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "a| `command` | Command that can be executed, or a component, class or object in the architecture of the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\", size\u003d\"2x\"] | Tips that might be helpful in navigating the application"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note blue\", size\u003d\"2x\"] | Important information that should be noted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "a| \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d\u003d | Useful information for a deeper understanding of the command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "As shown in \u003c\u003cLegend\u003e\u003e, these icons associated to their following descriptions, such as commands, tips, important information and useful information, enable greater clarity in understanding the document. Note that useful information will have text enclosed in its box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Major enhancements:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Major enhancement #1*: Implemented Add Event feature for a Person"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** What it does: It allows the user to add an event with a person. An event consists of an activity, a place, and a time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "These relevant fields and information, namely the [ACTIVITY], [PLACE], and [TIME], are added to the person the event is created with and are saved to the hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Justification: This feature improves the product significantly as the user may add events with persons in CoderLifeInsights."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The relevant information from the events added are used in other features."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "The information being saved to the hard disk allows the user to make use of features through different uses."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Highlights: This enhancement functions well with existing commands as it updates each Person with a Time, PlaceList and ActivityList variable that represents the time the user has spent with that person, the activities done with that person, and the places been to with that person respectively, in CoderLifeInsights which is displayed in each person\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "It also saves the added information to the hard disk. Many improvements and features such as Insights and Suggest stem from the data recorded by this command in the Person and Group objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "It required an in-depth analysis of design alternatives. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "This major enhancement took much effort as it required the implementation of 3 new classes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "These 3 classes were used in the two entities, Person and Group."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Also, the attributes added to the Person and Group class were also implemented in a way such that it would be saved to the Json file, as well as work with the import and exporting features."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Significant architectural analysis was required to ensure these classes worked they way they were intended and did not break existing features of AB3 as they were integrated into the Person object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Furthermore, the data stored in these attributes were the backbone of a majority of all other features, which generated output through analysis of the data stored."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d\u003d Minor enhancements:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Minor enhancement #1*: Integrated the Add Event feature with the Import and Export feature."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** What it does: This enhancement made the Add Event feature work with the Import and Export features, allowing the information added and saved by this command to be imported and exported."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Justification: This feature allows the user to not lose information from events added when switching computers."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Highlights: This enhancement functions well with existing commands. It required an in-depth analysis of design alternatives. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "This allowed the Time, PlaceList and ActivityList of each person saved in the Json file to be converted successfully to the CSV file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Minor enhancement #2*: Made the Add Event feature function properly with groups."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** What it does: This enhancement made the Add Event feature work with a Group object, and made information keyed in by users with the AddEventCommand function savable to the hard disk"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Justification: This feature allows the user to add events with groups, on top of persons. The relevant information saved to the hard disk is required for other functions to generate their output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Highlights: This enhancement functions well with existing commands. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Minor enhancement #3*: Implementation of Insights feature for groups `view_groups` [Refactored into the view command by @terencemah in PR: https://github.com/AY1920S2-CS2103-W14-4/main/pull/173[#173]]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** What it does: This enhancement allows the user to view the places visited and the activities done with a particular group. It also lists the number of times been to each place and number of times each activity is carried out with the group."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Justification: This feature gives the user insights on the favourite places and activities of each group of friends in CoderLifeInsights."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Highlights: This enhancement functions well with existing commands. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Minor enhancement #4*: Integration of the PlaceList and ActivityList classes with the Group entity"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** What it does: This enhancement integrated the PlaceList and ActivityList into the Group object. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "It allowed relevant information to be added to a Group object, as well as ensured that the relevant data was stored to the Group object and Json file as well."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Highlights: This enhancement functions well with existing commands and features. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Code contributed*:[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dl2ejected\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Tasked to ensure deliverables were submitted and deadlines were met by all members of the group."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Tasked to test and discover potential bugs in the software."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Tasked to ensure documentation for all code is written, as well as ensuring that the User Guide is understandable and not confusing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Created the interim Event container class"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Implemented the AddEventCommand which adds an Event( which consists of an Activity, a Place and a Time) to a Person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Created a Time variable and made it savable for each Person object through updates via the AddEventCommand"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Created a PlaceList variable and made it savable for each Person object through updates via the AddEventCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Created an ActivityList variable and made it savable for each Person object through updates via the AddEventCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Added the PlaceList and ActivityList variables to groups and made them savable for each Group object through updates via the AddEventCommand"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Added and revised contents of the User Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/53[#53], https://github.com/AY1920S2-CS2103-W14-4/main/pull/94[#94], https://github.com/AY1920S2-CS2103-W14-4/main/pull/128[#128], https://github.com/AY1920S2-CS2103-W14-4/main/pull/160[#160], https://github.com/AY1920S2-CS2103-W14-4/main/pull/172[#172])"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** Added contents of the Developer Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/79[#79], https://github.com/AY1920S2-CS2103-W14-4/main/pull/160[#160], https://github.com/AY1920S2-CS2103-W14-4/main/pull/172[#172])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "*** PRs reviewed: (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/86[#86], https://github.com/AY1920S2-CS2103-W14-4/main/pull/131[#131], https://github.com/AY1920S2-CS2103-W14-4/main/pull/136[#136])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|_Shown below are the sections I contributed to in the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddEvent]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviewGroup]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|_Shown below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddEvent]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duseCaseAddEvent]"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 125
    }
  },
  {
    "path": "docs/team/raivatshah.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d Raivat Shah - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d PROJECT: CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "CoderLifeInsights (CLI) is a desktop application that provides you insights and suggestions to your social life as a programmer using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d My Role"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "I am responsible to complete the features related to group and overall system design. Furthermore, I\u0027ve worked extensively on the storage package and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "developed the JSON implementations for group and event classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "I have also made notable contributions to the User Guide and Developer Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Major enhancements:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Major enhancement #1*: Implemented group features - `add_group`, `delete_group`, `edit_group` and `list_groups`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** What they do: They allow the user of CoderLifeInsights to add a social group, delete a social group or edit the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "group for adding/removing members or changing the name of the group. The `list_group` command lists all the groups in the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "It was planned and implemented in anticipation of a `find_group` command in the future that could change the group list view in the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Justification: A social group is a crucial aspect of the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "CoderLifeInsights app as it allows the users to distinguish between time spent in group interactions and individual,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "one-to-one interactions. The group features are essential to record and track data regarding social groups. The commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "are implemented similar to `add_person`, `delete_person` and `edit_person`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "features of the addressbook3 due to the clear design and defensive programming style."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Highlights: This enhancement functions well with existing commands and adds a crucial ability to add social groups. It required an in-depth analysis"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "of design alternatives."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Credits: As highlighted above, the group features take inspiration from the person features of addressbook3. Thus,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "credits go to the previous developers of addressbook3 for the system design and class structures."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Major enhancement #2*: Implemented storage features - JSON Implementations for Event and Group"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** What it does: JSON implementations allow the app to store and retrieve data from file. This is crucial as the app is"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "not expected to always run and needs to store data in the hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Justification: Using the JSON implementations, the app can go back to its last state when a user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "re-launches the app."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Highlights: This enhancement required an in-depth understanding of JSON and Java Data structures in order to convert"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "between Java Classes such as `Group` and `Event` and JSON implementations which stored strings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d\u003d Minor enhancements:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Minor enhancement #1*: Implemented Unique Event List"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** What it does: Stores unique Event instances"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Justification: Since events are crucial to social interactions, storing events is important for the purpose of tracking."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Highlights: This enhancement required an in-depth understanding of the JavaFX Observable class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Minor enhancement #2*: Implemented Time Class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** What is does: Allows the user to store a specific time spent in terms of number of hours and minutes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Justification: The constraints the in the class allow for efficient management of time format, which suites the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "customised need of the app."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Highlights: This enhancement functions well with all the classes that depend upon it and use it. This required a"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "thorough understanding of the different use cases."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Code contributed*:[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003draivatshah\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[tP Dashboard]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Functional Code Contributed:*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Model: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/model/group/Group.java[Group]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/model/group/UniqueGroupList.java[UniqueGroupList]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/model/person/Time.java[Time]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/model/event/UniqueEventList.java[UniqeEventList]],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** UI: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/ui/GroupCard.java[GroupCard]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/ui/GroupListPanel.java[GroupListPanel]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Storage: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/storage/JsonAdaptedEvent.java[JsonAdaptedEvent]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/storage/JsonAdaptedGroup.java[JsonAdaptedGroup]]."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Logic: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/logic/commands/AddGroupCommand.java[AddGroupCommand]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java[DeleteGroupCommand]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/logic/commands/EditGroupCommand.java[EditGroupCommand]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/main/java/seedu/address/logic/commands/ListGroupCommand.java[ListGroupCommand]] and their parsers."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Test Code Contributed:*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Model: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/model/group/GroupTest.java[GroupTest]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/model/group/UniqueGroupListTest.java[UniqueGroupList]]."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Logic: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java[AddCommandTest]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/logic/commands/ListGroupCommandTest.java[ListGroupCommandTest]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java[DeleteGroupCommandTest]], [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java[EditGroupCommandTest]] and parser tests."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** TestUtil: [https://github.com/AY1920S2-CS2103-W14-4/main/blob/master/src/test/java/seedu/address/testutil/GroupBuilder.java[GroupBuilder]],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "* *Other contributions:*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Initiated group meetings and set policies for Pull Requests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Opened issues on Github repo to account for bugs and enhancements. Some relevant/important issues:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/issues/162[#162],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/issues/161[#161],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/issues/129[#129],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/issues/130[#130]."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Updated command words for existing features in order distinguish between person and group commands."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Added contents of the User Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/96[#96], https://github.com/AY1920S2-CS2103-W14-4/main/pull/54[#54], https://github.com/AY1920S2-CS2103-W14-4/main/pull/175[#175])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Added contents of the Developer Guide (Pull requests: https://github.com/AY1920S2-CS2103-W14-4/main/pull/26[#26], https://github.com/AY1920S2-CS2103-W14-4/main/pull/76[#76], https://github.com/AY1920S2-CS2103-W14-4/main/pull/167[#167], https://github.com/AY1920S2-CS2103-W14-4/main/pull/174[#174])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Reviewed and Merged PRs such as: https://github.com/AY1920S2-CS2103-W14-4/main/pull/74[#74],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/pull/95[#95],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/pull/132[#132],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-4/main/pull/166[#166]."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Integrated https://www.codacy.com/[Codacy] to automate code quality checks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** Used Creately to create initial class diagrams to visualise the relationship between Objects (Person, Group, Event)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "and their UniqueLists. The diagram can be viewed https://app.creately.com/diagram/SaOxsebie1n/[here.]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "** Rough UI:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "*** To visualise the app UI before actually creating it, I used https://www.sketch.com/[Sketch App] to create a"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "rough UI of the app. The team used the rough UI as a guide. The UI can be viewed https://www.raivat.dev/UI.pdf[here.]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd_group]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit_group]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dadd_group]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddelete_group]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlist_group]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dedit_group]"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 130
    }
  },
  {
    "path": "docs/team/terencemah.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003d Mah Cai Jun, Terence - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003d\u003d PROJECT: CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Coder Life Insights is a social application that helps users keep track of their friends and the time spent with them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Optimized for users who prefer using the command line interface, the main intended beneficiaries of this app"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "are computing professionals and students, who could use regular reminders to take some time away from the screen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "to share with their friends."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003d\u003d My Role"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "In this project, I was assigned the implementation of Coder Life Insights’ eponymous Insights function,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "which allows users to view various kinds of insights about the persons, groups and events that they have added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "and stored on the application. While it is one independent feature, it is made up of several sub-features,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "each having their own keywords and functions. With these functions, users can see a list of places they have visited"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "or activities they have done with selected persons or groups, ranked by their frequencies. Users can also view"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "their 5 most recently added events, whether with a particular person or group, or overall."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Having implemented this function, I was mainly responsible for the documentation of this feature,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "and updated the corresponding sections of the User Guide and Developer Guide accordingly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "To illustrate its implementation, I designed the following three UML diagrams:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "•\tView Command Generic Sequence Diagram"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "•\tView Command Condensed Generic Sequence Diagram"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "•\tView Command Class Diagram"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "On top of my own features, I also contributed to common sections of the Developer Guide,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "updating the original architecture diagram for the app’s UI component to reflect its new features, as well as its explanation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "Implementation-wise, being responsible for the ‘view’ function, I helped my team to build the foundations for the UI implementation,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "by coming up with the design of having the MainWindow UI controller switch between different view panels based on"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "a ViewType variable input from the CommandResult. Correspondingly, I also got us started with the first few GUI display panels (.fxml files)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "I have also been diligent in analyzing the team’s code for bugs and deficiencies in system design to ensure that we continue"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "to have a clear code base to build off. Nonetheless, I must acknowledge that I have not had enough consistent time to put"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "into this project, and my teammates have definitely contributed more than me to the shared components of this project,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "and its overall direction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "* *Code contributed*: [https://tinyurl.com/vhcyq52]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terencemah": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        appParameters.setConfigPath("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eThis is a workaround for the following error when MainApp is made the entry point of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eError: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eThe reason is that MainApp extends Application. In that case, the LauncherHelper will check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * module system so it can\u0027t find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eBy having a separate main class (Main) that doesn\u0027t extend Application to be the entry point"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * of the application, we avoid this issue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CoderLifeInsights ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * not found, or an empty address book will be used instead if errors occur when reading {@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CoderLifeInsights\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"Config file at \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + configFilePathUsed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"UserPrefs file at \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + prefsFilePath"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        logger.info(\"Starting CoderLifeInsights \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CoderLifeInsights ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 24,
      "harrychengly": 8,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { // this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \"The person index provided is invalid.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \"The group index provided is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Path provided must exist.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 2,
      "harrychengly": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new Version("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003e{@code Index} should be used right from the start (when parsing in a new user input), so that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * if the current component wants to communicate with another component, it can send an {@code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Index} to avoid having to know what base the other component is using for its index. However,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * after receiving the {@code Index}, that component can convert it back to an int if the index will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static ObjectMapper objectMapper \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            new ObjectMapper()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    .findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    .registerModule("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * file is a valid json file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                   given here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * \u003cp\u003eReturns null if there are no matches"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 19,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * match is required. \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * examples:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return value \u003e 0"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of groups"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of events"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cEventDescriptor\u003e getFrequencyList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cRecentEvent\u003e getRecentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cTime\u003e getTimeList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "terencemah": 6,
      "harrychengly": 12,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return model.getFrequencyList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return model.getRecentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return model.getTimeList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "terencemah": 12,
      "harrychengly": 12,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_person\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"98765432 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"johnd@example.com \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"owesMoney\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Represents the command to add a new event to CoderLifeInsights."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an event with a group or an individual \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"that adds an activity, place and time to the subject. \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: ACTIVITY \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"PLACE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_MEMBER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"TIME \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"OR \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: ACTIVITY \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"PLACE \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_GROUP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"TIME \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \" Dancing \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"SCAPE \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + PREFIX_MEMBER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"300\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_INPUT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            \"Time parameter needs to be unsigned integers of at least 2 digits.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"For example: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[5 minutes \u003d 05]; \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[1 hour \u003d 100]; \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[10 hours and 30 minutes \u003d 1030]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Time parameter has to be greater than 0 minutes.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event successfully added: %1$s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Event with given arguments already exists. Please try again.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Activity: %1$s, Index: %2$d, Place: %3$s, Time: %4$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddEventCommand.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.toAdd \u003d event;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (toAdd.getTime().equals(new Time(0, 0))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (toAdd.getWithPerson().isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // edit person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d toAdd.getWithPerson().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person toEdit \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Person to edit is \" + toEdit.getName().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time curr \u003d toEdit.getTime();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Time newTime \u003d curr.addTime2(toAdd.getTime().getMinutes(), toAdd.getTime().getHours());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            PlaceList currentPlaceList \u003d toEdit.getPlaceList2();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            PlaceList newPlaceList \u003d currentPlaceList.addPlace(toAdd.getPlace());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ActivityList currentActivityList \u003d toEdit.getActivityList2();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ActivityList newActivityList \u003d currentActivityList.addActivity(toAdd.getActivity());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList currentTimeList \u003d toEdit.getTimeList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList newTimeList \u003d currentTimeList.addTime(toAdd.getTime().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person editedPerson \u003d new Person(toEdit.getName(), toEdit.getPhone(), toEdit.getEmail(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    toEdit.getAddress(), toEdit.getTags(), newTime, newPlaceList, newActivityList, newTimeList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Edited person is \" + editedPerson.getName().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.setPerson(toEdit, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.addEvent(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // edit group"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d toAdd.getWithGroup().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Group toEdit \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time curr \u003d toEdit.getTimeSpent();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Time newTime \u003d curr.addTime2(toAdd.getTime().getMinutes(), toAdd.getTime().getHours());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            PlaceList currentPlaceList \u003d toEdit.getPlaceList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            PlaceList newPlaceList \u003d currentPlaceList.addPlace(toAdd.getPlace());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ActivityList currentActivityList \u003d toEdit.getActivityList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ActivityList newActivityList \u003d currentActivityList.addActivity(toAdd.getActivity());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList currentTimeList \u003d toEdit.getTimeList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList newTimeList \u003d currentTimeList.addTime(toAdd.getTime().toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            Group editedGroup \u003d new Group(toEdit.getName(), newPlaceList, newActivityList, newTimeList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            editedGroup.setMemberIDs(toEdit.getMembers());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            editedGroup.setTimeSpent(newTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editedGroup.setMemberIDs(toEdit.getMembers());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArrayList\u003cInteger\u003e events \u003d toEdit.getEvents();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            events.add(toAdd.getEventId());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editedGroup.setEventIDs(events);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.setGroup(toEdit, editedGroup);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.addEvent(toAdd);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ViewType.GROUPS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof AddEventCommand)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand e \u003d (AddEventCommand) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.toAdd.getActivity().equalsIgnoreCase(e.toAdd.getActivity())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getPlace().equalsIgnoreCase(e.toAdd.getPlace())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getTime().equals(e.toAdd.getTime())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getWithGroup().equals(e.toAdd.getWithGroup())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getWithPerson().equals(e.toAdd.getWithPerson());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 72,
      "terencemah": 8,
      "l2ejected": 93,
      "harrychengly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the command to add a new group to CoderLifeInsights."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_group\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Adds a new social group with given name and \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"given (if any) person IDs as members\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Name: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" Members]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"SoC Friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"3 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Group with given name already exists. \" + \"Please try again with another name\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"Person(s) with given index does not exist\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBERS \u003d \"Group contains duplicate member indexes. Please try again \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            + \"with unique member indexes.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Group toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddGroupCommand(Group group) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.toAdd \u003d group;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (model.hasGroup(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e members \u003d toAdd.getMembers();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (set.size() \u003c members.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBERS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int currIndex \u003d members.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (currIndex \u003e lastShownList.size() || currIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.addGroup(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ViewType.GROUPS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof AddGroupCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand otherCommand \u003d (AddGroupCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 96,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CoderLifeInsights has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ViewType viewType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public CommandResult(String feedbackToUser, ViewType viewType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * set to their default value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this(feedbackToUser, ViewType.NORMAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewType getViewType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return viewType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 viewType \u003d\u003d otherCommandResult.viewType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return Objects.hash(feedbackToUser, viewType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 8,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_person\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastGroupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Group group: lastGroupList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cInteger\u003e currMembers \u003d group.getMembers();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Index to remove is \" + targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            boolean groupChanged \u003d currMembers.remove(Integer.valueOf(targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (groupChanged) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                Group editedGroup \u003d new Group(group.getName(), group.getPlaceList(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        group.getActivityList(), group.getTimeList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setTimeSpent(group.getTimeSpent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArrayList\u003cInteger\u003e newMembers \u003d new ArrayList\u003c\u003e(currMembers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setMemberIDs(newMembers);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setEventIDs(group.getEvents());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.setGroup(group, editedGroup);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "terencemah": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Deletes a group identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_group\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Deletes the group identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DeleteGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof DeleteGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"PHONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"EMAIL] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"91234567 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"This person already exists in the Coder Life Insights.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //logger"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditCommand.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"edited person\u0027s phone is \" + editedPerson.getPhone().value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"edited person\u0027s email is \" + editedPerson.getEmail().value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static Person createEditedPerson("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time updatedTime \u003d editPersonDescriptor.getTime().orElse(personToEdit.getTime());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        PlaceList updatedPlaceList \u003d editPersonDescriptor.getPlaceList().orElse(personToEdit.getPlaceList2());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ActivityList updatedActivityList \u003d editPersonDescriptor.getActivityList().orElse(personToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .getActivityList2());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        TimeList updatedTimeList \u003d editPersonDescriptor.getTimeList().orElse(personToEdit.getTimeList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedTime,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                updatedPlaceList, updatedActivityList, updatedTimeList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private PlaceList placeList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private ActivityList activityList;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        private TimeList timeList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setPlaceList(toCopy.placeList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setActivityList(toCopy.activityList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, time, placeList, activityList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setPlaceList(PlaceList placeList) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.placeList \u003d placeList;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cPlaceList\u003e getPlaceList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return (placeList !\u003d null) ? Optional.ofNullable(placeList) : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cActivityList\u003e getActivityList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return (activityList !\u003d null) ? Optional.ofNullable(activityList) : Optional.empty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        public void setTimeList(TimeList timeList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            this.timeList \u003d timeList;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        public Optional\u003cTimeList\u003e getTimeList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return (timeList !\u003d null) ? Optional.ofNullable(timeList) : Optional.empty();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getPlaceList().equals(e.getPlaceList())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getActivityList().equals(e.getActivityList());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 45,
      "terencemah": 12,
      "l2ejected": 44,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the command to edit a group in Coder Life Insights."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_group\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Edits the details of the group identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"by the index number used in the displayed group list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"MEMBERS]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"SoC Friends \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"7\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_EDIT_GROUP_SUCCESS \u003d \"Edited Group: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one edit field must be provided to edit a group\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in Coder Life Insights\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBERS \u003d \"Group contains duplicate member indexes. Please try again \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            + \"with unique member indexes.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"Person(s) with given index does not exist\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final EditGroupDescriptor editGroupDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupCommand(Index index, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(editGroupDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.editGroupDescriptor \u003d editGroupDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //check if member indexes are valid"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (editGroupDescriptor.getMemberIds().isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArrayList\u003cInteger\u003e members \u003d editGroupDescriptor.getMemberIds().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (set.size() \u003c members.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MEMBERS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int currIndex \u003d members.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                if (currIndex \u003e lastPersonList.size() || currIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group editedGroup \u003d createEditedGroup(groupToEdit, editGroupDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!groupToEdit.equals(editedGroup) \u0026\u0026 model.hasGroup(editedGroup)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.setGroup(groupToEdit, editedGroup);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_GROUP_SUCCESS, editedGroup));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates and returns a {@code Group} with the details of {@code groupToEdit}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param groupToEdit"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param editGroupDescriptor"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static Group createEditedGroup(Group groupToEdit, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert groupToEdit !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Name updatedName \u003d editGroupDescriptor.getName().orElse(groupToEdit.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time oldTime \u003d groupToEdit.getTimeSpent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (editGroupDescriptor.getMemberIds().isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIds \u003d editGroupDescriptor.getMemberIds().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIds \u003d groupToEdit.getMembers();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e eventIds \u003d groupToEdit.getEvents();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Group modifiedGroup \u003d new Group(updatedName, groupToEdit.getPlaceList(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                groupToEdit.getActivityList(), groupToEdit.getTimeList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setTimeSpent(oldTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setMemberIDs(memberIds);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setEventIDs(eventIds);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return modifiedGroup;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Stores the details to edit the group with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * of the specified group."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static class EditGroupDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditGroupDescriptor() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditGroupDescriptor(EditGroupDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            setMemberIds(toCopy.memberIds);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Checks if at least one field is edited by user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, memberIds);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return Optional.ofNullable(this.name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void setMemberIds(ArrayList\u003cInteger\u003e memberIds) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.memberIds \u003d (memberIds !\u003d null) ? new ArrayList\u003c\u003e(memberIds) : null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public Optional\u003cArrayList\u003cInteger\u003e\u003e getMemberIds() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return (memberIds !\u003d null) ? Optional.of(memberIds) : Optional.empty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (!(other instanceof EditGroupDescriptor)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            EditGroupDescriptor e \u003d (EditGroupDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getMemberIds().equals(e.getMemberIds());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof EditGroupCommand)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand e \u003d (EditGroupCommand) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editGroupDescriptor.equals(e.editGroupDescriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 209,
      "terencemah": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, ViewType.EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.storage.ExportFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Exports application Life to CSV."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports application Life to CSV File specified. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"All 3 parameters must be included for successful import: \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"l/LIFE_FILE_PATH \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"g/GROUP_FILE_PATH \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"e/EVENT_FILE_PATH.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Files exported:\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%1$s \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%2$s \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%3$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String EMPTY_FILE \u003d \"Unable to export empty life/group/events.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \" Please add contacts/groups and try again.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String groupFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String lifeFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String eventFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ExportCommand(String lifeFilePath, String groupFilePath, String eventFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.lifeFilePath \u003d lifeFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.groupFilePath \u003d groupFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventFilePath \u003d eventFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!lifeFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportCsv(String.valueOf(model.getAddressBookFilePath()), lifeFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!groupFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportGroupCsv(String.valueOf(model.getAddressBookFilePath()), groupFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!eventFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportEventCsv(String.valueOf(model.getAddressBookFilePath()), eventFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, lifeFilePath, groupFilePath, eventFilePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(EMPTY_FILE), e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 lifeFilePath.equals(((ExportCommand) other).lifeFilePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, ViewType.HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.storage.ImportFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Imports application csv to the CoderLifeInsights."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \": Imports application csv to the CoderLifeInsights. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"All 3 parameters must be included for successful import: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"l/LIFE_FILE_PATH \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"g/GROUP_FILE_PATH \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"e/EVENT_FILE_PATH.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Files imported:\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%1$s \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%2$s \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Person already exists in the CoderLifeInsights. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Group already exists in the address book. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Event already exists in the address book. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String groupFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String lifeFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String eventFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ImportCommand(String lifeFilePath, String groupFilePath, String eventFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.lifeFilePath \u003d lifeFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.groupFilePath \u003d groupFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventFilePath \u003d eventFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!groupFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cGroup\u003e importedGroup \u003d new ImportFile().importGroupCsv(groupFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasGroups(importedGroup)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvGroupsToAddressBook(importedGroup);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!lifeFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cPerson\u003e importedPeople \u003d new ImportFile().importCsv(lifeFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasPersons(importedPeople)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvToAddressBook(importedPeople);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cEvent\u003e importedEvent \u003d new ImportFile().importEventCsv(eventFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasEvents(importedEvent)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvEventsToAddressBook(importedEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, lifeFilePath, groupFilePath, eventFilePath));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 lifeFilePath.equals(((ImportCommand) other).lifeFilePath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "harrychengly": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InsightType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Enum representing different categories of ViewCommands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public enum InsightType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    PERSON, GROUP, ALL"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Lists all groups in CoderLifeInsights"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ListGroupCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_groups\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all groups\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Suggests a person/activity/place."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_PERSON \u003d \"person\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"place\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activity\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \": Suggests a person based on time spent/ \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"place or activity based on frequency \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_PERSON"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"/\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"/\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_PLACE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"\\nExample: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \" person\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_PERSON_SUGGEST_SUCCESS \u003d \"Person suggestion provided.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_SUGGEST_SUCCESS \u003d \"Activity suggestion provided.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_PLACE_SUGGEST_SUCCESS \u003d \"Place suggestion provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"The entered parameter is invalid.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String suggestParameter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCommand(String suggestParameter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(suggestParameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.suggestParameter \u003d suggestParameter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        switch (suggestParameter) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_PERSON:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestPerson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PERSON_SUGGEST_SUCCESS, suggestParameter));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_ACTIVITY:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestActivity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ACTIVITY_SUGGEST_SUCCESS, suggestParameter),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    ViewType.SUGGEST_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_PLACE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestPlace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PLACE_SUGGEST_SUCCESS, suggestParameter),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    ViewType.SUGGEST_PLACE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARAMETER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof SuggestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 suggestParameter.equals(((SuggestCommand) other).suggestParameter));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Displays various insights regarding the persons, groups"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and events in the AddressBook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"places\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activities\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_RECENT \u003d \"recent\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_ALL \u003d \"all\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays various insights \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"regarding the persons, groups and events in the AddressBook.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Parameters: INSIGHT_PARAMETER [m/INDEX] [g/INDEX]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Whether [m/INDEX] or [g/INDEX] are required depends on the insight parameter.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Possible insight parameters: \\\"\" + KEYWORD_PLACE + \"\\\", \\\"\" + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"\\\", \\\"\" + KEYWORD_RECENT + \"\\\", \\\"\" + KEYWORD_ALL + \"\\\", or \\\"\" + KEYWORD_TIME + \"\\\".\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Examples:\\n\" + COMMAND_WORD + \" \" + KEYWORD_PLACE + \" m/1\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + COMMAND_WORD + \" \" + KEYWORD_ACTIVITY + \" g/1\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + COMMAND_WORD + \" \" + KEYWORD_RECENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_ALL_TIME \u003d \"Displaying total group time vs individual time spent.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_ALL_EVENTS \u003d \"Displaying all events.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_PLACE \u003d \"Displaying places visited with \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_ACTIVITY \u003d \"Displaying activities done with \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_RECENT_ALL \u003d \"Listing last 5 events.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_RECENT_PERSON \u003d \"Listing last 5 events with \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"You have entered an invalid insight parameter.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_EXTRA_PREFIX \u003d \"Please choose either a member OR a group to view.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_INDEX_REQUIRED \u003d \"This insight parameter requires you \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"to indicate either a person or group.\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_INDEX_FORBIDDEN \u003d \"This insight parameter cannot be \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"accompanied by a person or group.\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int MAX_EVENTS \u003d 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final String parameter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final InsightType type;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewCommand(Index index, String parameter, InsightType type) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (type.equals(InsightType.ALL)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return processTypeAll(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else if (type.equals(InsightType.PERSON)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return processTypePerson(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            assert type.equals(InsightType.GROUP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return processTypeGroup(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getParam() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public InsightType getType() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method processes the command execution for the scenario"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * where the InsightType is ALL."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private CommandResult processTypeAll(Model model) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_ALL:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            ObservableList\u003cRecentEvent\u003e eventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            eventList.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            ObservableList\u003cEvent\u003e fullList \u003d model.getAddressBook().getEventList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            int size1 \u003d fullList.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int i \u003d 0; i \u003c size1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                eventList.add(new RecentEvent("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        Integer.toString(fullList.get(i).getEventId()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        fullList.get(i).getPlace(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        fullList.get(i).getActivity(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        fullList.get(i).getTime().toString()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.copyRecent(eventList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_EVENTS, ViewType.ALL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_RECENT:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            ObservableList\u003cRecentEvent\u003e recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            recentEventList.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            ObservableList\u003cEvent\u003e filteredRecentList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            int size2 \u003d filteredRecentList.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            if (size2 \u003c MAX_EVENTS) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                for (int i \u003d size2 - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            Integer.toString(model.getFilteredEventList().get(i).getEventId()),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            model.getFilteredEventList().get(i).getPlace(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(i).getActivity(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(i).getTime().toString()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                for (int i \u003d 0; i \u003c MAX_EVENTS; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            Integer.toString(model.getFilteredEventList().get(size2 - 1 - i).getEventId()),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(size2 - 1 - i).getPlace(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(size2 - 1 - i).getActivity(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(size2 - 1 - i).getTime().toString()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.copyRecent(recentEventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new CommandResult(MESSAGE_RECENT_ALL, ViewType.RECENT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            assert parameter.equals(KEYWORD_TIME);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_TIME, ViewType.TIME);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method processes the command execution for the scenario"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * where the InsightType is PERSON."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private CommandResult processTypePerson(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Person personToView \u003d lastShownPersonList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewType vt;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_PLACE:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showPlaceList(personToView);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_PLACE + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.PLACES;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_ACTIVITY:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showActivityList(personToView);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_ACTIVITY + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.ACTIVITIES;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            assert parameter.equals(KEYWORD_RECENT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showRecentList(personToView);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_RECENT_PERSON + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.RECENT;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(message, vt);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method processes the command execution for the scenario"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * where the InsightType is GROUP."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private CommandResult processTypeGroup(Model model) throws CommandException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cGroup\u003e lastShownGroupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownGroupList.size()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Group groupToView \u003d lastShownGroupList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewType vt;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_PLACE:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showGroupPlaceList(groupToView);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_PLACE + groupToView.getName() + \".\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.PLACES;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_ACTIVITY:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showGroupActivityList(groupToView);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_ACTIVITY + groupToView.getName() + \".\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.ACTIVITIES;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            assert parameter.equals(KEYWORD_RECENT);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showGroupRecentList(groupToView);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_RECENT_PERSON + groupToView.getName() + \".\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.RECENT;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(message, vt);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((ViewCommand) o).getIndex().equals(this.getIndex())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((ViewCommand) o).getParam().equals(this.getParam())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((ViewCommand) o).getType().equals(this.getType());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 225,
      "harrychengly": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Shows the user the places visited, activities done or last 5 events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * with a chosen person from the Address Book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_group\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"places\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activities\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays insights about the places visited, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"activities done, or time spent with the group identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"by the index number used in the displayed group list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) [INSIGHT_PARAMETER]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[INSIGHT_PARAMETER] can be [\" + KEYWORD_PLACE + \"], [\" + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"].\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + KEYWORD_PLACE + \" \" + PREFIX_GROUP + \"1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_PLACE \u003d \"Displaying places visited with \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_ACTIVITY \u003d \"Displaying activities done with \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"The entered parameter is invalid.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int TYPE_PERSON \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String parameter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final int type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ViewGroupCommand(Index index, String parameter, int type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group groupToView \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (parameter.equals(KEYWORD_PLACE)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.showGroupPlaceList(groupToView);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new CommandResult(MESSAGE_PLACE + groupToView.getName() + \".\", ViewType.PLACES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else if (parameter.equals(KEYWORD_ACTIVITY)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.showGroupActivityList(groupToView);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new CommandResult(MESSAGE_ACTIVITY + groupToView.getName() + \".\", ViewType.ACTIVITIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getParam() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof ViewGroupCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand e \u003d (ViewGroupCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.index.equals(e.index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.parameter.equals(e.parameter)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.type \u003d\u003d e.type;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "l2ejected": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Enum representing the different types of CommandResult objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public enum ViewType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    GROUPS, PLACES, ACTIVITIES, TIME, ALL, RECENT, NORMAL, HELP, EXIT, SUGGEST_ACTIVITY, SUGGEST_PLACE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 7,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, time,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                placeList, activityList, timeList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "terencemah": 3,
      "l2ejected": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Parses input arguments and creates a new {@code AddEventCommand object}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddEventCommandParser.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddEventCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * and returns a {@code AddEventCommand} object for execution"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MEMBER, PREFIX_GROUP, PREFIX_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PREFIX_PLACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_PLACE, PREFIX_TIME, PREFIX_GROUP)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_PLACE, PREFIX_TIME, PREFIX_MEMBER))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MEMBER, PREFIX_GROUP)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (activity.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d argMultimap.getValue(PREFIX_PLACE).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (place.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String input \u003d argMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String mins \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String hours \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String[] process \u003d argMultimap.getValue(PREFIX_TIME).get().split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (process.length \u003e 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            char[] time \u003d process[0].toCharArray();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (time.length \u003c 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                int marker \u003d time.length - 2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                for (int i \u003d marker; i \u003c time.length; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    mins +\u003d time[i];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                for (int i \u003d 0; i \u003c marker; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    hours +\u003d time[i];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (hours.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    hours +\u003d \"0\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Integer.parseInt(mins);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Integer.parseInt(hours);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(AddEventCommand.MESSAGE_INVALID_TIME_INPUT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time time \u003d new Time(Integer.parseInt(mins), Integer.parseInt(hours));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MEMBER).isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int idx \u003d index.getOneBased();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                event.setWithGroup(idx);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MEMBER).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int idx \u003d index.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                event.setWithPerson(idx);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                logger.info(\"The parsed index is \" + idx);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddEventCommand(event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "l2ejected": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses the input argument to create a new AddGroupCommand instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_NOT_INT \u003d \"Member index supplied must be an integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the input args to create an AddGroupCommand instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param args input by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a new AddGroupCommand instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException when input doesn\u0027t match expected pattern/format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MEMBER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            Group group \u003d new Group(new Name(argMultimap.getValue(PREFIX_NAME).get()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    placeList, activityList, timeList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_MEMBER)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                List\u003cString\u003e members \u003d argMultimap.getAllValues(PREFIX_MEMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        group.addPerson(Integer.parseInt(members.get(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        throw new ParseException(MEMBER_NOT_INT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddGroupCommand(group);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 63,
      "terencemah": 4,
      "l2ejected": 4,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case EditGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new ListGroupCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new SuggestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 25,
      "terencemah": 2,
      "harrychengly": 9,
      "l2ejected": 3,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Prefixes mapped to their respective arguments*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * return an empty list. Modifying the returned list will not affect the underlying data structure"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * to their respective argument values. Only the given prefixes will be recognized in the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * arguments string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * \u003cp\u003eE.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * this method returns 5."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                        ...}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        prefixPositions.sort(("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argValue \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, PrefixPosition currentPrefixPosition, PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 39,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Prefix PREFIX_MEMBER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_PLACE \u003d new Prefix(\"place/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Prefix PREFIX_LIFE \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "l2ejected": 3,
      "harrychengly": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand and returns a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * DeleteGroupCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new DeleteGroupCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setPhone("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setEmail("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setAddress("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code tags} contain only one element which is an empty string, it will be parsed into a {@code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 19,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses input arguments and creates a new EditGroupCommand instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandParser implements Parser\u003cEditGroupCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditGroupCommand and returns an"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * EditGroupCommand instance for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                args, PREFIX_NAME, PREFIX_MEMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor editGroupDescriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editGroupDescriptor.setName(ParserUtil.parseName(argumentMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        parseIndexes(argumentMultimap, editGroupDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!editGroupDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(EditGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new EditGroupCommand(index, editGroupDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the member indexes if present and modifies the Edit Group Descriptor accordingly."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argumentMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param editGroupDescriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void parseIndexes(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                              EditGroupDescriptor editGroupDescriptor) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_MEMBER)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cString\u003e members \u003d argumentMultimap.getAllValues(PREFIX_MEMBER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                List\u003cInteger\u003e memberIDs \u003d members.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .map(s -\u003e Integer.valueOf(s))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArrayList\u003cInteger\u003e memberIds \u003d new ArrayList\u003c\u003e(memberIDs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editGroupDescriptor.setMemberIds(memberIds);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new ParseException(\"Member indexes provided must be an integer.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * and returns a ExportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String lifePath \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String groupPath \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String eventPath \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LIFE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                lifePath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_LIFE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groupPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                eventPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ExportCommand(lifePath, groupPath, eventPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(pe.getMessage() + \"\\n\" + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), io);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand and returns a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String lifePath \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String groupPath \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String eventPath \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LIFE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                lifePath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_LIFE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groupPath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                eventPath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ImportCommand(lifePath, groupPath, eventPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(ParserUtil.MESSAGE_INVALID_PATH + \"\\n\" + ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "harrychengly": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Path provided must exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_FILE_ALREADY_EXIST \u003d \"File already exist. Please specify another name.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"Invalid suggestion parameter entered. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"Please input person/place/activity.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *                        unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String path} into a trimmed path if file exists. Leading and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code file} does not exist."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parsePath(String path) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedPath \u003d path.strip();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        File file \u003d new File(trimmedPath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return trimmedPath;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String path} into a trimmed path if file does not exist."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code file} exist."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parseExportPath(String path) throws ParseException, IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedPath \u003d path.strip();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        File file \u003d new File(trimmedPath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (trimmedPath.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(\"Empty file name to export provided.\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FILE_ALREADY_EXIST + trimmedPath));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return trimmedPath;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String time} into a {@code Time}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static Time parseTime(String time) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String[] arr \u003d time.split(\" \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // get hours"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String hours \u003d arr[0].substring(0, arr[0].length() - 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String minutes \u003d arr[1].substring(0, arr[1].length() - 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new Time(Integer.valueOf(minutes), Integer.valueOf(hours));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String suggest} into a trimmed parameter. Leading and trailing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code suggest} parameter not equal to person."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parseSuggest(String suggest) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(suggest);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedSuggestParameter \u003d suggest.trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (trimmedSuggestParameter.equalsIgnoreCase(\"person\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else if (trimmedSuggestParameter.equalsIgnoreCase(\"place\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else if (trimmedSuggestParameter.equalsIgnoreCase(\"activity\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PARAMETER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String input} into {@code PlaceList}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static PlaceList parsePlaces(String input) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new PlaceList(toAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String input} into {@code ActivityList}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static ActivityList parseActivities(String input) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ActivityList(toAdd);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Parses {@code String input} into {@code TimeList}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static TimeList parseTimes(String input) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new TimeList(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "terencemah": 13,
      "harrychengly": 76,
      "l2ejected": 37,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * SuggestCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String parameter \u003d ParserUtil.parseSuggest(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new SuggestCommand(parameter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.InsightType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return A ViewCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_MEMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        boolean groupIndicated \u003d !(argMultimap.getValue(PREFIX_GROUP).isEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        boolean personIndicated \u003d !(argMultimap.getValue(PREFIX_MEMBER).isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (groupIndicated \u0026\u0026 personIndicated) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_EXTRA_PREFIX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String parameter \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!parameter.equals(ViewCommand.KEYWORD_PLACE) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ACTIVITY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_RECENT) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ALL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_TIME)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_INVALID_PARAMETER + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        boolean indexRequired \u003d parameter.equals(ViewCommand.KEYWORD_PLACE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                || parameter.equals(ViewCommand.KEYWORD_ACTIVITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        boolean indexForbidden \u003d parameter.equals(ViewCommand.KEYWORD_ALL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                || parameter.equals(ViewCommand.KEYWORD_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (indexRequired \u0026\u0026 (!groupIndicated \u0026\u0026 !personIndicated)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_INDEX_REQUIRED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else if (indexForbidden \u0026\u0026 (groupIndicated || personIndicated)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_INDEX_FORBIDDEN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String indexString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        InsightType insightType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (groupIndicated) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            indexString \u003d argMultimap.getValue(PREFIX_GROUP).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            insightType \u003d InsightType.GROUP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else if (personIndicated) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            indexString \u003d argMultimap.getValue(PREFIX_MEMBER).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            insightType \u003d InsightType.PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            indexString \u003d \"1\"; //default index when index not required"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            insightType \u003d InsightType.ALL;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            if (groupIndicated) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new ViewCommand(index, parameter, insightType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 77,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandParser implements Parser\u003cViewGroupCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return A ViewCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ViewGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String parameter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GROUP).isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            parameter \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!parameter.equals(ViewCommand.KEYWORD_PLACE) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ACTIVITY)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(ViewGroupCommand.MESSAGE_INVALID_PARAMETER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ViewGroupCommand(index, parameter, ViewGroupCommand.TYPE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates an AddressBook using the Persons \u0026 Groups in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not contain"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}. {@code groups} must not contain"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate groups."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a person with the same identity as {@code personList} exists in the address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(personList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return persons.containsPersons(personList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if a groups with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(groupList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return groups.containsGroups(groupList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a groups with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.containsEvents(eventList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds given group to the groups list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param group given group"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.addGroup(group);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addGroups(List\u003cGroup\u003e g) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groups.addAll(g);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a person to the address book. The person must not already exist in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addPersons(List\u003cPerson\u003e p) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        persons.addAll(p);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvents(List\u003cEvent\u003e e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.addAll(e);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * must exist in the address book. The person identity of {@code editedPerson} must not be the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * same as another existing person in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup(Group key) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.removeGroup(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 88,
      "terencemah": 5,
      "harrychengly": 27,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    boolean hasPersons(List\u003cPerson\u003e people);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    boolean hasGroups(List\u003cGroup\u003e groups);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasEvents(List\u003cEvent\u003e events);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void deleteGroup(Group group);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void addGroup(Group group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * in the address book. The person identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void setGroup(Group target, Group editedGroup);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void importCsvToAddressBook(List\u003cPerson\u003e importedPeople);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void showTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showPlaceList(Person target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showActivityList(Person target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showRecentList(Person target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestPerson();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestPlace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestActivity();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void copyRecent(ObservableList\u003cRecentEvent\u003e list);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void copyTime(ObservableList\u003cTime\u003e list);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cEventDescriptor\u003e getFrequencyList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cRecentEvent\u003e getRecentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cTime\u003e getTimeList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    void showGroupPlaceList(Group groupToView);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    void showGroupActivityList(Group groupToView);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showGroupRecentList(Group groupToView);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "terencemah": 26,
      "harrychengly": 27,
      "l2ejected": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.ActivityContainsActivityNamePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.PlaceContainsPlaceNamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.NameContainsFullNamePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final ObservableList\u003cEventDescriptor\u003e frequencyList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final ObservableList\u003cRecentEvent\u003e recentEventList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final ObservableList\u003cTime\u003e timeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(this.addressBook.getGroupList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasGroup(group);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasEvent(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(people);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return addressBook.hasPersons(people);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(groups);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return addressBook.hasGroups(groups);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasEvents(events);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addGroup(group);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.removeGroup(group);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.filteredGroups;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.filteredEvents;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvToAddressBook(List\u003cPerson\u003e importedPeople) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(importedPeople);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPersons(importedPeople);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(importedGroup);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addGroups(importedGroup);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(importedEvent);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        addressBook.addEvents(importedEvent);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showPlaceList(Person target) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyList(target.getPlaceList());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showActivityList(Person target) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyList(target.getActivityList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showRecentList(Person target) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyRecent(target.getRecentEventList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupPlaceList(Group target) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        copyList(target.getPlaceList2());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupActivityList(Group target) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        copyList(target.getActivityList2());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showGroupRecentList(Group target) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyRecent(target.getRecentEventList());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Copies the active PlaceList or ActivityList onto the Model\u0027s Frequency List."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param list List to be copied."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void copyList(ObservableList\u003cEventDescriptor\u003e list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList.clear();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (EventDescriptor eventDescriptor : list) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.add(eventDescriptor);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Copies the target Person\u0027s active RecentEventList onto the Model\u0027s list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param list List to be copied."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void copyRecent(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.clear();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (RecentEvent recentEvent : list) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            recentEventList.add(recentEvent);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyTime(ObservableList\u003cTime\u003e list) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.clear();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Time time : list) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            timeList.add(time);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void showTime() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d addressBook.getGroupList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cTime\u003e timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time personTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time groupTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : personList) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personHour \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personMin \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personTime.addTime(personMin, personHour);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : groupList) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupHour \u003d oneGroup.getTimeSpent().getHours();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupMin \u003d oneGroup.getTimeSpent().getMinutes();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupTime.addTime(groupMin, groupHour);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(personTime);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(groupTime);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        copyTime(timeList);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Updates filtered person list with suggested person based on time spent."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestPerson() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPerson\u003e personsList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Person suggestedPerson;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        NameContainsFullNamePredicate predicate \u003d new NameContainsFullNamePredicate(names);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!personsList.isEmpty()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            suggestedPerson \u003d personsList.get(0);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Person onePerson : personsList) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int suggestedHours \u003d suggestedPerson.getTime().getHours();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int suggestedMins \u003d suggestedPerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int hours \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int mins \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (hours \u003c\u003d suggestedHours) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    if (mins \u003c\u003d suggestedMins) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        if (suggestedPerson.equals(onePerson)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            suggestedPerson \u003d onePerson;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            names.add(suggestedPerson.getName().toString());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Suggests a place based on frequency"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestPlace() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d addressBook.getEventList();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Map\u003cString, Integer\u003e placeIntegerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e place \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String minKey \u003d \"No places available. \";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventList.isEmpty()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Event oneEvent : eventList) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String suggestedPlace \u003d oneEvent.getPlace();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (placeIntegerMap.containsKey(suggestedPlace)) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    placeIntegerMap.put(suggestedPlace, placeIntegerMap.get(suggestedPlace) + 1);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    placeIntegerMap.put(suggestedPlace, 1);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            //get min place visited"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int minValue \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (String key : placeIntegerMap.keySet()) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int value \u003d placeIntegerMap.get(key);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (value \u003c minValue) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minValue \u003d value;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minKey \u003d key;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            place.add(minKey);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            PlaceContainsPlaceNamePredicate predicate \u003d new PlaceContainsPlaceNamePredicate(place);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Suggest activity"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestActivity() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d addressBook.getEventList();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Map\u003cString, Integer\u003e activityIntegerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e activity \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String minKey \u003d \"No activities available. \";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventList.isEmpty()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Event oneEvent : eventList) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String suggestedActivity \u003d oneEvent.getActivity();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (activityIntegerMap.containsKey(suggestedActivity)) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    activityIntegerMap.put(suggestedActivity, activityIntegerMap.get(suggestedActivity) + 1);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    activityIntegerMap.put(suggestedActivity, 1);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            //get min activity done"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int minValue \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (String key : activityIntegerMap.keySet()) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int value \u003d activityIntegerMap.get(key);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (value \u003c minValue) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minValue \u003d value;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minKey \u003d key;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            activity.add(minKey);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            ActivityContainsActivityNamePredicate predicate \u003d new ActivityContainsActivityNamePredicate(activity);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequencyList;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String finalContent \u003d \"\";"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // NOTE: VersionedAddressBook does not have a toString() method, so you will need to manually"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // implement VersionedAddressBook#toString() to see its content!"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \"versioned addressbook: \" + addressBook.toString();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \", filtered person list: [\";"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (Person p : filteredPersons) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            finalContent +\u003d p.toString() + \",\";"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \"]\";"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return finalContent;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 66,
      "terencemah": 67,
      "harrychengly": 180,
      "l2ejected": 26,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the event list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "harrychengly": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ActivityContainsActivityNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ActivityContainsActivityNamePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ActivityContainsActivityNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(event.getActivity()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ActivityContainsActivityNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsActivityNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Container class for adding activity, time spent and place to a person or a group"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Represents the eventID for the next created group"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static int events \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String place;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cInteger\u003e withPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cInteger\u003e withGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event(String activity, String place, Time time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventId \u003d events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withPerson \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withGroup \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events +\u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getActivity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getPlace() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.place;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cInteger\u003e getWithGroup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.withGroup;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cInteger\u003e getWithPerson() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.withPerson;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setWithGroup(int groupId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withGroup \u003d Optional.of(groupId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setWithPerson(int personId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withPerson \u003d Optional.of(personId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void setEventId(int eventId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int getEventId() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.eventId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setTime(Time time) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Checks that this event is the same event and has the same"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * event ID as the event parameter."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param other Event to be compared against."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return True if the two events are the same, false otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean isSameEvent(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return (this.getEventId() \u003d\u003d otherEvent.getEventId()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getActivity().equalsIgnoreCase(otherEvent.getActivity())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getPlace().equalsIgnoreCase(otherEvent.getPlace())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getTime().equals(otherEvent.getTime())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getWithGroup().equals(otherEvent.getWithGroup())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getWithPerson().equals(otherEvent.getWithPerson()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.getEventId() \u003d\u003d otherEvent.getEventId();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return Objects.hash(eventId, activity, place, withGroup, withPerson, time);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Event: \" + activity + \" place: \" + place + \" for \" + time;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 57,
      "terencemah": 26,
      "l2ejected": 35,
      "harrychengly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/PlaceContainsPlaceNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class PlaceContainsPlaceNamePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public PlaceContainsPlaceNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(event.getPlace()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof PlaceContainsPlaceNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((PlaceContainsPlaceNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Represents the list of events that enforces uniqueness in its events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Checks whether the list contains a given event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toCheck a group to check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return boolean status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the list contains an equivalent eventList as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean containsEvents(List\u003cEvent\u003e toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        boolean eventExists;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Event oneEvent : toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            eventExists \u003d internalList.stream().anyMatch(oneEvent::isSameEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (eventExists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds an event to the list. The event must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds given events to the list if they are already not in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toAdd events to be added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addAll(List\u003cEvent\u003e toAdd) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (containsEvents(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Returns true if {@code groups} contains only unique persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 103,
      "terencemah": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Events."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EventNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Did not find the specified event\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.FrequencyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the Social Group that a person is part of and spends time with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time timeSpent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e memberIDs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e eventIDs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList activityList2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList placeList2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final RecentEventList recentEventList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public Group(Name name, PlaceList placeList, ActivityList activityList, TimeList timeList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeList.setPlaceList(placeList.getPlaceList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activityList.setActivityList(activityList.getActivityList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.setTimeList(timeList.getTimeList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2.generate(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2.generate(this.placeList.getPlaceList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList \u003d new RecentEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.generate(this.placeList, this.activityList, this.timeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Time getTimeSpent() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.timeSpent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addPerson(int id) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs.add(id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deletePerson(int id) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs.remove(Integer.valueOf(id));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setTimeSpent(Time time) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cInteger\u003e getMembers() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.memberIDs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMemberIDs(ArrayList\u003cInteger\u003e members) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs \u003d members;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cInteger\u003e getEvents() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.eventIDs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setEventIDs(ArrayList\u003cInteger\u003e events) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d events;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList getPlaceList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList getTimeList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentEventList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList.getList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a string representation of member IDs."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String printEventIds() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String result \u003d \"Events: \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c this.eventIDs.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            result +\u003d this.eventIDs.get(i) + \" \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a String output with all the names in a single line separated by whitespace."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String printMemberList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String build \u003d \"Members: \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c memberIDs.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (i \u003d\u003d memberIDs.size() - 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                build +\u003d memberIDs.get(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                build +\u003d memberIDs.get(i) + \", \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return build;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Objects.hash(this.name, this.memberIDs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(o instanceof Group)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group g \u003d (Group) o;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return (this.getName().equals(g.getName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.memberIDs.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"Name: \" + this.name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"Name: \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + this.name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + printMemberList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getPlaceList2() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList2.getFrequencyList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getActivityList2() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList2.getFrequencyList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 120,
      "terencemah": 17,
      "l2ejected": 31,
      "harrychengly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Checks if a {@code Group}\u0027s {@code Name} matches any of the given keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupNameContainsKeywordsPredicate implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(group.getName().fullName, keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof GroupNameContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GroupNameContainsKeywordsPredicate nameContainsKeywordsPredicate \u003d (GroupNameContainsKeywordsPredicate) other;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.keywords.equals(nameContainsKeywordsPredicate.keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a unique list of all groups currently in CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Checks whether the list contains a given group."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toCheck a group to check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return boolean status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the list contains an equivalent groupList as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean containsGroups(List\u003cGroup\u003e toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        boolean groupExists;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupExists \u003d internalList.stream().anyMatch(oneGroup::equals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (groupExists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a given group to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toAdd group to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Adds given groups to the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param toAdd groups to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll(List\u003cGroup\u003e toAdd) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (containsGroups(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group edited) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(groups);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes a given group from the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toRemove group to be removed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup(Group toRemove) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code groups} contains only unique persons."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                if (groups.get(i).equals(groups.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 125,
      "harrychengly": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Groups (Groups are considered duplicates if"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Did not find the specified group.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A list of activities"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final List\u003cString\u003e activityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList(List\u003cString\u003e activities) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activityList \u003d activities;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public List\u003cString\u003e getActivityList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds an activity to the current activityList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return new ActivityList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList addActivity(String activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toEdit \u003d this.activityList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        toEdit.add(activity);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ActivityList(toEdit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setActivityList(List\u003cString\u003e oldList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.activityList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(oldList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.addAll(newList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : activityList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (i \u003c activityList.size() - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof ActivityList)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ActivityList a \u003d (ActivityList) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activityList.equals(a.activityList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 7,
      "l2ejected": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DescriptorComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * A Comparator class for comparing and sorting EventDescriptor objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class DescriptorComparator implements Comparator\u003cEventDescriptor\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Compares two EventDescriptor objects. An object is considered larger"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * if it has a smaller frequency. If two objects have the same frequency,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * then the larger object is the one with the lexicographically greater name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This ensures that after sorting, the highest frequenct EventDescriptors"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * will appear first on the list; and for objects with the same frequency,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * they will appear in alphabetical order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param d1 The first EventDescriptor object being compared."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param d2 The second EventDescriptor object being compared."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return 1 if d1 is larger than d2, and -1 if d2 is larger than d1."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public int compare(EventDescriptor d1, EventDescriptor d2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (d1.getFrequency() \u003c d2.getFrequency()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else if (d1.getFrequency() \u003d\u003d d2.getFrequency()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 d1.getName().compareTo(d2.getName()) \u003c 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terencemah": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s email in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1. The local-part should only contain alphanumeric characters and these special characters, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"the parentheses, (\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + SPECIAL_CHARACTERS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \") .\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"if any.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            LOCAL_PART_REGEX"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"@\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_FIRST_CHARACTER_REGEX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_MIDDLE_REGEX"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EventDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * This class is used to encompass Places and Activities,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * both of which are characterised by a unique name,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and a frequency particular to a person in the AddressBook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class EventDescriptor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final IntegerProperty frequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public EventDescriptor(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequency \u003d new SimpleIntegerProperty(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public EventDescriptor(String name, Integer frequency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.frequency \u003d new SimpleIntegerProperty(frequency);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public Integer getFrequency() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequency.get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequency.setValue(frequency.get() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty nameProperty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty frequencyProperty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new SimpleStringProperty(Integer.toString(frequency.get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof EventDescriptor)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((EventDescriptor) o).getName().equals(this.getName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((EventDescriptor) o).getFrequency() \u003d\u003d this.getFrequency();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terencemah": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FrequencyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * An observable list of EventDescriptor objects whose uniqueness is enforced by a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * HashMap. This allows the list to be displayed and updated instantly on the GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class FrequencyList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ObservableList\u003cEventDescriptor\u003e frequencyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private HashMap\u003cString, Integer\u003e uniqueNameList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public FrequencyList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.uniqueNameList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method adds a place or an activity to a given frequency list,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * assuming that it does not exist already. Otherwise, it increments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * the frequency of that place or activity by 1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param name The name of the place or activity to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void add(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (uniqueNameList.containsKey(name)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            Integer oldValue \u003d uniqueNameList.get(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            int listIndex \u003d frequencyList.indexOf(new EventDescriptor(name, oldValue));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.get(listIndex).increment();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            uniqueNameList.replace(name, oldValue, oldValue + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            uniqueNameList.put(name, 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.add(new EventDescriptor(name));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList.sort(new DescriptorComparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Generates the items in the Frequency List from an ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param items List of items to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate(List\u003cString\u003e items) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String item : items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            this.add(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequencyList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getMap() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return uniqueNameList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof FrequencyList)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((FrequencyList) o).getFrequencyList().equals(this.getFrequencyList())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((FrequencyList) o).getMap().equals(this.getMap());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsFullNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class NameContainsFullNamePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public NameContainsFullNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(person.getName().fullName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof NameContainsFullNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsFullNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList placeList2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList activityList2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final RecentEventList recentEventList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Time time, PlaceList placeList,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                  ActivityList activityList, TimeList timeList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.setPlaceList(placeList.getPlaceList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.setActivityList(activityList.getActivityList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.setTimeList(timeList.getTimeList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeList2.generate(this.placeList.getPlaceList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityList2.generate(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList \u003d new RecentEventList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.generate(this.placeList, this.activityList, this.timeList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList getPlaceList2() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList getActivityList2() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList getTimeList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentEventList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList.getList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getPlaceList2().equals(getPlaceList2())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getActivityList2().equals(getActivityList2());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        builder"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Time spent together: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Places been together: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getPlaceList2().toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Activities done together: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getActivityList2().toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getPlaceList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList2.getFrequencyList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getActivityList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList2.getFrequencyList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "terencemah": 24,
      "l2ejected": 31,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Place.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Create new place object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Place {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final String placeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @param placeName A valid tag name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Place(String placeName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(placeName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeName \u003d placeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                || (other instanceof Place // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 placeName.equals(((Place) other).placeName)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeName.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \u0027[\u0027 + placeName + \u0027]\u0027;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PlaceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A list of places"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class PlaceList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final List\u003cString\u003e placeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList(List\u003cString\u003e places) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeList \u003d places;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public List\u003cString\u003e getPlaceList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.placeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds a place to the current placeList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return new PlaceList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList addPlace(String place) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e current \u003d this.placeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        current.add(place);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new PlaceList(current);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setPlaceList(List\u003cString\u003e oldList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.placeList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        newList.addAll(oldList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.addAll(newList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : placeList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (i \u003c placeList.size() - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof PlaceList)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        PlaceList p \u003d (PlaceList) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.placeList.equals(p.placeList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 5,
      "l2ejected": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecentEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * This class is used to encompass a recent event,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * consisting of an ID, place, activity and duration for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final StringProperty eventId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty place;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public RecentEvent(String eventId, String place, String activity, String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventId \u003d new SimpleStringProperty(eventId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.place \u003d new SimpleStringProperty(place);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activity \u003d new SimpleStringProperty(activity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.time \u003d new SimpleStringProperty(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public String getEventId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return eventId.get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getPlace() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return place.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getActivity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return activity.get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return time.get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty placeProperty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return place;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty activityProperty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty timeProperty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public StringProperty eventIdProperty() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return eventId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof RecentEvent)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((RecentEvent) o).getPlace().equals(this.getPlace())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((RecentEvent) o).getActivity().equals(this.getActivity())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((RecentEvent) o).getTime().equals(this.getTime())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((RecentEvent) o).getEventId().equals(this.getEventId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 58,
      "harrychengly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecentEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * An observable list of RecentEvent objects that allows the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * list to be displayed and updated instantly on the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int MAX_EVENTS \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ObservableList\u003cRecentEvent\u003e recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method generates the list of the 5 most recent events with a target"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * person or group, from their PlaceList, ActivityList and TimeList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param pl The target\u0027s PlaceList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param al The target\u0027s ActivityList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param tl The target\u0027s TimeList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate(PlaceList pl, ActivityList al, TimeList tl) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        int size \u003d pl.getPlaceList().size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (size \u003c MAX_EVENTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int i \u003d size - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        Integer.toString(i + 1),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        pl.getPlaceList().get(i), al.getActivityList().get(i),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        tl.getTimeList().get(i)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int i \u003d 0; i \u003c MAX_EVENTS; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        Integer.toString(i + 1),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        pl.getPlaceList().get(size - 1 - i),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        al.getActivityList().get(size - 1 - i), tl.getTimeList().get(size - 1 - i)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof RecentEventList)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((RecentEventList) o).getList().equals(this.getList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 50,
      "harrychengly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Represents the time object that tracks the time spent for the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MINUTES_RANGE_ERROR \u003d \"Minutes must be within 0-59 (inclusive).\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String HOURS_RANGE_ERROR \u003d \"Hours must be 0 or more\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time(int minutes, int hours) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(minutes \u003c\u003d 59 \u0026\u0026 minutes \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else if (hours \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int getMinutes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.minutes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int getHours() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setMinutes(int minutes) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(minutes \u003c\u003d 59 \u0026\u0026 minutes \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setHours(int hours) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (hours \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds the input mins and hrs to the current Time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addTime(int mins, int hrs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newMins;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newHrs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (mins + this.getMinutes() \u003e\u003d 60) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d (mins + this.getMinutes()) - 60;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d (hrs + this.getHours()) + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d mins + this.getMinutes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d hrs + this.getHours();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.minutes \u003d newMins;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.hours \u003d newHrs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Creates a new Time object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * By adding current Time to input parameters"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time addTime2(int mins, int hrs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newMins;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newHrs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (mins + this.getMinutes() \u003e\u003d 60) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d (mins + this.getMinutes()) - 60;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d (hrs + this.getHours()) + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d mins + this.getMinutes();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d hrs + this.getHours();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Time(newMins, newHrs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return String.format(\"%sh %sm\", this.hours, this.minutes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof Time)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time t \u003d (Time) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.getHours() \u003d\u003d t.getHours() \u0026\u0026 this.getMinutes() \u003d\u003d t.getMinutes();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Objects.hash(this.hours, this.minutes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * A list of event durations stored as Strings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class TimeList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public final List\u003cString\u003e timeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList(List\u003cString\u003e times) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList \u003d times;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public List\u003cString\u003e getTimeList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this.timeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Adds a time to the current timeList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return new TimeList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList addTime(String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e current \u003d this.timeList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        current.add(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new TimeList(current);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setTimeList(List\u003cString\u003e xs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.timeList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(xs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.addAll(newList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String s : timeList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            if (i \u003c timeList.size() - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(other instanceof PlaceList)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        TimeList t \u003d (TimeList) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this.timeList.equals(t.timeList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return timeList.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 71,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * adding and updating of persons uses Person#isSamePerson(Person) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * the person being added or updated is unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * However, the removal of a person uses Person#equals(Object) so as to ensure that the person with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if the list contains an equivalent personList as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean containsPersons(List\u003cPerson\u003e toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        boolean personExists;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personExists \u003d internalList.stream().anyMatch(onePerson::isSamePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (personExists) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds all person to the list. The person in to add list must not already exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll(List\u003cPerson\u003e toAdd) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (containsPersons(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}. {@code target} must"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * exist in the list. The person identity of {@code editedPerson} must not be the same as another"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * existing person in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate persons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 15,
      "harrychengly": 23,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.person.Place;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Time INIT_TIME \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final PlaceList INIT_PLACELIST \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final ActivityList INIT_ACTIVITYLIST \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final TimeList INIT_TIMELIST \u003d new TimeList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*public static final Set\u003cPlace\u003e INIT_PLACESET \u003d new HashSet\u003c\u003e();*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"friends\"), INIT_TIME, INIT_PLACELIST, INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), INIT_TIME, INIT_PLACELIST, INIT_ACTIVITYLIST, INIT_TIMELIST"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        /*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"neighbours\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"family\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"classmates\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"colleagues\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "terencemah": 12,
      "l2ejected": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExportFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Exports Life to CSV file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportFile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life to be exported."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"persons\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (Exception ioe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life groups and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life groups to be exported."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportGroupCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"groups\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life events and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life events to be exported."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportEventCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"events\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ImportFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Converts CSV files to be added to current Life."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportFile {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of person to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of person to be imported."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if person in CSV file does not conform to format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cPerson\u003e importCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cPerson\u003e people \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e onePerson \u003d it.next();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneName \u003d onePerson.get(\"name\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String onePhone \u003d onePerson.get(\"phone\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneEmail \u003d onePerson.get(\"email\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneAddress \u003d onePerson.get(\"address\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTagged \u003d onePerson.get(\"tagged\").strip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] tags \u003d oneTagged.split(\";\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneTime \u003d onePerson.get(\"time\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String onePlaceList \u003d onePerson.get(\"places\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] places \u003d onePlaceList.split(\";\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneActivityList \u003d onePerson.get(\"activities\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] activities \u003d oneActivityList.split(\";\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String oneTimeList \u003d onePerson.get(\"times\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String[] times \u003d oneTimeList.split(\";\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Set\u003cTag\u003e tag;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (oneTagged.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    tag \u003d ParserUtil.parseTags(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    tag \u003d ParserUtil.parseTags(Arrays.asList(tags));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Name name \u003d ParserUtil.parseName(oneName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(onePhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(oneEmail);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(oneAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PlaceList placeList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (onePlaceList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : places) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(xs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ActivityList activityList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (oneActivityList.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : activities) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(xs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                TimeList timeList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                if (oneTimeList.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    for (String s : times) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(xs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                Person person \u003d new Person(name, phone, email, address, tag, time,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        placeList, activityList, timeList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                people.add(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return people;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException | ParseException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of events to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of groups to be imported."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if event in CSV file does not conform to format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cEvent\u003e importEventCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e oneEvent \u003d it.next();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String eventId \u003d oneEvent.get(\"eventId\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneActivity \u003d oneEvent.get(\"activity\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String onePlace \u003d oneEvent.get(\"place\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneWithPerson \u003d oneEvent.get(\"withPerson\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneWithGroup \u003d oneEvent.get(\"withGroup\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTime \u003d oneEvent.get(\"time\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int withPerson \u003d Integer.valueOf(oneWithPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int withGroup \u003d Integer.valueOf(oneWithGroup);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Event event \u003d new Event(oneActivity, onePlace, time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                event.setEventId(Integer.valueOf(eventId));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                event.setWithPerson(withPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                event.setWithGroup(withGroup);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                events.add(event);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of groups to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of events to be imported."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if group in CSV file does not conform to format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cGroup\u003e importGroupCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e oneGroup \u003d it.next();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneName \u003d oneGroup.get(\"name\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneGroupId \u003d oneGroup.get(\"groupId\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTimeSpent \u003d oneGroup.get(\"timeSpent\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneMemberIds \u003d oneGroup.get(\"memberIDs\").strip();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String[] memberIds \u003d oneMemberIds.split(\";\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneEventIds \u003d oneGroup.get(\"eventIDs\").strip();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String[] eventIds \u003d oneEventIds.split(\";\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String onePlaceList \u003d oneGroup.get(\"places\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] places \u003d onePlaceList.split(\";\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneActivityList \u003d oneGroup.get(\"activities\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] activities \u003d oneActivityList.split(\";\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String oneTimeList \u003d oneGroup.get(\"times\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String[] times \u003d oneTimeList.split(\";\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                ArrayList\u003cInteger\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (!oneMemberIds.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    for (int i \u003d 0; i \u003c memberIds.length; i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        members.add(Integer.parseInt(memberIds[i]));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                ArrayList\u003cInteger\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (!oneEventIds.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    for (int i \u003d 0; i \u003c eventIds.length; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        events.add(Integer.parseInt(eventIds[i]));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Name name \u003d ParserUtil.parseName(oneName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTimeSpent);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PlaceList placeList;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (onePlaceList.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : places) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(xs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ActivityList activityList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (oneActivityList.isEmpty()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : activities) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(xs);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                TimeList timeList;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                if (oneTimeList.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    for (String s : times) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(xs);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                Group group \u003d new Group(name, placeList, activityList, timeList);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setTimeSpent(time);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setMemberIDs(members);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setEventIDs(events);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groups.add(group);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException | ParseException ioe) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 29,
      "harrychengly": 165,
      "l2ejected": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Jackson-friendly version of {@link Event}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Events\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String place;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String withPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String withGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventId\") String eventId, @JsonProperty(\"activity\") String activity,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"place\") String place,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"withPerson\") String withPerson,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"withGroup\") String withGroup,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (withGroup !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withGroup \u003d withGroup;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withGroup \u003d \"-1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (withPerson !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withPerson \u003d withGroup;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withPerson \u003d \"-1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        activity \u003d source.getActivity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        place \u003d source.getPlace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        eventId \u003d Integer.toString(source.getEventId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (source.getWithGroup().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withGroup \u003d source.getWithGroup().get().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withGroup \u003d \"-1\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (source.getWithPerson().isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withPerson \u003d source.getWithPerson().get().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withPerson \u003d \"-1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"activity\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (place \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"place\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"time\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time timeSpent \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d new Event(activity, place, timeSpent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Groups\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String timeSpent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e memberIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e eventIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e places \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final List\u003cString\u003e times \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedGroup(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"timeSpent\") String timeSpent,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"memberIDs\") List\u003cString\u003e memberIDs,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                            @JsonProperty(\"eventIDs\") List\u003cString\u003e eventIDs,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                            @JsonProperty(\"places\") List\u003cString\u003e places,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            @JsonProperty(\"activities\") List\u003cString\u003e activities,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            @JsonProperty(\"times\") List\u003cString\u003e times) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (memberIDs !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.memberIDs.addAll(memberIDs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (eventIDs !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.eventIDs.addAll(eventIDs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!places.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.places.addAll(places);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!activities.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!times.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            this.times.addAll(times);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent \u003d source.getTimeSpent().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cInteger\u003e members \u003d source.getMembers();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIDs.add(Integer.toString(members.get(i)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cInteger\u003e events \u003d source.getEvents();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            eventIDs.add(Integer.toString(events.get(i)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places.addAll(source.getPlaceList().placeList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities.addAll(source.getActivityList().activityList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times.addAll(source.getTimeList().timeList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //%TODO: Add more checks as group class and info evolve"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final PlaceList modelPlaceList \u003d new PlaceList(places);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final ActivityList modelActivityList \u003d new ActivityList(activities);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        final TimeList modelTimeList \u003d new TimeList(times);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Group group \u003d new Group(new Name(name), modelPlaceList, modelActivityList, modelTimeList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(timeSpent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setTimeSpent(time);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c memberIDs.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            members.add(Integer.valueOf(memberIDs.get(i)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setMemberIDs(members);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c eventIDs.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            events.add(Integer.valueOf(eventIDs.get(i)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setEventIDs(events);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 100,
      "terencemah": 11,
      "l2ejected": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e places \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final List\u003cString\u003e times \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            @JsonProperty(\"places\") List\u003cString\u003e places, @JsonProperty(\"activities\") List\u003cString\u003e activities) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!places.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.places.addAll(places);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!activities.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places.addAll(source.getPlaceList2().placeList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities.addAll(source.getActivityList2().activityList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times.addAll(source.getTimeList().timeList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time modelTime \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final PlaceList modelPlaceList \u003d new PlaceList(places);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final ActivityList modelActivityList \u003d new ActivityList(activities);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        final TimeList modelTimeList \u003d new TimeList(times);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelTime, modelPlaceList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                modelActivityList, modelTimeList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 11,
      "terencemah": 6,
      "l2ejected": 25,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate group(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(S).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                       @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.groups.addAll(groups);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *               JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.addAll(source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (addressBook.hasGroup(group)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            addressBook.addGroup(group);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 29,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"Trying to call saveAddressBook\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the list of activities,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and their frequencies in descending order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ActivityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"ActivityListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cEventDescriptor\u003e frequencyTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e activityColumn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e frequencyColumn;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ActivityListPanel(ObservableList\u003cEventDescriptor\u003e frequencyList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().nameProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyColumn.setCellValueFactory(cellData -\u003e cellData.getValue().frequencyProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyTable.setItems(frequencyList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AllEventPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Panel showing the last 5 events with the target person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * in reverse chronological order of event addition."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class AllEventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"AllEventPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableView\u003cRecentEvent\u003e eventTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e placeColumn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e activityColumn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e timeColumn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public AllEventPanel(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventId.setCellValueFactory(cellData-\u003e cellData.getValue().eventIdProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().placeProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().activityProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().timeProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventTable.setItems(list);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A UI component that displaces information of a {@code Group}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public final Group group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label memberLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private FlowPane members;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label eventLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private FlowPane events;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupCard(Group group, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name.setText(group.getName().fullName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String text \u003d group.getTimeSpent().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent.setText(\"Total Time Spent: \" + text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        memberLabel.setText(\"Members: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        group"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .getMembers()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .forEach(member -\u003e members.getChildren().add(new Label(member.toString())));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventLabel.setText(\"Events: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        group"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .getEvents()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .forEach(event -\u003e events.getChildren().add(new Label(event.toString())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof GroupCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GroupCard card \u003d (GroupCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 group.equals(card.group);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 54,
      "harrychengly": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ListView\u003cGroup\u003e groupListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Represents a cell to view the Group in a list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroup\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        protected void updateItem(Group group, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            super.updateItem(group, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (empty || group \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setGraphic(new GroupCard(group, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"https://ay1920s2-cs2103-w14-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called on a thread other than the JavaFX Application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "harrychengly": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private PlaceListPanel placeListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ActivityListPanel activityListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private RecentEventPanel recentEventPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private SuggestListPanel suggestListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TimePieChart timePieChart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private AllEventPanel allEventPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane groupListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane frequencyListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane timePieChartPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .addEventFilter("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                            menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                            event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart \u003d new TimePieChart(logic.getTimeList(), logic.getFilteredGroupList(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(timePieChart.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new GuiSettings("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        primaryStage.getWidth(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewPlaces() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        placeListPanel \u003d new PlaceListPanel(logic.getFrequencyList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(placeListPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleViewActivities() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityListPanel \u003d new ActivityListPanel(logic.getFrequencyList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(activityListPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleViewRecent() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventPanel \u003d new RecentEventPanel(logic.getRecentList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(recentEventPanel.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewAll() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        allEventPanel \u003d new AllEventPanel(logic.getRecentList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(allEventPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays pie chart"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewTime() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart \u003d new TimePieChart(logic.getTimeList(), logic.getFilteredGroupList(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(timePieChart.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays suggest activity"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleSuggestActivity() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListPanel \u003d new SuggestListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(suggestListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays suggest place"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleSuggestPlace() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListPanel \u003d new SuggestListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(suggestListPanel.getRoot());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays group list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void handleGroup() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        handleViewTime();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays normal display"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleNormal() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        handleViewTime();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupListPanel getGroupListPanel() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            switch (commandResult.getViewType()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case PLACES:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewPlaces();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case ACTIVITIES:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewActivities();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case TIME:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleViewTime();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case RECENT:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewRecent();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case ALL:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleViewAll();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            case GROUPS:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                handleGroup();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case SUGGEST_ACTIVITY:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleSuggestActivity();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case SUGGEST_PLACE:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleSuggestPlace();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleNormal();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 24,
      "terencemah": 33,
      "harrychengly": 89,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label activities;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        time.setText(\"Individual Time Spent: \" + person.getTime().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "terencemah": 1,
      "l2ejected": 4,
      "harrychengly": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlaceListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the list of places,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and their frequencies in descending order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class PlaceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"PlaceListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cEventDescriptor\u003e frequencyTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e placeColumn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e frequencyColumn;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public PlaceListPanel(ObservableList\u003cEventDescriptor\u003e frequencyList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().nameProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyColumn.setCellValueFactory(cellData -\u003e cellData.getValue().frequencyProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyTable.setItems(frequencyList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecentEventPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the last 5 events with the target person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * in reverse chronological order of event addition."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"RecentEventPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecentEventPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cRecentEvent\u003e eventTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e placeColumn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e activityColumn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e timeColumn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public RecentEventPanel(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventId.setCellValueFactory(cellData-\u003e cellData.getValue().eventIdProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().placeProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().activityProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        timeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().timeProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        eventTable.setItems(list);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 40,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * A UI component that displaces information of a {@code Group}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"SuggestListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label suggest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggest.setText(\"Place : \" + event.getPlace());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        activity.setText(\"Activity : \" + event.getActivity());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String text \u003d event.getTime().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeSpent.setText(\"Total Time Spent : \" + text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!(other instanceof SuggestCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCard card \u003d (SuggestCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return suggest.getText().equals(card.suggest.getText()) \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"SuggestListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SuggestListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ListView\u003cEvent\u003e suggestListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListView.setItems(eventList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListView.setCellFactory(listView -\u003e new SuggestListCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Represents a cell to view the Group in a list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    class SuggestListCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setGraphic(new SuggestCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "harrychengly": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimePieChart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Pie Chart for time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class TimePieChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"TimePieChartPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TimePieChart.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane timePieChartPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public TimePieChart(ObservableList\u003cTime\u003e timeList, ObservableList\u003cGroup\u003e groupList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time personTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time groupTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : personList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personHour \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personMin \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personTime.addTime(personMin, personHour);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : groupList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupHour \u003d oneGroup.getTimeSpent().getHours();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupMin \u003d oneGroup.getTimeSpent().getMinutes();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupTime.addTime(groupMin, groupHour);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(personTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(groupTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        double individualTotalTime \u003d 0.0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        double groupTotalTime \u003d 0.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        individualTotalTime \u003d timeList.get(0).getHours() + (double) (timeList.get(0).getMinutes() / 100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupTotalTime \u003d timeList.get(1).getHours() + (double) (timeList.get(1).getMinutes() / 100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        new PieChart.Data(\"Individual Time\", individualTotalTime),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        new PieChart.Data(\"Group Time\", groupTotalTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        final PieChart timePieChart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart.setTitle(\"Time Spent\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPane.getChildren().add(timePieChart);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/coderlifeinsights.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "harrychengly": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 14,
      "-": 79
    }
  },
  {
    "path": "src/main/resources/view/ActivityListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"frequencyTable\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"150\" text\u003d\"Activities Done\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"frequencyColumn\" prefWidth\u003d\"150\" text\u003d\"Frequency\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 12,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/resources/view/AllEventPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"eventTable\" prefWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"eventId\" prefWidth\u003d\"100\" text\u003d\"EventID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"100\" text\u003d\"Place\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"100\" text\u003d\"Activity\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"timeColumn\" prefWidth\u003d\"100\" text\u003d\"Duration\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 21
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" text\u003d\"\\$timeSpent\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"memberLabel\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"members\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventLabel\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"events\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"events\" text\u003d\"\\$events\" styleClass\u003d\"cell_small_label\"/\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32,
      "harrychengly": 6
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "harrychengly": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CoderLifeInsights\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cImage url\u003d\"@/images/coderlifeinsights.png\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"People\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"viewList\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Insights\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"timePieChartPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"groupList\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Groups\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"groupListPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"100\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minHeight\u003d\"20\" prefHeight\u003d\"20\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 74,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/PlaceListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "      \u003cTableView fx:id\u003d\"frequencyTable\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"150\" text\u003d\"Places Visited\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"frequencyColumn\" prefWidth\u003d\"150\" text\u003d\"Frequency\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 12,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/resources/view/RecentEventPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"eventTable\" prefWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"eventId\" prefWidth\u003d\"100\" text\u003d\"No.\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"100\" text\u003d\"Place\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"100\" text\u003d\"Activity\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"timeColumn\" prefWidth\u003d\"100\" text\u003d\"Duration\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 13,
      "harrychengly": 8
    }
  },
  {
    "path": "src/main/resources/view/SuggestListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cLabel fx:id\u003d\"suggest\" text\u003d\"\\$place\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"activity\" text\u003d\"\\$activity\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" text\u003d\"\\$timeSpent\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 34
    }
  },
  {
    "path": "src/main/resources/view/SuggestListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cListView fx:id\u003d\"suggestListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 8
    }
  },
  {
    "path": "src/main/resources/view/TimePieChartPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cStackPane fx:id\u003d\"timePieChartPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String versionString, int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/coderlifeinsights.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                errorMessage, ("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "harrychengly": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Word parameter cannot be empty\", ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Word parameter should be a single word\", ("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 31,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String deleteCommand \u003d \"delete_person 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand, Class\u003c? extends Throwable\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 35,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(validPerson),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.AddEventTypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddEventCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test //need fix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"0h 30m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 30, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.addEvent(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertTrue(model.getFilteredEventList().equals(expectedModel.getFilteredEventList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test need fix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"1h 1m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 1, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidTimeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, AddEventCommand.MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test need fix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventOfMoreThan1HourUnfilteredList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Time time \u003d new Time(1, 01);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"1h 1m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 1, 01);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_THIRD_PERSON.getOneBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event finalEvent \u003d new Event(activity, place, new Time(30, 0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        finalEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final AddEventCommand standardCommand \u003d new AddEventCommand(finalEvent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand commandWithSameValues \u003d new AddEventCommand(finalEvent);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event anotherEvent \u003d new Event(activity, place, new Time(30, 0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        anotherEvent.setWithPerson(2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(anotherEvent)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event thirdEvent \u003d new Event(activity, \"anywhere 2\", new Time(30, 0));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        thirdEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(thirdEvent)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event fourthEvent \u003d new Event(\"test 2\", place, new Time(30, 0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fourthEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(fourthEvent)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event fifthEvent \u003d new Event(activity, place, new Time(45, 0));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fifthEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(fifthEvent)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 22,
      "l2ejected": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void constructorNullGroupThrowsNullGroupPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGroupCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void executeGroupAcceptedByModelAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        validGroup.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult commandResult \u003d new AddGroupCommand(validGroup).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void executeDuplicateGroupThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        validGroup.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(validGroup);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(CommandException.class, AddGroupCommand.MESSAGE_DUPLICATE_GROUP, ("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e addGroupCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group soc \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group rc \u003d new GroupBuilder().withName(\"RC Friends\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addSoCCommand \u003d new AddGroupCommand(soc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addRcCommand \u003d new AddGroupCommand(rc);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object so should be true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(addSoCCommand.equals(addSoCCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values so should be true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addSoCCopy \u003d new AddGroupCommand(soc);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(addSoCCopy.equals(addSoCCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //differeny types so should false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse((\"sample text\").equals(addSoCCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //equality with null should be false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addRcCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different groups should be false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addRcCommand.equals(addSoCCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.group.equals(group);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private class ModelStubAcceptingGroupAdded extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // persons list with sample persons"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(BENSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(CARL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FilteredList\u003cPerson\u003e sampleList \u003d new FilteredList\u003c\u003e(uniquePersonList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return sampleList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean hasGroup(Group toCheck) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(toCheck);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return groupsAdded.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void addGroup(Group toAdd) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            groupsAdded.add(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", ViewType.NORMAL)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", ViewType.HELP)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", ViewType.EXIT)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", ViewType.HELP).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", ViewType.EXIT).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.GroupNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //constants for person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String VALID_TIME \u003d \"000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //constants for group"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_GROUP_NAME_SOC \u003d \"SoC Friends\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_GROUP_NAME_RC \u003d \"RC Friends\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_MEMBER_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_MEMBER_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String NAME_DESC_SOC \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_SOC;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String NAME_DESC_RC \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_RC;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_DESC_1 \u003d \" \" + PREFIX_MEMBER + VALID_MEMBER_INDEX_1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_DESC_2 \u003d \" \" + PREFIX_MEMBER + VALID_MEMBER_INDEX_2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_NAME_SPECIALCHAR \u003d \" \" + PREFIX_NAME + \"!@#FIP^\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_MEMBER_NOT_INT \u003d \" \" + PREFIX_MEMBER + \"sdfdsfds\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DESC_AMY \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DESC_BOB \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            System.out.println(\"Expected feedback to user: \" + expectedCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            System.out.println(\"Actual feedback to user\" + result.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new AssertionError(ce.getMessage(), ce);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the group at the given {@code targetIndex}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param model the current model"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param targetIndex the targetted index"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void showGroupAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final String[] splitName \u003d group.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(new GroupNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 76,
      "l2ejected": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(targetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showNoGroup(expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, targetIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(outOfBounds.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBounds);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand1 \u003d new DeleteGroupCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand2 \u003d new DeleteGroupCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand1Copy \u003d new DeleteGroupCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(deleteGroupCommand1Copy.equals(deleteGroupCommand1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(deleteGroupCommand1.equals(deleteGroupCommand1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different groups -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(deleteGroupCommand2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // null object -\u003e return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void showNoGroup(Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(p -\u003e false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(model.getFilteredGroupList().isEmpty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedPerson \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                personInList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person personInFilteredList \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person personInList \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * address book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        outOfBoundIndex, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 37,
      "l2ejected": 4,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.EditGroupDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group editedGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e newMemberIds \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group firstGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setMemberIDs(newMemberIds);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"new name\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(firstGroup, editedGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group anotherGroup \u003d model.getFilteredGroupList().get(2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"only changing the name field\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(anotherGroup, editedGroup);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), new EditGroupDescriptor());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group editedGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group secondGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"CS2103\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"CS2103\").build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(secondGroup, editedGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_duplicateGroupUnfilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group firstGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(firstGroup).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(2), descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_duplicateGroupFilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d model.getAddressBook().getGroupList().get(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Index.fromOneBased(1), new EditGroupDescriptorBuilder(group).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidGroupIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(\"Any name\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(outOfBounds, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidGroupIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(outOfBounds.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(outOfBounds,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"any name\").build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor copyDescriptor \u003d new EditGroupDescriptorBuilder().withName(\"sample\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .withMemberIds(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3))).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), copyDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand copy \u003d new EditGroupCommand(Index.fromOneBased(1), copyDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(editGroupCommand.equals(copy));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(editGroupCommand.equals(editGroupCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //other types -\u003e false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //different index -\u003e false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(new EditGroupCommand(Index.fromOneBased(2), copyDescriptor)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //different descriptor -\u003e false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(new EditGroupCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"another name\").build())));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, ViewType.EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, ViewType.HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"life.csv\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"group.csv\").toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"event.csv\").toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand firstImportCommand \u003d new ImportCommand(\"testing.csv\", \"testing2.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand secondImportCommand \u003d new ImportCommand(\"testing2.csv\", \"testing.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstImportCommand.equals(firstImportCommand));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand firstImportCommandCopy \u003d new ImportCommand(\"testing.csv\", \"testing2.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstImportCommand.equals(firstImportCommandCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different file -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(secondImportCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ListGroupCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void initialSetup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ListGroupCommand.MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ListGroupCommand.MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand firstSuggestCommand \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand secondSuggestCommand \u003d new SuggestCommand(\"place\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstSuggestCommand.equals(firstSuggestCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand firstSuggestCommandCopy \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstSuggestCommand.equals(firstSuggestCommandCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different file -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(secondSuggestCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_zeroParameters_noSuggestionParameterProvided() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String emptyParameter \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(emptyParameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandFailure(suggestCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_wrongParameters_notSuggestionKeyword() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String wrongParameter \u003d \"wrong\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(wrongParameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandFailure(suggestCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_person_personSuggested() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_PERSON_SUGGEST_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        expectedModel.suggestPerson();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandSuccess(suggestCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.testutil.TypicalGroups;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private Model personModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private Model groupModel \u003d new ModelManager(TypicalGroups.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand firstViewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", InsightType.PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand secondViewCommand \u003d new ViewCommand(INDEX_SECOND_PERSON, \"places\", InsightType.PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand thirdViewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"recent\", InsightType.PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand fourthViewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", InsightType.GROUP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand firstViewCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", InsightType.PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommandCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different index parameter -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(secondViewCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different parameter parameter -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(thirdViewCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        //different insight type parameter -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(fourthViewCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        showPersonAtIndex(personModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(personModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c personModel.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex, \"places\", InsightType.PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandFailure(viewCommand, personModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_invalidGroupIndex_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex, \"recent\", InsightType.GROUP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandFailure(viewCommand, personModel, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewAll_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"all\", InsightType.ALL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(ViewCommand.MESSAGE_ALL_EVENTS, ViewType.ALL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewAllRecent_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"recent\", InsightType.ALL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(ViewCommand.MESSAGE_RECENT_ALL, ViewType.RECENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewTime_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"time\", InsightType.ALL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(ViewCommand.MESSAGE_ALL_TIME, ViewType.TIME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewPersonPlaces_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", InsightType.PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_PLACE + \"Alice Pauline.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.PLACES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewPersonActivities_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"activities\", InsightType.PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_ACTIVITY + \"Alice Pauline.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.ACTIVITIES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewPersonRecent_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"recent\", InsightType.PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_RECENT_PERSON + \"Alice Pauline.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.RECENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, personModel, result, personModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewGroupPlaces_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", InsightType.GROUP);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_PLACE + \"SoC Friends.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.PLACES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, groupModel, result, groupModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewGroupActivities_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"activities\", InsightType.GROUP);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_ACTIVITY + \"SoC Friends.\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.ACTIVITIES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, groupModel, result, groupModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void execute_viewGroupRecent_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"recent\", InsightType.GROUP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String expectedMessage \u003d ViewCommand.MESSAGE_RECENT_PERSON + \"SoC Friends.\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage, ViewType.RECENT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertCommandSuccess(viewCommand, groupModel, result, groupModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 126,
      "l2ejected": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand places \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand activities \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"activities\", 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(places.equals(places));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(activities.equals(activities));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand placesCopy \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(places.equals(placesCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand places2 \u003d new ViewGroupCommand(INDEX_SECOND_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(places2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different parameters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(activities));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand command \u003d new ViewGroupCommand(outOfBoundIndex, \"places\", 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidParameter_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand command \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"test\", 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(command, model, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //public void execute_places_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //Group group \u003d model.getFilteredGroupList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //ViewCommand_group command \u003d new ViewCommand_group(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //String expectedMessage \u003d ViewCommand_group.MESSAGE_PLACE + group.getName() + \".\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //expectedModel.showGroupPlaceList(group);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person expectedPersonMultipleTags \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                INVALID_NAME_DESC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 133,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String nonEmptyEvent \u003d \"Some event.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_memberIndexSpecified_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_groupIndexSpecified_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1111\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithGroup(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidTimeField_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyHourField_success () {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"11\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        event.setWithGroup(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyActivity_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyTime_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyPlace_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidTime_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15s\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_stringAsTime_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15 s\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"s\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(ParserUtil.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyIndex_failure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(ParserUtil.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_requiredFieldsMissing_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \" \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d \"\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_bothMemberAndGroupPrefixPresent_failure() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "l2ejected": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEMBER_NOT_INT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_SPECIALCHAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.RC_NO_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.SOC_NO_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_allFields_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(RC_NO_TIME).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // normal execution"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_RC + MEMBER_DESC_1 + MEMBER_DESC_2,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddGroupCommand(expectedGroup)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_SOC + NAME_DESC_RC + MEMBER_DESC_1 + MEMBER_DESC_2,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddGroupCommand(expectedGroup)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withoutMembersIds_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(SOC_NO_TIME).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_SOC, new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withInvalidMemberIds_fail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d AddGroupCommandParser.MEMBER_NOT_INT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RC + INVALID_MEMBER_NOT_INT, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withInvalidName_fail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_SPECIALCHAR, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteCommand command \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (DeleteCommand)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (EditCommand)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (FindCommand)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parseCommand_add_event() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String index \u003d \"1\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"some place\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String time \u003d \"1111\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(AddEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + activity"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_MEMBER + index"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_PLACE + place"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_TIME + time);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(Integer.parseInt(index));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_listGroup() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD) instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(parser.parseCommand(ImportCommand.COMMAND_WORD + \" l/src/test/data/CsvFilesTest/life.csv \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \"g/src/test/data/CsvFilesTest/group.csv e/src/test/data/CsvFilesTest/event.csv\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                instanceof ImportCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_add_group() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(AddGroupCommand.COMMAND_WORD + \" n/SoCFriends\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                instanceof AddGroupCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_delete_group() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(DeleteGroupCommand.COMMAND_WORD + \" 2\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                instanceof DeleteGroupCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 48,
      "l2ejected": 16,
      "harrychengly": 8,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_AMY"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 81,
      "-": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_SOC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private EditGroupCommandParser parser \u003d new EditGroupCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //no index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_SOC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_EXPORT_CSV \u003d \"lifeTEST.csv\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_EXPORT_CSV \u003d \"groupTEST.csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_EXPORT_CSV \u003d \"eventTEST.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ExportCommand expectedExportCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportCommand(\"lifeTEST.csv\", \"groupTEST.csv\", \"eventTEST.csv\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" l/lifeTEST.csv\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" g/groupTEST.csv\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" e/eventTEST.csv\", expectedExportCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        //multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" \\n l/\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + TEST_LIFE_EXPORT_CSV"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t g/\" + TEST_GROUP_EXPORT_CSV"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t e/\" + TEST_EVENT_EXPORT_CSV"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \"\\t\", expectedExportCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \" l/ \" + \" g/ \" + \" e/ \","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(\"Empty file name to export provided.\" + \"\\n\" + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"life.csv\").toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"group.csv\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"event.csv\").toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsImportCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand expectedImportCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ImportCommand(TEST_LIFE_CSV, \"\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" l/\" + TEST_LIFE_CSV + \" g/\" + TEST_GROUP_CSV"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" e/\" + TEST_EVENT_CSV, expectedImportCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" \\n l/\" + TEST_LIFE_CSV"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t g/\" + TEST_GROUP_CSV + \" \\n \\t e/\" + TEST_EVENT_CSV + \"\\t\", expectedImportCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \" l/ \" + \" g/ \" + \" e/ \","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_PATH + \"\\n\" + ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_PATH \u003d \"testing123.csv\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_SUGGEST \u003d \"invalid parameter\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_PLACES \u003d \"ORCHARD\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String VALID_PATH \u003d \"README.adoc\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                MESSAGE_INVALID_INDEX, ("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePath((String) null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePath(INVALID_PATH));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_validValueWithoutWhitespace_returnsPath() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedPath \u003d VALID_PATH;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePath(VALID_PATH));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_validValueWithWhitespace_returnsTrimmedPath() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String pathWithWhitespace \u003d WHITESPACE + VALID_PATH + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedPath \u003d VALID_PATH;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePath(pathWithWhitespace));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parseTime_emptyString_success() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String input \u003d \"0h 0m\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time expectedTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(input));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSuggest(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_emptyString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggest(\"\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggest(INVALID_SUGGEST));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"person\", ParserUtil.parseSuggest(\"person\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathPerson() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"person\" + WHITESPACE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"person\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsPlace() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"place\", ParserUtil.parseSuggest(\"place\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathPlace() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"place\" + WHITESPACE;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"place\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsActivity() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"activity\", ParserUtil.parseSuggest(\"activity\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathActivity() throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"activity\" + WHITESPACE;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"activity\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "l2ejected": 7,
      "harrychengly": 78,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestPersonCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" person\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" person\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestPlaceCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"place\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" place\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \"  place   \", expectedSuggestCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestActivityCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"activity\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" activity\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" activity   \", expectedSuggestCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.InsightType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ViewCommandParser vcp \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e vcp.parse(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_extraPrefix_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"places m/1 g/1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"a m/1 g/1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput3 \u003d \"places m/1 g/0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput1, ViewCommand.MESSAGE_EXTRA_PREFIX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput2, ViewCommand.MESSAGE_EXTRA_PREFIX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput3, ViewCommand.MESSAGE_EXTRA_PREFIX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"places m/a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidParameter_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"times\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"places m/a\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"activities m/0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput3 \u003d \"places m/\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput1, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput2, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput3, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidGroupIndex_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"places g/a\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"activities g/0\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput3 \u003d \"places g/\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput1, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput2, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput3, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_missingIndex_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"places\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"activities\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput1, String.format(ViewCommand.MESSAGE_INDEX_REQUIRED,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput2, String.format(ViewCommand.MESSAGE_INDEX_REQUIRED,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_forbiddenIndex_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"all m/1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"time g/1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput1, String.format(ViewCommand.MESSAGE_INDEX_FORBIDDEN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput2, String.format(ViewCommand.MESSAGE_INDEX_FORBIDDEN,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyParameter_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput \u003d \"m/1 g/1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseFailure(vcp, userInput, ViewCommand.MESSAGE_INVALID_PARAMETER"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidParameter_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput \u003d \"a m/1\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(vcp, userInput, ViewCommand.MESSAGE_INVALID_PARAMETER"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_highIndex_success() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput \u003d \"places m/999\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput, new ViewCommand(ParserUtil.parseIndex(\"999\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"places\", InsightType.PERSON));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_viewPlaces_success() throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"places m/2\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"places g/3\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput1, new ViewCommand(ParserUtil.parseIndex(\"2\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"places\", InsightType.PERSON));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput2, new ViewCommand(ParserUtil.parseIndex(\"3\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"places\", InsightType.GROUP));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_viewActivities_success() throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"activities m/2\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"activities g/3\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput1, new ViewCommand(ParserUtil.parseIndex(\"2\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"activities\", InsightType.PERSON));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput2, new ViewCommand(ParserUtil.parseIndex(\"3\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"activities\", InsightType.GROUP));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_viewRecent_success() throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput1 \u003d \"recent m/2\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput2 \u003d \"recent\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput1, new ViewCommand(ParserUtil.parseIndex(\"2\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"recent\", InsightType.PERSON));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput2, new ViewCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"recent\", InsightType.ALL));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_viewAll_success() throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput \u003d \"all\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput, new ViewCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"all\", InsightType.ALL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_viewTime_success() throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String userInput \u003d \"time\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertParseSuccess(vcp, userInput, new ViewCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \"time\", InsightType.ALL));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 131,
      "l2ejected": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ViewGroupCommandParser parser \u003d new ViewGroupCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyIndex_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"places \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, \"Index is not a non-zero unsigned integer.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyParameter_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_GROUP + \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidParameter_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"test\" + PREFIX_GROUP + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_allValidArguments_success() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String parameter \u003d \"activities\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String idx \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d parameter + \" \" + PREFIX_GROUP + idx;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(idx);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand expectedCommand \u003d new ViewGroupCommand(index, parameter, ViewGroupCommand.TYPE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "l2ejected": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPersons(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasGroup(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personsNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addressBook.hasGroup(g1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addGroup(group);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(editedAlice);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup_test_returnFalse() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertThrows(GroupNotFoundException.class, () -\u003e addressBook.removeGroup((new Group(new Name(\"SoC Friend\"),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new PlaceList(new ArrayList\u003cString\u003e()), new ActivityList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new TimeList(new ArrayList\u003cString\u003e())))));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.groups;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.events;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 41,
      "terencemah": 5,
      "harrychengly": 29,
      "l2ejected": 5,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersons(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGroup(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(BENSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(modelManager.hasPersons(personList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(BENSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(modelManager.hasPersons(personList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroupTest_returnsTrue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g2 \u003d new Group(new Name(\"RC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.addGroup(g1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.addGroup(g2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(modelManager.hasGroup(g1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(modelManager.hasGroup(g2));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g2 \u003d new Group(new Name(\"RC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(modelManager.hasGroup(g1));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(modelManager.hasGroup(g2));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGroupList().remove(0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvToAddressBook(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvGroupsToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvGroupsToAddressBook(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvEventsToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvEventsToAddressBook(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showPlaceList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showPlaceList(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showActivityList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showActivityList(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showRecentList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showRecentList(null));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyRecent_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.copyRecent(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyTime_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.copyTime(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.updateFilteredPersonList("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 31,
      "terencemah": 20,
      "harrychengly": 49,
      "l2ejected": 6,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueEventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.remove(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Event firstEvent \u003d new Event(\"something\", \"somewhere\", new Time(11, 11));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Event secondEvent \u003d new Event(\"something\", \"somewhere\", new Time(11, 11));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different EventId -\u003e return false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(firstEvent.equals(secondEvent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same Event -\u003e return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.equals(firstEvent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(secondEvent.equals(secondEvent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same EventId, different Time -\u003e return true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event test \u003d firstEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        test.setTime(new Time(22, 22));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(test.equals(firstEvent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.isSameEvent(firstEvent));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event test \u003d firstEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        test.setTime(new Time(22, 22));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(test.isSameEvent(firstEvent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(firstEvent.isSameEvent(secondEvent));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void sameTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event thirdEvent \u003d new Event(\"something\", \"somewhere\", new Time(22, 22));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        thirdEvent.setTime(new Time(11, 11));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(thirdEvent.getTime().equals(new Time(11, 11)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.toString().equals(\"Event: something place: somewhere for 11h 11m\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.TypicalGroups;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group soc \u003d TypicalGroups.SOC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group rc \u003d TypicalGroups.RC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.equals(soc));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group socCopy \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.equals(socCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different values -\u003e false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(soc.equals(rc));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //without member IDs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String socExpectedRepresentation \u003d \"Name: SoC Friends\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.toString().equals(socExpectedRepresentation));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //with member IDs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String rcExpectedRepresentation \u003d \"Name: RC Friends. Members: 1, 2, 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        rc.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(rc.toString().equals(rcExpectedRepresentation));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 43,
      "l2ejected": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueGroupListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.SOC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueGroupListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullGroups_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.containsGroups(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_groupInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(uniqueGroupList.contains(group));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void containsGroups_groupsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(SOC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupList.add(SOC);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(uniqueGroupList.contains(SOC));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.removeGroup(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_exitingGroup_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(SOC);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.removeGroup(SOC);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        UniqueGroupList expectedList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(expectedList, uniqueGroupList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.addGroup(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add_duplicateGroup_throwsDuplicateGroupException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.addGroup(group));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addAll_duplicateGroup_throwsDuplicateGroupsException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArrayList\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniqueGroupList.addAll(groups);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.addAll(groups));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupNullTargetGroupThrowsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.setGroup(null, group));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupNullEditedGroupThrowsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.setGroup(group, null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupEditedGroupHasNonUniqueIdentityThrowsDuplicatePersonException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group1 \u003d new Group(new Name(\"Cinnamon Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.setGroup(group, group1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupEditedGroupIsSameGroupSuccess() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()), new TimeList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.setGroup(group, group);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        UniqueGroupList expectedUniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedUniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups_nullUniqueGroupsList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueGroupList.setGroups((UniqueGroupList) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        ) -\u003e uniqueGroupList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 113,
      "terencemah": 9,
      "harrychengly": 10,
      "l2ejected": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Address.isValidAddress("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EventDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class EventDescriptorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor1 \u003d new EventDescriptor(\"abc\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor2 \u003d new EventDescriptor(\"abc\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor3 \u003d new EventDescriptor(\"def\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor4 \u003d new EventDescriptor(\"abc\", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(eventDescriptor1, eventDescriptor1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(eventDescriptor1, eventDescriptor2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different names"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(eventDescriptor1, eventDescriptor3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different frequencies"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(eventDescriptor1, eventDescriptor4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor1 \u003d new EventDescriptor(\"abc\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        EventDescriptor eventDescriptor2 \u003d new EventDescriptor(\"abc\", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        eventDescriptor1.increment();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(eventDescriptor1, eventDescriptor2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FrequencyListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class FrequencyListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ArrayList\u003cString\u003e strings1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ArrayList\u003cString\u003e strings2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Fills the test ArrayLists with arbitrary strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void fillStringList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings1.add(\"abc\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings1.add(\"def\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings1.add(\"ghi\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings2.add(\"abc\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings2.add(\"def\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings2.add(\"ghi\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings2.add(\"ghi\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        fillStringList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        FrequencyList list1 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        FrequencyList list2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1.generate(strings1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list2.generate(strings1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(list1.equals(list2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        fillStringList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        FrequencyList list1 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        FrequencyList list2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1.generate(strings1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list2.generate(strings2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1.add(\"ghi\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(list1.equals(list2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                predicate.test("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        new PersonBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withName(\"Alice\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 21,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // same name, same phone, different time -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTime(\"2h 0m\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTime(\"1h 0m\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18,
      "l2ejected": 5,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RecentEventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private PlaceList places \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ActivityList activities \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TimeList times \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Fills all the list fields with an arbitrary string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void fillLists() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings.add(\"abc\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        places.setPlaceList(strings);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activities.setActivityList(strings);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times.setTimeList(strings);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        fillLists();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEventList list1 \u003d new RecentEventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEventList list2 \u003d new RecentEventList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1.generate(places, activities, times);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list2.generate(places, activities, times);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(list1, list2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RecentEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event1 \u003d new RecentEvent(\"a\", \"b\", \"c\", \"d\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event2 \u003d new RecentEvent(\"a\", \"b\", \"c\", \"d\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event3 \u003d new RecentEvent(\"e\", \"b\", \"c\", \"d\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event4 \u003d new RecentEvent(\"a\", \"e\", \"c\", \"d\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event5 \u003d new RecentEvent(\"a\", \"b\", \"e\", \"d\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        RecentEvent event6 \u003d new RecentEvent(\"a\", \"b\", \"c\", \"e\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(event1, event1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertEquals(event1, event2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different eventId"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(event1, event3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different place"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(event1, event4);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different activity"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(event1, event5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(event1, event6);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(editedAlice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.addAll(personList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.addAll(personList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DuplicatePersonException.class, ("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 17,
      "harrychengly": 35,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MINUTES_RANGE_ERROR \u003d \"Minutes must be within 0-59 (inclusive).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String HOURS_RANGE_ERROR \u003d \"Hours must be 0 or more\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationValid() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertTrue(time.getHours() \u003d\u003d 2 \u0026\u0026 time.getMinutes() \u003d\u003d 59);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationInvalid_minutes() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Throwable exception \u003d Assertions.assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e new Time(162, 2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(exception.getMessage(), MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationInvalid_hours() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Throwable exception \u003d Assertions.assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e new Time(16, -5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(exception.getMessage(), HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeEqualsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time1.equals(time2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAnotherObjectEqualsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(50, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(new Name(\"Dummy\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time.equals(group));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeHashCodeDifferent() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(59, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time1.hashCode() \u003d\u003d time2.hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeToString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(\"2h 59m\", time.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAddTime_changeHour_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.addTime(1, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(0, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(time1, time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAddTime_noChangeHour_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(25, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.addTime(25, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(50, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(time, time2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMinutesRangeError() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            time.setMinutes(120);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMinutesSuccessfully() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.setMinutes(2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(2, time.getMinutes());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setHoursRangeSuccessfully() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.setHours(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(1, time.getHours());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setHoursRangeError() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            time.setHours(-1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 106,
      "terencemah": 2,
      "l2ejected": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedGroupTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"soc friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()), new TimeList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(g1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(g1, group.toModelType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18,
      "terencemah": 2,
      "l2ejected": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final String VALID_TIME \u003d \"000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final List VALID_PLACELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final List VALID_ACTIVITYLIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_TIME,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 21,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, ("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        ) -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 17,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddEventTypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventTypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private AddEventTypicalPersons() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "l2ejected": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to help with building Addressbook objects. Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * consistency with our custom {@link #assertThrows(Class, String, Executable)} method. To"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * standardize API calls in this project, users should use this method instead of {@link"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType, String expectedMessage, Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditGroupDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to build {@code EditGroupDescriptor} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private EditGroupDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder(EditGroupDescriptor descriptor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor(descriptor);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a {@code EditGroupDescriptor} based on {@code Group} instance provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder(Group group) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor.setName(group.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor.setMemberIds(group.getMembers());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the {@code Name} of the {@code EditGroupDescriptor}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the member ids of the {@code EditGroupDescriptor}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder withMemberIds(ArrayList\u003cInteger\u003e ids) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor.setMemberIds(ids);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Builds an edit group descriptor based on the descriptor in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * the current {@code EditGroupDescriptorBuilder } instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "      * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to help with building Group Objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"SoC Friends\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final int DEFAULT_MINS \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final int DEFAULT_HOURS \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final ArrayList\u003cInteger\u003e DEFAULT_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_PLACELIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_ACTIVITYLIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_TIMELIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time timeSpent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e eventIDs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private PlaceList places;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ActivityList activities;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TimeList times;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d new Time(DEFAULT_MINS, DEFAULT_HOURS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIds \u003d DEFAULT_LIST;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d DEFAULT_LIST;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d new PlaceList(DEFAULT_PLACELIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d new ActivityList(DEFAULT_ACTIVITYLIST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d new TimeList(DEFAULT_TIMELIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name \u003d groupToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent \u003d groupToCopy.getTimeSpent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        memberIds \u003d groupToCopy.getMembers();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        eventIDs \u003d groupToCopy.getEvents();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d groupToCopy.getPlaceList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d groupToCopy.getActivityList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d groupToCopy.getTimeList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for group Id."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withId(int id) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withTime(String time) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for withMembers."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param memberIds"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withMembers(ArrayList\u003cInteger\u003e memberIds) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIds \u003d memberIds;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for withEvents."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param eventIDs"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withEvents(ArrayList\u003cInteger\u003e eventIDs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d eventIDs;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code PlaceList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public GroupBuilder withPlaceList(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.places \u003d ParserUtil.parsePlaces(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public GroupBuilder withActivityList(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activities \u003d ParserUtil.parseActivities(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Builds a group with params in this class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Group group \u003d new Group(name, places, activities, times);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setTimeSpent(timeSpent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setMemberIDs(memberIds);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setEventIDs(eventIDs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 101,
      "terencemah": 6,
      "l2ejected": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvToAddressBook(List\u003cPerson\u003e importedPeople) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showPlaceList(Person target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showActivityList(Person target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showRecentList(Person target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showTime() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestPerson() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestPlace() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestActivity() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void copyRecent(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void copyTime(ObservableList\u003cTime\u003e list) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showGroupRecentList(Group groupToView) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupActivityList(Group groupToView) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupPlaceList(Group groupToView) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 231,
      "terencemah": 5,
      "l2ejected": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int DEFAULT_MINS \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int DEFAULT_HOURS \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_PLACELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_ACTIVITYLIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_TIMELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private PlaceList places;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ActivityList activities;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TimeList times;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        time \u003d new Time(DEFAULT_MINS, DEFAULT_HOURS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d new PlaceList(DEFAULT_PLACELIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d new ActivityList(DEFAULT_ACTIVITYLIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d new TimeList(DEFAULT_TIMELIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        time \u003d personToCopy.getTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d personToCopy.getPlaceList2();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d personToCopy.getActivityList2();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d personToCopy.getTimeList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code Time} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withTime(String time) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code PlaceList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withPlaceList(String input) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.places \u003d ParserUtil.parsePlaces(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withActivityList(String input) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activities \u003d ParserUtil.parseActivities(input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Sets the {@code TimeList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public PersonBuilder withTimeList(String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.times \u003d ParserUtil.parseTimes(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new Person(name, phone, email, address, tags, time, places, activities, times);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 15,
      "l2ejected": 42,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getPhone()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getEmail()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getAddress()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"{%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  }%n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"}\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class containing list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group SOC \u003d new GroupBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withName(\"SoC Friends\").withTime(\"1h 1m\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group RC \u003d new GroupBuilder().withName(\"RC Friends\").withTime(\"2h 2m\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group NS \u003d new GroupBuilder().withName(\"NS Friends\").withTime(\"0h 30m\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group SOC_NO_TIME \u003d new GroupBuilder().withName(\"SoC Friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group RC_NO_TIME \u003d new GroupBuilder().withName(\"RC Friends\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withMembers(new ArrayList\u003c\u003e(Arrays.asList(1, 2))).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TypicalGroups() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical groups"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ab.addGroup(group);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SOC, RC, NS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "l2ejected": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "-": 107
    }
  }
]
