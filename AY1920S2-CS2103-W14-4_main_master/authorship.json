[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    archiveName \u003d \u0027CoderLifeInsights.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u0027site-name\u0027: \u0027CoderLifeInsights\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W14-4/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 4,
      "l2ejected": 1,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        appParameters.setConfigPath("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eThis is a workaround for the following error when MainApp is made the entry point of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eError: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eThe reason is that MainApp extends Application. In that case, the LauncherHelper will check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * module system so it can\u0027t find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eBy having a separate main class (Main) that doesn\u0027t extend Application to be the entry point"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * of the application, we avoid this issue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CoderLifeInsights ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * not found, or an empty address book will be used instead if errors occur when reading {@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CoderLifeInsights\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"Config file at \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + configFilePathUsed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"UserPrefs file at \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + prefsFilePath"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty CoderLifeInsights\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        logger.info(\"Starting CoderLifeInsights \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CoderLifeInsights ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 24,
      "harrychengly": 8,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { // this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"The group index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Path provided must exist.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "harrychengly": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new Version("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003e{@code Index} should be used right from the start (when parsing in a new user input), so that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * if the current component wants to communicate with another component, it can send an {@code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Index} to avoid having to know what base the other component is using for its index. However,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * after receiving the {@code Index}, that component can convert it back to an int if the index will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static ObjectMapper objectMapper \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            new ObjectMapper()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    .findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    .registerModule("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * file is a valid json file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                   given here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * \u003cp\u003eReturns null if there are no matches"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 19,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * match is required. \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * examples:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return value \u003e 0"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of groups"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of events"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cEventDescriptor\u003e getFrequencyList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cRecentEvent\u003e getRecentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cTime\u003e getTimeList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "terencemah": 6,
      "harrychengly": 12,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return model.getFrequencyList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return model.getRecentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return model.getTimeList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "terencemah": 12,
      "harrychengly": 12,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_person\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"98765432 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"johnd@example.com \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"owesMoney\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Represents the command to add a new event to CoderLifeInsights."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an event with a group or an individual \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"that adds an activity, place and time to the subject. \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: ACTIVITY \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"PLACE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_MEMBER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"TIME \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"OR \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: ACTIVITY \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"PLACE \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_GROUP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"TIME \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \" Dancing \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_PLACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"SCAPE \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + PREFIX_MEMBER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + PREFIX_TIME"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"300\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_INPUT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            \"Time parameter needs to be unsigned integers of at least 2 digits.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"For example: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[5 minutes \u003d 05]; \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[1 hour \u003d 100]; \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[10 hours and 30 minutes \u003d 1030]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Time parameter has to be greater than 0 minutes.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event successfully added: %1$s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Event with given arguments already exists. Please try again.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Activity: %1$s, Index: %2$d, Place: %3$s, Time: %4$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddEventCommand.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.toAdd \u003d event;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (toAdd.getTime().equals(new Time(0, 0))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (toAdd.getWithPerson().isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // edit person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d toAdd.getWithPerson().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person toEdit \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Person to edit is \" + toEdit.getName().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time curr \u003d toEdit.getTime();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Time newTime \u003d curr.addTime2(toAdd.getTime().getMinutes(), toAdd.getTime().getHours());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            PlaceList currentPlaceList \u003d toEdit.getPlaceList2();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            PlaceList newPlaceList \u003d currentPlaceList.addPlace(toAdd.getPlace());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ActivityList currentActivityList \u003d toEdit.getActivityList2();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ActivityList newActivityList \u003d currentActivityList.addActivity(toAdd.getActivity());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList currentTimeList \u003d toEdit.getTimeList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            TimeList newTimeList \u003d currentTimeList.addTime(toAdd.getTime().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person editedPerson \u003d new Person(toEdit.getName(), toEdit.getPhone(), toEdit.getEmail(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    toEdit.getAddress(), toEdit.getTags(), newTime, newPlaceList, newActivityList, newTimeList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Edited person is \" + editedPerson.getName().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.setPerson(toEdit, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.addEvent(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // edit group"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d toAdd.getWithGroup().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Group toEdit \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time curr \u003d toEdit.getTimeSpent();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Time newTime \u003d curr.addTime2(toAdd.getTime().getMinutes(), toAdd.getTime().getHours());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            PlaceList currentPlaceList \u003d toEdit.getPlaceList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            PlaceList newPlaceList \u003d currentPlaceList.addPlace(toAdd.getPlace());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ActivityList currentActivityList \u003d toEdit.getActivityList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ActivityList newActivityList \u003d currentActivityList.addActivity(toAdd.getActivity());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Group editedGroup \u003d new Group(toEdit.getName(), newPlaceList, newActivityList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            editedGroup.setMemberIDs(toEdit.getMembers());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            editedGroup.setTimeSpent(newTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editedGroup.setMemberIDs(toEdit.getMembers());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArrayList\u003cInteger\u003e events \u003d toEdit.getEvents();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            events.add(toAdd.getEventId());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editedGroup.setEventIDs(events);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.setGroup(toEdit, editedGroup);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            model.addEvent(toAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ViewType.GROUPS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof AddEventCommand)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand e \u003d (AddEventCommand) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.toAdd.getActivity().equalsIgnoreCase(e.toAdd.getActivity())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getPlace().equalsIgnoreCase(e.toAdd.getPlace())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getTime().equals(e.toAdd.getTime())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getWithGroup().equals(e.toAdd.getWithGroup())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.toAdd.getWithPerson().equals(e.toAdd.getWithPerson());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 72,
      "terencemah": 4,
      "l2ejected": 94,
      "harrychengly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the command to add a new group to CoderLifeInsights."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_group\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Adds a new social group with given name and \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"given (if any) person IDs as members\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Name: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" Members]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"SoC Friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"3 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Group with given name already exists. \" + \"Please try again with another name\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"Person(s) with given index does not exist\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBERS \u003d \"Group contains duplicate member indexes. Please try again \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            + \"with unique member indexes.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Group toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddGroupCommand(Group group) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.toAdd \u003d group;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (model.hasGroup(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e members \u003d toAdd.getMembers();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (set.size() \u003c members.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBERS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int currIndex \u003d members.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (currIndex \u003e lastShownList.size() || currIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.addGroup(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ViewType.GROUPS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof AddGroupCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand otherCommand \u003d (AddGroupCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 96,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CoderLifeInsights has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ViewType viewType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public CommandResult(String feedbackToUser, ViewType viewType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * set to their default value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this(feedbackToUser, ViewType.NORMAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewType getViewType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return viewType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 viewType \u003d\u003d otherCommandResult.viewType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return Objects.hash(feedbackToUser, viewType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 8,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_person\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastGroupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Group group: lastGroupList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cInteger\u003e currMembers \u003d group.getMembers();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            logger.info(\"Index to remove is \" + targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            boolean groupChanged \u003d currMembers.remove(Integer.valueOf(targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (groupChanged) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Group editedGroup \u003d new Group(group.getName(), group.getPlaceList(), group.getActivityList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setTimeSpent(group.getTimeSpent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArrayList\u003cInteger\u003e newMembers \u003d new ArrayList\u003c\u003e(currMembers);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setMemberIDs(newMembers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editedGroup.setEventIDs(group.getEvents());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.setGroup(group, editedGroup);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 29,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Deletes a group identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_group\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Deletes the group identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DeleteGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof DeleteGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"PHONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"EMAIL] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_ADDRESS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_PHONE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"91234567 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_EMAIL"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"This person already exists in the Coder Life Insights.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //logger"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditCommand.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"edited person\u0027s phone is \" + editedPerson.getPhone().value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"edited person\u0027s email is \" + editedPerson.getEmail().value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static Person createEditedPerson("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time updatedTime \u003d editPersonDescriptor.getTime().orElse(personToEdit.getTime());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        PlaceList updatedPlaceList \u003d editPersonDescriptor.getPlaceList().orElse(personToEdit.getPlaceList2());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ActivityList updatedActivityList \u003d editPersonDescriptor.getActivityList().orElse(personToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .getActivityList2());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        TimeList updatedTimeList \u003d editPersonDescriptor.getTimeList().orElse(personToEdit.getTimeList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedTime,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                updatedPlaceList, updatedActivityList, updatedTimeList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private PlaceList placeList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        private ActivityList activityList;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        private TimeList timeList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setPlaceList(toCopy.placeList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            setActivityList(toCopy.activityList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, time, placeList, activityList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setPlaceList(PlaceList placeList) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.placeList \u003d placeList;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cPlaceList\u003e getPlaceList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return (placeList !\u003d null) ? Optional.ofNullable(placeList) : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void setActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public Optional\u003cActivityList\u003e getActivityList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return (activityList !\u003d null) ? Optional.ofNullable(activityList) : Optional.empty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        public void setTimeList(TimeList timeList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            this.timeList \u003d timeList;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        public Optional\u003cTimeList\u003e getTimeList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return (timeList !\u003d null) ? Optional.ofNullable(timeList) : Optional.empty();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getPlaceList().equals(e.getPlaceList())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    \u0026\u0026 getActivityList().equals(e.getActivityList());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 45,
      "terencemah": 12,
      "l2ejected": 44,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the command to edit a group in Coder Life Insights."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_group\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Edits the details of the group identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"by the index number used in the displayed group list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"MEMBERS]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"SoC Friends \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + PREFIX_MEMBER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"7\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_EDIT_GROUP_SUCCESS \u003d \"Edited Group: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one edit field must be provided to edit a group\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in Coder Life Insights\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBERS \u003d \"Group contains duplicate member indexes. Please try again \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            + \"with unique member indexes.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"Person(s) with given index does not exist\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final EditGroupDescriptor editGroupDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupCommand(Index index, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(editGroupDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.editGroupDescriptor \u003d editGroupDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //check if member indexes are valid"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (editGroupDescriptor.getMemberIds().isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArrayList\u003cInteger\u003e members \u003d editGroupDescriptor.getMemberIds().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (set.size() \u003c members.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MEMBERS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int currIndex \u003d members.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                if (currIndex \u003e lastPersonList.size() || currIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group editedGroup \u003d createEditedGroup(groupToEdit, editGroupDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!groupToEdit.equals(editedGroup) \u0026\u0026 model.hasGroup(editedGroup)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.setGroup(groupToEdit, editedGroup);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_GROUP_SUCCESS, editedGroup));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates and returns a {@code Group} with the details of {@code groupToEdit}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param groupToEdit"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param editGroupDescriptor"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static Group createEditedGroup(Group groupToEdit, EditGroupDescriptor editGroupDescriptor) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert groupToEdit !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Name updatedName \u003d editGroupDescriptor.getName().orElse(groupToEdit.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time oldTime \u003d groupToEdit.getTimeSpent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (editGroupDescriptor.getMemberIds().isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIds \u003d editGroupDescriptor.getMemberIds().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIds \u003d groupToEdit.getMembers();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e eventIds \u003d groupToEdit.getEvents();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group modifiedGroup \u003d new Group(updatedName, groupToEdit.getPlaceList(), groupToEdit.getActivityList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setTimeSpent(oldTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setMemberIDs(memberIds);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modifiedGroup.setEventIDs(eventIds);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return modifiedGroup;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Stores the details to edit the group with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * of the specified group."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static class EditGroupDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditGroupDescriptor() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public EditGroupDescriptor(EditGroupDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            setMemberIds(toCopy.memberIds);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         * Checks if at least one field is edited by user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, memberIds);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return Optional.ofNullable(this.name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void setMemberIds(ArrayList\u003cInteger\u003e memberIds) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.memberIds \u003d (memberIds !\u003d null) ? new ArrayList\u003c\u003e(memberIds) : null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public Optional\u003cArrayList\u003cInteger\u003e\u003e getMemberIds() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return (memberIds !\u003d null) ? Optional.of(memberIds) : Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (!(other instanceof EditGroupDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            EditGroupDescriptor e \u003d (EditGroupDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getMemberIds().equals(e.getMemberIds());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof EditGroupCommand)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand e \u003d (EditGroupCommand) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editGroupDescriptor.equals(e.editGroupDescriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 209,
      "l2ejected": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, ViewType.EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.storage.ExportFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Exports application Life to CSV."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports application Life to CSV File specified. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"All 3 parameters must be included for successful import: \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"l/LIFE_FILE_PATH \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"g/GROUP_FILE_PATH \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"e/EVENT_FILE_PATH.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Files exported:\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%1$s \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%2$s \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%3$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String EMPTY_FILE \u003d \"Unable to export empty life/group/events.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \" Please add contacts/groups and try again.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String groupFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String lifeFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String eventFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ExportCommand(String lifeFilePath, String groupFilePath, String eventFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.lifeFilePath \u003d lifeFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.groupFilePath \u003d groupFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventFilePath \u003d eventFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!lifeFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportCsv(String.valueOf(model.getAddressBookFilePath()), lifeFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!groupFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportGroupCsv(String.valueOf(model.getAddressBookFilePath()), groupFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (!eventFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportFile().exportEventCsv(String.valueOf(model.getAddressBookFilePath()), eventFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, lifeFilePath, groupFilePath, eventFilePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(EMPTY_FILE), e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 lifeFilePath.equals(((ExportCommand) other).lifeFilePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, ViewType.HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.storage.ImportFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Imports application csv to the CoderLifeInsights."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \": Imports application csv to the CoderLifeInsights. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"All 3 parameters must be included for successful import: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"l/LIFE_FILE_PATH \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"g/GROUP_FILE_PATH \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"e/EVENT_FILE_PATH.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Files imported:\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%1$s \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%2$s \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"%3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Person already exists in the CoderLifeInsights. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Group already exists in the address book. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"Event already exists in the address book. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Please delete duplicate in your import file/current CoderLifeInsights.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String groupFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String lifeFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String eventFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ImportCommand(String lifeFilePath, String groupFilePath, String eventFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.lifeFilePath \u003d lifeFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.groupFilePath \u003d groupFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventFilePath \u003d eventFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!groupFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cGroup\u003e importedGroup \u003d new ImportFile().importGroupCsv(groupFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasGroups(importedGroup)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvGroupsToAddressBook(importedGroup);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!lifeFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cPerson\u003e importedPeople \u003d new ImportFile().importCsv(lifeFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasPersons(importedPeople)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvToAddressBook(importedPeople);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cEvent\u003e importedEvent \u003d new ImportFile().importEventCsv(eventFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (model.hasEvents(importedEvent)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.importCsvEventsToAddressBook(importedEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, lifeFilePath, groupFilePath, eventFilePath));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 lifeFilePath.equals(((ImportCommand) other).lifeFilePath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "harrychengly": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Lists all groups in CoderLifeInsights"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ListGroupCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_groups\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all groups\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Suggests a person/activity/place."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_PERSON \u003d \"person\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"place\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activity\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \": Suggests a person based on time spent/ \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"place or activity based on frequency \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_PERSON"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"/\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"/\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + KEYWORD_PLACE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \"\\nExample: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    + \" person\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_PERSON_SUGGEST_SUCCESS \u003d \"Person suggestion provided.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_SUGGEST_SUCCESS \u003d \"Activity suggestion provided.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_PLACE_SUGGEST_SUCCESS \u003d \"Place suggestion provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"The entered parameter is invalid.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final String suggestParameter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCommand(String suggestParameter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(suggestParameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.suggestParameter \u003d suggestParameter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        switch (suggestParameter) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_PERSON:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestPerson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PERSON_SUGGEST_SUCCESS, suggestParameter));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_ACTIVITY:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestActivity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ACTIVITY_SUGGEST_SUCCESS, suggestParameter),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    ViewType.SUGGEST_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case KEYWORD_PLACE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.suggestPlace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PLACE_SUGGEST_SUCCESS, suggestParameter),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    ViewType.SUGGEST_PLACE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARAMETER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof SuggestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 suggestParameter.equals(((SuggestCommand) other).suggestParameter));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Shows the user the places visited, activities done or last 5 events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * with a chosen person from the Address Book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"places\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activities\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String KEYWORD_RECENT \u003d \"recent\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_ALL \u003d \"all\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String KEYWORD_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays insights about the places visited, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"activities done, or time spent with the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) [INSIGHT_PARAMETER]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"[INSIGHT_PARAMETER] can be [\" + KEYWORD_PLACE + \"], [\" + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"], or [\" + KEYWORD_RECENT + \"].\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + KEYWORD_PLACE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_ALL_TIME \u003d \"Displaying time spent comparison \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_ALL_EVENTS \u003d \"Displaying all events \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_PLACE \u003d \"Displaying places visited with \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_ACTIVITY \u003d \"Displaying activities done with \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_RECENT_ALL \u003d \"Listing last 5 events.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_RECENT_PERSON \u003d \"Listing last 5 events with \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"The entered parameter is invalid.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int NUM_EVENTS \u003d 5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int TYPE_ALL \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int TYPE_PERSON \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final String parameter;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final int type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewCommand(Index index, String parameter, int type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (type \u003d\u003d TYPE_ALL \u0026\u0026 parameter.equals(KEYWORD_TIME)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.showTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_TIME, ViewType.TIME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (type \u003d\u003d TYPE_ALL \u0026\u0026 parameter.equals(KEYWORD_ALL)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            ObservableList\u003cRecentEvent\u003e recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            recentEventList.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int size \u003d model.getAddressBook().getEventList().size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        Integer.toString(model.getAddressBook().getEventList().get(i).getEventId()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        model.getAddressBook().getEventList().get(i).getPlace(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        model.getAddressBook().getEventList().get(i).getActivity(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        model.getAddressBook().getEventList().get(i).getTime().toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            model.copyRecent(recentEventList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_EVENTS, ViewType.ALL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (type \u003d\u003d TYPE_ALL \u0026\u0026 parameter.equals(KEYWORD_RECENT)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            int size \u003d model.getFilteredEventList().size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            ObservableList\u003cRecentEvent\u003e recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            if (size \u003c NUM_EVENTS) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                for (int i \u003d size - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            Integer.toString(model.getFilteredEventList().get(i).getEventId()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            model.getFilteredEventList().get(i).getPlace(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(i).getActivity(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(i).getTime().toString()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                for (int i \u003d 0; i \u003c NUM_EVENTS; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            Integer.toString(model.getFilteredEventList().get(size - 1 - i).getEventId()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            model.getFilteredEventList().get(size - 1 - i).getPlace(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(size - 1 - i).getActivity(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                            model.getFilteredEventList().get(size - 1 - i).getTime().toString()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.copyRecent(recentEventList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new CommandResult(MESSAGE_RECENT_ALL, ViewType.RECENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Person personToView \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewType vt;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_PLACE:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showPlaceList(personToView);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_PLACE + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.PLACES;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case KEYWORD_ACTIVITY:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showActivityList(personToView);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_ACTIVITY + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.ACTIVITIES;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            model.showRecentList(personToView);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            message \u003d MESSAGE_RECENT_PERSON + personToView.getName() + \".\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            vt \u003d ViewType.RECENT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new CommandResult(message, vt);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getParam() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((ViewCommand) o).getIndex().equals(this.getIndex())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((ViewCommand) o).getParam() \u003d\u003d this.getParam();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 131,
      "harrychengly": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Shows the user the places visited, activities done or last 5 events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * with a chosen person from the Address Book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_group\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_PLACE \u003d \"places\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_ACTIVITY \u003d \"activities\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays insights about the places visited, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"activities done, or time spent with the group identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"by the index number used in the displayed group list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) [INSIGHT_PARAMETER]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"[INSIGHT_PARAMETER] can be [\" + KEYWORD_PLACE + \"], [\" + KEYWORD_ACTIVITY"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"].\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + KEYWORD_PLACE + \" \" + PREFIX_GROUP + \"1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_PLACE \u003d \"Displaying places visited with \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_ACTIVITY \u003d \"Displaying activities done with \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"The entered parameter is invalid.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int TYPE_PERSON \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String parameter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final int type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ViewGroupCommand(Index index, String parameter, int type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group groupToView \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (parameter.equals(KEYWORD_PLACE)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.showGroupPlaceList(groupToView);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new CommandResult(MESSAGE_PLACE + groupToView.getName() + \".\", ViewType.PLACES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else if (parameter.equals(KEYWORD_ACTIVITY)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.showGroupActivityList(groupToView);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new CommandResult(MESSAGE_ACTIVITY + groupToView.getName() + \".\", ViewType.ACTIVITIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getParam() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof ViewGroupCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand e \u003d (ViewGroupCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.index.equals(e.index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.parameter.equals(e.parameter)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 this.type \u003d\u003d e.type;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "l2ejected": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Enum representing the different types of CommandResult objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public enum ViewType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    GROUPS, PLACES, ACTIVITIES, TIME, ALL, RECENT, NORMAL, HELP, EXIT, SUGGEST_ACTIVITY, SUGGEST_PLACE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 7,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, time,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                placeList, activityList, timeList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "terencemah": 3,
      "l2ejected": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Parses input arguments and creates a new {@code AddEventCommand object}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddEventCommandParser.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddEventCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * and returns a {@code AddEventCommand} object for execution"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MEMBER, PREFIX_GROUP, PREFIX_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PREFIX_PLACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_PLACE, PREFIX_TIME, PREFIX_GROUP)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_PLACE, PREFIX_TIME, PREFIX_MEMBER))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MEMBER, PREFIX_GROUP)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (activity.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d argMultimap.getValue(PREFIX_PLACE).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (place.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String input \u003d argMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String mins \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String hours \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String[] process \u003d argMultimap.getValue(PREFIX_TIME).get().split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (process.length \u003e 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            char[] time \u003d process[0].toCharArray();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (time.length \u003c 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                int marker \u003d time.length - 2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                for (int i \u003d marker; i \u003c time.length; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    mins +\u003d time[i];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                for (int i \u003d 0; i \u003c marker; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    hours +\u003d time[i];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (hours.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    hours +\u003d \"0\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Integer.parseInt(mins);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Integer.parseInt(hours);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new ParseException(AddEventCommand.MESSAGE_INVALID_TIME_INPUT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time time \u003d new Time(Integer.parseInt(mins), Integer.parseInt(hours));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MEMBER).isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int idx \u003d index.getOneBased();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                event.setWithGroup(idx);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MEMBER).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                int idx \u003d index.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                event.setWithPerson(idx);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                logger.info(\"The parsed index is \" + idx);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddEventCommand(event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "l2ejected": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses the input argument to create a new AddGroupCommand instance"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_NOT_INT \u003d \"Member index supplied must be an integer\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the input args to create an AddGroupCommand instance."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param args input by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a new AddGroupCommand instance"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException when input doesn\u0027t match expected pattern/format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MEMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Group group \u003d new Group(new Name(argMultimap.getValue(PREFIX_NAME).get()), placeList, activityList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_MEMBER)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                List\u003cString\u003e members \u003d argMultimap.getAllValues(PREFIX_MEMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        group.addPerson(Integer.parseInt(members.get(i)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        throw new ParseException(MEMBER_NOT_INT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddGroupCommand(group);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 64,
      "l2ejected": 6,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case EditGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new ListGroupCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new SuggestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        case ViewGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new ViewGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "terencemah": 2,
      "harrychengly": 9,
      "l2ejected": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Prefixes mapped to their respective arguments*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * return an empty list. Modifying the returned list will not affect the underlying data structure"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * to their respective argument values. Only the given prefixes will be recognized in the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * arguments string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                   ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * \u003cp\u003eE.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * this method returns 5."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                        ...}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        prefixPositions.sort(("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argValue \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String argsString, PrefixPosition currentPrefixPosition, PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 39,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Prefix PREFIX_MEMBER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_PLACE \u003d new Prefix(\"place/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Prefix PREFIX_LIFE \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "l2ejected": 3,
      "harrychengly": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand and returns a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * DeleteGroupCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new DeleteGroupCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditCommandParser.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setPhone("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setEmail("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editPersonDescriptor.setAddress("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * {@code tags} contain only one element which is an empty string, it will be parsed into a {@code"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 23,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Parses input arguments and creates a new EditGroupCommand instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandParser implements Parser\u003cEditGroupCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditGroupCommand and returns an"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * EditGroupCommand instance for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                args, PREFIX_NAME, PREFIX_MEMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor editGroupDescriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            editGroupDescriptor.setName(ParserUtil.parseName(argumentMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_MEMBER)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            List\u003cString\u003e members \u003d argumentMultimap.getAllValues(PREFIX_MEMBER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                List\u003cInteger\u003e memberIDs \u003d members.stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .map(s -\u003e Integer.valueOf(s))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ArrayList\u003cInteger\u003e memberIds \u003d new ArrayList\u003c\u003e(memberIDs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                editGroupDescriptor.setMemberIds(memberIds);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new ParseException(\"Member indexes provided must be an integer.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!editGroupDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(EditGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new EditGroupCommand(index, editGroupDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * and returns a ExportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String lifePath \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String groupPath \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String eventPath \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LIFE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                lifePath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_LIFE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groupPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                eventPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ExportCommand(lifePath, groupPath, eventPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(pe.getMessage() + \"\\n\" + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), io);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand and returns a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_LIFE, PREFIX_GROUP, PREFIX_EVENT))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String lifePath \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String groupPath \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String eventPath \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LIFE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                lifePath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_LIFE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groupPath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                eventPath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_EVENT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new ImportCommand(lifePath, groupPath, eventPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(ParserUtil.MESSAGE_INVALID_PATH + \"\\n\" + ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "harrychengly": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Path provided must exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_FILE_ALREADY_EXIST \u003d \"File already exist. Please specify another name.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"Invalid suggestion parameter entered. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            + \"Please input person/place/activity.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *                        unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String path} into a trimmed path if file exists. Leading and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code file} does not exist."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parsePath(String path) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedPath \u003d path.strip();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        File file \u003d new File(trimmedPath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return trimmedPath;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String path} into a trimmed path if file does not exist."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code file} exist."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parseExportPath(String path) throws ParseException, IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedPath \u003d path.strip();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        File file \u003d new File(trimmedPath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (trimmedPath.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(\"Empty file name to export provided.\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FILE_ALREADY_EXIST + trimmedPath));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return trimmedPath;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String time} into a {@code Time}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static Time parseTime(String time) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String[] arr \u003d time.split(\" \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // get hours"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String hours \u003d arr[0].substring(0, arr[0].length() - 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String minutes \u003d arr[1].substring(0, arr[1].length() - 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new Time(Integer.valueOf(minutes), Integer.valueOf(hours));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses {@code String suggest} into a trimmed parameter. Leading and trailing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if {@code suggest} parameter not equal to person."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public static String parseSuggest(String suggest) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(suggest);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String trimmedSuggestParameter \u003d suggest.trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (trimmedSuggestParameter.equalsIgnoreCase(\"person\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else if (trimmedSuggestParameter.equalsIgnoreCase(\"place\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else if (trimmedSuggestParameter.equalsIgnoreCase(\"activity\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return trimmedSuggestParameter;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PARAMETER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String input} into {@code PlaceList}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static PlaceList parsePlaces(String input) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new PlaceList(toAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses {@code String input} into {@code ActivityList}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static ActivityList parseActivities(String input) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ActivityList(toAdd);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Parses {@code String input} into {@code TimeList}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static TimeList parseTimes(String input) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String[] process \u003d input.split(\", \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String s : process) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            toAdd.add(s);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new TimeList(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "terencemah": 13,
      "harrychengly": 76,
      "l2ejected": 37,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * SuggestCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            String parameter \u003d ParserUtil.parseSuggest(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return new SuggestCommand(parameter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return A ViewCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String parameter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String token \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            token \u003d st.nextToken();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            index \u003d ParserUtil.parseIndex(token);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (NoSuchElementException | ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (token.equals(ViewCommand.KEYWORD_TIME)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parameter \u003d ViewCommand.KEYWORD_TIME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return new ViewCommand(index, parameter, ViewCommand.TYPE_ALL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else if (token.equals(ViewCommand.KEYWORD_ALL)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parameter \u003d ViewCommand.KEYWORD_ALL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return new ViewCommand(index, parameter, ViewCommand.TYPE_ALL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else if (token.equals(ViewCommand.KEYWORD_RECENT)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                parameter \u003d ViewCommand.KEYWORD_RECENT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                return new ViewCommand(index, parameter, ViewCommand.TYPE_ALL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            parameter \u003d st.nextToken();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_INVALID_PARAMETER + \" \" + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!parameter.equals(ViewCommand.KEYWORD_PLACE) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ACTIVITY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_RECENT) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ALL)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new ParseException(ViewCommand.MESSAGE_INVALID_PARAMETER + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new ViewCommand(index, parameter, ViewCommand.TYPE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 52,
      "harrychengly": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandParser implements Parser\u003cViewGroupCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return A ViewCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ViewGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String parameter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GROUP).isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            parameter \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!parameter.equals(ViewCommand.KEYWORD_PLACE) \u0026\u0026 !parameter.equals(ViewCommand.KEYWORD_ACTIVITY)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new ParseException(String.format(ViewGroupCommand.MESSAGE_INVALID_PARAMETER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ViewGroupCommand(index, parameter, ViewGroupCommand.TYPE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates an AddressBook using the Persons \u0026 Groups in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not contain"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}. {@code groups} must not contain"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate groups."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a person with the same identity as {@code personList} exists in the address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(personList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return persons.containsPersons(personList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if a groups with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(groupList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return groups.containsGroups(groupList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if a groups with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.containsEvents(eventList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds given group to the groups list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param group given group"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.addGroup(group);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addGroups(List\u003cGroup\u003e g) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groups.addAll(g);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a person to the address book. The person must not already exist in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addPersons(List\u003cPerson\u003e p) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        persons.addAll(p);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvents(List\u003cEvent\u003e e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.addAll(e);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * must exist in the address book. The person identity of {@code editedPerson} must not be the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * same as another existing person in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup(Group key) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.removeGroup(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 88,
      "terencemah": 5,
      "harrychengly": 27,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    boolean hasPersons(List\u003cPerson\u003e people);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    boolean hasGroups(List\u003cGroup\u003e groups);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    boolean hasEvents(List\u003cEvent\u003e events);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void deleteGroup(Group group);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void addGroup(Group group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * in the address book. The person identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void setGroup(Group target, Group editedGroup);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void importCsvToAddressBook(List\u003cPerson\u003e importedPeople);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void showTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showPlaceList(Person target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showActivityList(Person target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void showRecentList(Person target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestPerson();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestPlace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void suggestActivity();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    void copyRecent(ObservableList\u003cRecentEvent\u003e list);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    void copyTime(ObservableList\u003cTime\u003e list);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cEventDescriptor\u003e getFrequencyList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    ObservableList\u003cRecentEvent\u003e getRecentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    ObservableList\u003cTime\u003e getTimeList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    void showGroupPlaceList(Group groupToView);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    void showGroupActivityList(Group groupToView);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 28,
      "terencemah": 24,
      "harrychengly": 27,
      "l2ejected": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.ActivityContainsActivityNamePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.PlaceContainsPlaceNamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.NameContainsFullNamePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final ObservableList\u003cEventDescriptor\u003e frequencyList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final ObservableList\u003cRecentEvent\u003e recentEventList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final ObservableList\u003cTime\u003e timeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(this.addressBook.getGroupList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasGroup(group);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasEvent(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(people);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return addressBook.hasPersons(people);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(groups);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return addressBook.hasGroups(groups);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return addressBook.hasEvents(events);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addGroup(group);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.removeGroup(group);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.filteredGroups;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.filteredEvents;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvToAddressBook(List\u003cPerson\u003e importedPeople) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(importedPeople);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPersons(importedPeople);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(importedGroup);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addGroups(importedGroup);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(importedEvent);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        addressBook.addEvents(importedEvent);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        showTime();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showPlaceList(Person target) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyList(target.getPlaceList());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showActivityList(Person target) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyList(target.getActivityList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showRecentList(Person target) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        copyRecent(target.getRecentEventList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupPlaceList(Group target) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        copyList(target.getPlaceList2());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupActivityList(Group target) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        copyList(target.getActivityList2());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Copies the active PlaceList or ActivityList onto the Model\u0027s Frequency List."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param list List to be copied."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void copyList(ObservableList\u003cEventDescriptor\u003e list) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList.clear();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (EventDescriptor eventDescriptor : list) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.add(eventDescriptor);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Copies the target Person\u0027s active RecentEventList onto the Model\u0027s list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param list List to be copied."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void copyRecent(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.clear();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (RecentEvent recentEvent : list) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            recentEventList.add(recentEvent);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyTime(ObservableList\u003cTime\u003e list) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.clear();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Time time : list) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            timeList.add(time);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void showTime() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d addressBook.getGroupList();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cTime\u003e timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time personTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time groupTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : personList) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personHour \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personMin \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personTime.addTime(personMin, personHour);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : groupList) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupHour \u003d oneGroup.getTimeSpent().getHours();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupMin \u003d oneGroup.getTimeSpent().getMinutes();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupTime.addTime(groupMin, groupHour);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(personTime);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(groupTime);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        copyTime(timeList);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Updates filtered person list with suggested person based on time spent."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestPerson() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPerson\u003e personsList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Person suggestedPerson;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        NameContainsFullNamePredicate predicate \u003d new NameContainsFullNamePredicate(names);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!personsList.isEmpty()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            suggestedPerson \u003d personsList.get(0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Person onePerson : personsList) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int suggestedHours \u003d suggestedPerson.getTime().getHours();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int suggestedMins \u003d suggestedPerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int hours \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int mins \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (hours \u003c\u003d suggestedHours) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    if (mins \u003c\u003d suggestedMins) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        if (suggestedPerson.equals(onePerson)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            suggestedPerson \u003d onePerson;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            names.add(suggestedPerson.getName().toString());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Suggests a place based on frequency"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestPlace() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d addressBook.getEventList();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Map\u003cString, Integer\u003e placeIntegerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e place \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String minKey \u003d \"No places available. \";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventList.isEmpty()) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Event oneEvent : eventList) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String suggestedPlace \u003d oneEvent.getPlace();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (placeIntegerMap.containsKey(suggestedPlace)) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    placeIntegerMap.put(suggestedPlace, placeIntegerMap.get(suggestedPlace) + 1);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    placeIntegerMap.put(suggestedPlace, 1);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            //get min place visited"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int minValue \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (String key : placeIntegerMap.keySet()) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int value \u003d placeIntegerMap.get(key);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (value \u003c minValue) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minValue \u003d value;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minKey \u003d key;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            place.add(minKey);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            PlaceContainsPlaceNamePredicate predicate \u003d new PlaceContainsPlaceNamePredicate(place);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Suggest activity"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void suggestActivity() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d addressBook.getEventList();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Map\u003cString, Integer\u003e activityIntegerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cString\u003e activity \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String minKey \u003d \"No activities available. \";"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!eventList.isEmpty()) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (Event oneEvent : eventList) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String suggestedActivity \u003d oneEvent.getActivity();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (activityIntegerMap.containsKey(suggestedActivity)) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    activityIntegerMap.put(suggestedActivity, activityIntegerMap.get(suggestedActivity) + 1);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    activityIntegerMap.put(suggestedActivity, 1);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            //get min activity done"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int minValue \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            for (String key : activityIntegerMap.keySet()) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int value \u003d activityIntegerMap.get(key);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (value \u003c minValue) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minValue \u003d value;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    minKey \u003d key;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            activity.add(minKey);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            ActivityContainsActivityNamePredicate predicate \u003d new ActivityContainsActivityNamePredicate(activity);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequencyList;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String finalContent \u003d \"\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // NOTE: VersionedAddressBook does not have a toString() method, so you will need to manually"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // implement VersionedAddressBook#toString() to see its content!"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \"versioned addressbook: \" + addressBook.toString();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \", filtered person list: [\";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (Person p : filteredPersons) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            finalContent +\u003d p.toString() + \",\";"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        finalContent +\u003d \"]\";"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return finalContent;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 66,
      "terencemah": 63,
      "harrychengly": 180,
      "l2ejected": 26,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an unmodifiable view of the event list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "harrychengly": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ActivityContainsActivityNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ActivityContainsActivityNamePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public ActivityContainsActivityNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(event.getActivity()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof ActivityContainsActivityNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsActivityNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Container class for adding activity, time spent and place to a person or a group"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Represents the eventID for the next created group"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static int events \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String place;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cInteger\u003e withPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cInteger\u003e withGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event(String activity, String place, Time time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventId \u003d events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withPerson \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withGroup \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events +\u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getActivity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getPlace() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.place;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cInteger\u003e getWithGroup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.withGroup;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cInteger\u003e getWithPerson() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.withPerson;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setWithGroup(int groupId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withGroup \u003d Optional.of(groupId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setWithPerson(int personId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.withPerson \u003d Optional.of(personId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int getEventId() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.eventId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setTime(Time time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Checks that this event is the same event and has the same"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * event ID as the event parameter."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param other Event to be compared against."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return True if the two events are the same, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean isSameEvent(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return (this.getEventId() \u003d\u003d otherEvent.getEventId()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getActivity().equalsIgnoreCase(otherEvent.getActivity())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getPlace().equalsIgnoreCase(otherEvent.getPlace())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getTime().equals(otherEvent.getTime())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getWithGroup().equals(otherEvent.getWithGroup())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 this.getWithPerson().equals(otherEvent.getWithPerson()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.getEventId() \u003d\u003d otherEvent.getEventId();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return Objects.hash(eventId, activity, place, withGroup, withPerson, time);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Event: \" + activity + \" place: \" + place + \" for \" + time;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 57,
      "terencemah": 25,
      "l2ejected": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/PlaceContainsPlaceNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class PlaceContainsPlaceNamePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public PlaceContainsPlaceNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(event.getPlace()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof PlaceContainsPlaceNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((PlaceContainsPlaceNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Represents the list of events that enforces uniqueness in its events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Checks whether the list contains a given event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toCheck a group to check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return boolean status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the list contains an equivalent eventList as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean containsEvents(List\u003cEvent\u003e toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        boolean eventExists;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Event oneEvent : toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            eventExists \u003d internalList.stream().anyMatch(oneEvent::isSameEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (eventExists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds an event to the list. The event must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds given events to the list if they are already not in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toAdd events to be added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addAll(List\u003cEvent\u003e toAdd) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (containsEvents(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Returns true if {@code groups} contains only unique persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 103,
      "terencemah": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Events."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EventNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Did not find the specified event\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.FrequencyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the Social Group that a person is part of and spends time with."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time timeSpent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e memberIDs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e eventIDs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList activityList2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList placeList2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Group(Name name, PlaceList placeList, ActivityList activityList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeList.setPlaceList(placeList.getPlaceList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activityList.setActivityList(activityList.getActivityList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2.generate(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2.generate(this.placeList.getPlaceList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Time getTimeSpent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.timeSpent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addPerson(int id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs.add(id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deletePerson(int id) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs.remove(Integer.valueOf(id));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setTimeSpent(Time time) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cInteger\u003e getMembers() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.memberIDs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMemberIDs(ArrayList\u003cInteger\u003e members) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIDs \u003d members;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cInteger\u003e getEvents() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.eventIDs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setEventIDs(ArrayList\u003cInteger\u003e events) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d events;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList getPlaceList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a string representation of member IDs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String printEventIds() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String result \u003d \"Events: \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c this.eventIDs.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            result +\u003d this.eventIDs.get(i) + \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns a String output with all the names in a single line separated by whitespace."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String printMemberList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String build \u003d \"Members: \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c memberIDs.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (i \u003d\u003d memberIDs.size() - 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                build +\u003d memberIDs.get(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                build +\u003d memberIDs.get(i) + \", \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return build;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Objects.hash(this.name, this.memberIDs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(o instanceof Group)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group g \u003d (Group) o;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return (this.getName().equals(g.getName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.memberIDs.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"Name: \" + this.name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"Name: \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + this.name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + printMemberList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getPlaceList2() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList2.getFrequencyList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getActivityList2() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList2.getFrequencyList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 120,
      "l2ejected": 32,
      "harrychengly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Checks if a {@code Group}\u0027s {@code Name} matches any of the given keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupNameContainsKeywordsPredicate implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(group.getName().fullName, keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof GroupNameContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GroupNameContainsKeywordsPredicate nameContainsKeywordsPredicate \u003d (GroupNameContainsKeywordsPredicate) other;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.keywords.equals(nameContainsKeywordsPredicate.keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a unique list of all groups currently in CoderLifeInsights"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Checks whether the list contains a given group."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toCheck a group to check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return boolean status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if the list contains an equivalent groupList as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean containsGroups(List\u003cGroup\u003e toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        boolean groupExists;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupExists \u003d internalList.stream().anyMatch(oneGroup::equals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (groupExists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a given group to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toAdd group to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Adds given groups to the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param toAdd groups to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll(List\u003cGroup\u003e toAdd) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (containsGroups(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group edited) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(groups);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes a given group from the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param toRemove group to be removed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup(Group toRemove) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if {@code groups} contains only unique persons."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                if (groups.get(i).equals(groups.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 125,
      "harrychengly": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Groups (Groups are considered duplicates if"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(\"Did not find the specified group.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A list of activities"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final List\u003cString\u003e activityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList(List\u003cString\u003e activities) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activityList \u003d activities;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public List\u003cString\u003e getActivityList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds an activity to the current activityList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return new ActivityList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList addActivity(String activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e toEdit \u003d this.activityList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        toEdit.add(activity);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ActivityList(toEdit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setActivityList(List\u003cString\u003e oldList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.activityList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(oldList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.addAll(newList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : activityList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (i \u003c activityList.size() - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof ActivityList)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ActivityList a \u003d (ActivityList) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.activityList.equals(a.activityList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 7,
      "l2ejected": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DescriptorComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * A Comparator class for comparing and sorting EventDescriptor objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class DescriptorComparator implements Comparator\u003cEventDescriptor\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Compares two EventDescriptor objects. An object is considered larger"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * if it has a smaller frequency. If two objects have the same frequency,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * then the larger object is the one with the lexicographically greater name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This ensures that after sorting, the highest frequenct EventDescriptors"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * will appear first on the list; and for objects with the same frequency,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * they will appear in alphabetical order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param d1 The first EventDescriptor object being compared."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param d2 The second EventDescriptor object being compared."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return 1 if d1 is larger than d2, and -1 if d2 is larger than d1."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public int compare(EventDescriptor d1, EventDescriptor d2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (d1.getFrequency() \u003c d2.getFrequency()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else if (d1.getFrequency() \u003d\u003d d2.getFrequency()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 d1.getName().compareTo(d2.getName()) \u003c 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terencemah": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s email in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"1. The local-part should only contain alphanumeric characters and these special characters, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"the parentheses, (\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + SPECIAL_CHARACTERS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \") .\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"if any.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            LOCAL_PART_REGEX"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"@\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_FIRST_CHARACTER_REGEX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_MIDDLE_REGEX"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EventDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * This class is used to encompass Places and Activities,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * both of which are characterised by a unique name,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and a frequency particular to a person in the AddressBook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class EventDescriptor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final IntegerProperty frequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public EventDescriptor(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequency \u003d new SimpleIntegerProperty(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public EventDescriptor(String name, Integer frequency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.frequency \u003d new SimpleIntegerProperty(frequency);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public Integer getFrequency() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequency.get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequency.setValue(frequency.get() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty nameProperty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty frequencyProperty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new SimpleStringProperty(Integer.toString(frequency.get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof EventDescriptor)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((EventDescriptor) o).getName().equals(this.getName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((EventDescriptor) o).getFrequency() \u003d\u003d this.getFrequency();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terencemah": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FrequencyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * An observable list of EventDescriptor objects whose uniqueness is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * enforced by a HashMap. This allows the list to be displayed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and updated instantly on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class FrequencyList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ObservableList\u003cEventDescriptor\u003e frequencyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private HashMap\u003cString, Integer\u003e uniqueNameList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public FrequencyList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.uniqueNameList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method adds a place or an activity to a given frequency list,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * assuming that it does not exist already. Otherwise, it increments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * the frequency of that place or activity by 1."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param name The name of the place or activity to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void add(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (uniqueNameList.containsKey(name)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            Integer oldValue \u003d uniqueNameList.get(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            int listIndex \u003d frequencyList.indexOf(new EventDescriptor(name, oldValue));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.get(listIndex).increment();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            uniqueNameList.replace(name, oldValue, oldValue + 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            uniqueNameList.put(name, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            frequencyList.add(new EventDescriptor(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyList.sort(new DescriptorComparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Generates the items in the Frequency List from an ArrayList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param items List of items to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate(List\u003cString\u003e items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String item : items) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            this.add(item);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return frequencyList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getMap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return uniqueNameList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof FrequencyList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((FrequencyList) o).getFrequencyList().equals(this.getFrequencyList())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((FrequencyList) o).getMap().equals(this.getMap());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsFullNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class NameContainsFullNamePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public NameContainsFullNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .anyMatch(keyword -\u003e keywords.contains(person.getName().fullName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                || (other instanceof NameContainsFullNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsFullNamePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //logger"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Person.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList placeList2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final FrequencyList activityList2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final PlaceList placeList \u003d new PlaceList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final TimeList timeList \u003d new TimeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final RecentEventList recentEventList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Time time, PlaceList placeList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                  ActivityList activityList, TimeList timeList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.setPlaceList(placeList.getPlaceList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activityList.setActivityList(activityList.getActivityList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.setTimeList(timeList.getTimeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeList2.generate(this.placeList.getPlaceList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activityList2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityList2.generate(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList \u003d new RecentEventList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.generate(this.placeList, this.activityList, this.timeList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList getPlaceList2() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public ActivityList getActivityList2() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList getTimeList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentEventList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList.getList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getPlaceList2().equals(getPlaceList2())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 otherPerson.getActivityList2().equals(getActivityList2());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        builder"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Time spent together: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Places been together: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getPlaceList2().toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        builder.append(\" Activities done together: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                .append(getActivityList2().toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getPlaceList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList2.getFrequencyList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getActivityList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return activityList2.getFrequencyList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18,
      "terencemah": 24,
      "l2ejected": 31,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Place.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Create new place object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Place {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final String placeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @param placeName A valid tag name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Place(String placeName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        requireNonNull(placeName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeName \u003d placeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                || (other instanceof Place // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                \u0026\u0026 placeName.equals(((Place) other).placeName)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeName.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \u0027[\u0027 + placeName + \u0027]\u0027;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PlaceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A list of places"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class PlaceList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public final List\u003cString\u003e placeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList(List\u003cString\u003e places) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeList \u003d places;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public List\u003cString\u003e getPlaceList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.placeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds a place to the current placeList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return new PlaceList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PlaceList addPlace(String place) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        List\u003cString\u003e current \u003d this.placeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        current.add(place);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new PlaceList(current);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setPlaceList(List\u003cString\u003e oldList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.placeList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        newList.addAll(oldList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.placeList.addAll(newList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (String s : placeList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if (i \u003c placeList.size() - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof PlaceList)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        PlaceList p \u003d (PlaceList) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.placeList.equals(p.placeList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeList.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 5,
      "l2ejected": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecentEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * This class is used to encompass a recent event,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * consisting of a place and activity for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final StringProperty eventId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty place;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final StringProperty time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public RecentEvent(String eventId, String place, String activity, String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.eventId \u003d new SimpleStringProperty(eventId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.place \u003d new SimpleStringProperty(place);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.activity \u003d new SimpleStringProperty(activity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.time \u003d new SimpleStringProperty(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public String getEventId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return eventId.get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getPlace() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return place.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getActivity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return activity.get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return time.get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty placeProperty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return place;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty activityProperty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public StringProperty timeProperty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public StringProperty eventIdProperty() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return eventId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(o instanceof RecentEvent)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return ((RecentEvent) o).getPlace().equals(this.getPlace())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((RecentEvent) o).getActivity().equals(this.getActivity())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                \u0026\u0026 ((RecentEvent) o).getTime().equals(this.getTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 57,
      "harrychengly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecentEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * An observable list of RecentEvent objects that may contain"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * repeated objects. This allows the list to be displayed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and updated instantly on the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final int NUM_EVENTS \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ObservableList\u003cRecentEvent\u003e recentEventList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * This method generates the list of the 5 most recent events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * with the target person, from their PlaceList and ActivityList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param pl The target person\u0027s PlaceList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @param al The target person\u0027s ActivityList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generate(PlaceList pl, ActivityList al, TimeList tl) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventList.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        int size \u003d pl.getPlaceList().size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (size \u003c NUM_EVENTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int i \u003d size - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        Integer.toString(i + 1),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        pl.getPlaceList().get(i), al.getActivityList().get(i),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        tl.getTimeList().get(i)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            for (int i \u003d 0; i \u003c NUM_EVENTS; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                recentEventList.add(new RecentEvent("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        Integer.toString(i + 1),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        pl.getPlaceList().get(size - 1 - i),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        al.getActivityList().get(size - 1 - i), tl.getTimeList().get(size - 1 - i)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return recentEventList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 39,
      "harrychengly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Represents the time object that tracks the time spent for the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String MINUTES_RANGE_ERROR \u003d \"Minutes must be within 0-59 (inclusive).\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String HOURS_RANGE_ERROR \u003d \"Hours must be 0 or more\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time(int minutes, int hours) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(minutes \u003c\u003d 59 \u0026\u0026 minutes \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else if (hours \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int getMinutes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.minutes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int getHours() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setMinutes(int minutes) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(minutes \u003c\u003d 59 \u0026\u0026 minutes \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setHours(int hours) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (hours \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            throw new IllegalArgumentException(HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Adds the input mins and hrs to the current Time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addTime(int mins, int hrs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newMins;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newHrs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (mins + this.getMinutes() \u003e\u003d 60) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d (mins + this.getMinutes()) - 60;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d (hrs + this.getHours()) + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d mins + this.getMinutes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d hrs + this.getHours();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.minutes \u003d newMins;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.hours \u003d newHrs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Creates a new Time object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * By adding current Time to input parameters"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Time addTime2(int mins, int hrs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newMins;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int newHrs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (mins + this.getMinutes() \u003e\u003d 60) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d (mins + this.getMinutes()) - 60;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d (hrs + this.getHours()) + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newMins \u003d mins + this.getMinutes();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            newHrs \u003d hrs + this.getHours();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Time(newMins, newHrs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return String.format(\"%sh %sm\", this.hours, this.minutes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!(other instanceof Time)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time t \u003d (Time) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.getHours() \u003d\u003d t.getHours() \u0026\u0026 this.getMinutes() \u003d\u003d t.getMinutes();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Objects.hash(this.hours, this.minutes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * A list of event durations stored as Strings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class TimeList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public final List\u003cString\u003e timeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList(List\u003cString\u003e times) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList \u003d times;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public List\u003cString\u003e getTimeList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this.timeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Adds a time to the current timeList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * @return new TimeList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public TimeList addTime(String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e current \u003d this.timeList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        current.add(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new TimeList(current);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void setTimeList(List\u003cString\u003e xs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(this.timeList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        newList.addAll(xs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.timeList.addAll(newList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        for (String s : timeList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            if (i \u003c timeList.size() - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                output +\u003d s + \", \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                output +\u003d s;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        if (!(other instanceof PlaceList)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        TimeList t \u003d (TimeList) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this.timeList.equals(t.timeList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return timeList.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 71,
      "harrychengly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * adding and updating of persons uses Person#isSamePerson(Person) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * the person being added or updated is unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * However, the removal of a person uses Person#equals(Object) so as to ensure that the person with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Returns true if the list contains an equivalent personList as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean containsPersons(List\u003cPerson\u003e toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        boolean personExists;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personExists \u003d internalList.stream().anyMatch(onePerson::isSamePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (personExists) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds all person to the list. The person in to add list must not already exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll(List\u003cPerson\u003e toAdd) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (containsPersons(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        internalList.addAll(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}. {@code target} must"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * exist in the list. The person identity of {@code editedPerson} must not be the same as another"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * existing person in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * duplicate persons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 15,
      "harrychengly": 23,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.person.Place;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Time INIT_TIME \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final PlaceList INIT_PLACELIST \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final ActivityList INIT_ACTIVITYLIST \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final TimeList INIT_TIMELIST \u003d new TimeList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*public static final Set\u003cPlace\u003e INIT_PLACESET \u003d new HashSet\u003c\u003e();*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"friends\"), INIT_TIME, INIT_PLACELIST, INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), INIT_TIME, INIT_PLACELIST, INIT_ACTIVITYLIST, INIT_TIMELIST"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        /*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"neighbours\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"family\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"classmates\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                getTagSet(\"colleagues\"), INIT_TIME, INIT_PLACELIST,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        INIT_ACTIVITYLIST, INIT_TIMELIST/*, INIT_PLACESET*/)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "terencemah": 12,
      "l2ejected": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExportFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Exports Life to CSV file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportFile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life to be exported."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"persons\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (Exception ioe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life groups and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life groups to be exported."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportGroupCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"groups\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads Life events and exports to CSV file to be imported on another Life application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToExport path of Life events to be exported."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileToSave   name of file to be saved."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if file name already exist or path provided instead of file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void exportEventCsv(String fileToExport, String fileToSave) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonFile \u003d new ObjectMapper().readTree(new File(fileToExport));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode jsonTree \u003d jsonFile.get(\"events\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema.Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    .writeValue(new File(fileToSave), jsonTree);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ImportFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Converts CSV files to be added to current Life."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportFile {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of person to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of person to be imported."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if person in CSV file does not conform to format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cPerson\u003e importCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cPerson\u003e people \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e onePerson \u003d it.next();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneName \u003d onePerson.get(\"name\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String onePhone \u003d onePerson.get(\"phone\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneEmail \u003d onePerson.get(\"email\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneAddress \u003d onePerson.get(\"address\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTagged \u003d onePerson.get(\"tagged\").strip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] tags \u003d oneTagged.split(\";\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneTime \u003d onePerson.get(\"time\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String onePlaceList \u003d onePerson.get(\"places\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] places \u003d onePlaceList.split(\";\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneActivityList \u003d onePerson.get(\"activities\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] activities \u003d oneActivityList.split(\";\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String oneTimeList \u003d onePerson.get(\"times\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                String[] times \u003d oneTimeList.split(\";\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Set\u003cTag\u003e tag;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (oneTagged.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    tag \u003d ParserUtil.parseTags(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    tag \u003d ParserUtil.parseTags(Arrays.asList(tags));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Name name \u003d ParserUtil.parseName(oneName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(onePhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(oneEmail);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(oneAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PlaceList placeList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (onePlaceList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : places) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(xs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ActivityList activityList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (oneActivityList.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : activities) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(xs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                TimeList timeList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                if (oneTimeList.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    for (String s : times) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                    timeList \u003d new TimeList(xs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                Person person \u003d new Person(name, phone, email, address, tag, time,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                        placeList, activityList, timeList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                people.add(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return people;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException | ParseException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of events to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of groups to be imported."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if event in CSV file does not conform to format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cEvent\u003e importEventCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e oneEvent \u003d it.next();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String eventId \u003d oneEvent.get(\"eventId\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneActivity \u003d oneEvent.get(\"activity\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String onePlace \u003d oneEvent.get(\"place\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneWithPerson \u003d oneEvent.get(\"withPerson\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneWithGroup \u003d oneEvent.get(\"withGroup\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTime \u003d oneEvent.get(\"time\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int withPerson \u003d Integer.valueOf(oneWithPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                int withGroup \u003d Integer.valueOf(oneWithGroup);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Event event \u003d new Event(oneActivity, onePlace, time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                event.setWithPerson(withPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                event.setWithGroup(withGroup);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                events.add(event);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Reads a CSV File and returns a list of groups to be added to the current CoderLifeInsights."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @param fileName path of CSV file to be imported."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @return List of events to be imported."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * @throws CommandException if group in CSV file does not conform to format."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public List\u003cGroup\u003e importGroupCsv(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            File csvFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    mapper.readerFor(Map.class).with(schema).readValues(csvFile);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Map\u003cString, String\u003e oneGroup \u003d it.next();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneName \u003d oneGroup.get(\"name\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneGroupId \u003d oneGroup.get(\"groupId\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneTimeSpent \u003d oneGroup.get(\"timeSpent\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneMemberIds \u003d oneGroup.get(\"memberIDs\").strip();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String[] memberIds \u003d oneMemberIds.split(\";\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String oneEventIds \u003d oneGroup.get(\"eventIDs\").strip();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String[] eventIds \u003d oneEventIds.split(\";\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String onePlaceList \u003d oneGroup.get(\"places\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] places \u003d onePlaceList.split(\";\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String oneActivityList \u003d oneGroup.get(\"activities\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] activities \u003d oneActivityList.split(\";\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                ArrayList\u003cInteger\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (!oneMemberIds.isEmpty()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    for (int i \u003d 0; i \u003c memberIds.length; i++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        members.add(Integer.parseInt(memberIds[i]));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                ArrayList\u003cInteger\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                if (!oneEventIds.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    for (int i \u003d 0; i \u003c eventIds.length; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        events.add(Integer.parseInt(eventIds[i]));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Name name \u003d ParserUtil.parseName(oneName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                Time time \u003d ParserUtil.parseTime(oneTimeSpent);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                PlaceList placeList;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (onePlaceList.isEmpty()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : places) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    placeList \u003d new PlaceList(xs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ActivityList activityList;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (oneActivityList.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    List\u003cString\u003e xs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    for (String s : activities) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        xs.add(s);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    activityList \u003d new ActivityList(xs);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                Group group \u003d new Group(name, placeList, activityList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setTimeSpent(time);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setMemberIDs(members);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                group.setEventIDs(events);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                groups.add(group);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        } catch (IOException | ParseException ioe) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_PATH));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "terencemah": 15,
      "harrychengly": 164,
      "l2ejected": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Jackson-friendly version of {@link Event}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Events\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String place;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String withPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String withGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventId\") String eventId, @JsonProperty(\"activity\") String activity,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"place\") String place,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"withPerson\") String withPerson,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"withGroup\") String withGroup,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (withGroup !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withGroup \u003d withGroup;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withGroup \u003d \"-1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (withPerson !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withPerson \u003d withGroup;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.withPerson \u003d \"-1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        activity \u003d source.getActivity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        place \u003d source.getPlace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        eventId \u003d Integer.toString(source.getEventId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (source.getWithGroup().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withGroup \u003d source.getWithGroup().get().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withGroup \u003d \"-1\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (source.getWithPerson().isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withPerson \u003d source.getWithPerson().get().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            withPerson \u003d \"-1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"activity\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (place \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"place\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"time\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Time timeSpent \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d new Event(activity, place, timeSpent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Groups\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final String timeSpent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e memberIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cString\u003e eventIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e places \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedGroup(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"timeSpent\") String timeSpent,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                            @JsonProperty(\"memberIDs\") List\u003cString\u003e memberIDs,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                            @JsonProperty(\"eventIDs\") List\u003cString\u003e eventIDs,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                            @JsonProperty(\"places\") List\u003cString\u003e places,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                            @JsonProperty(\"activities\") List\u003cString\u003e activities) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (memberIDs !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.memberIDs.addAll(memberIDs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (eventIDs !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.eventIDs.addAll(eventIDs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!places.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.places.addAll(places);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!activities.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent \u003d source.getTimeSpent().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cInteger\u003e members \u003d source.getMembers();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            memberIDs.add(Integer.toString(members.get(i)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        List\u003cInteger\u003e events \u003d source.getEvents();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            eventIDs.add(Integer.toString(events.get(i)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places.addAll(source.getPlaceList().placeList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities.addAll(source.getActivityList().activityList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //%TODO: Add more checks as group class and info evolve"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final PlaceList modelPlaceList \u003d new PlaceList(places);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final ActivityList modelActivityList \u003d new ActivityList(activities);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(new Name(name), modelPlaceList, modelActivityList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(timeSpent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setTimeSpent(time);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c memberIDs.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            members.add(Integer.valueOf(memberIDs.get(i)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setMemberIDs(members);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c eventIDs.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            events.add(Integer.valueOf(eventIDs.get(i)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setEventIDs(events);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 100,
      "l2ejected": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e places \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final List\u003cString\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final List\u003cString\u003e times \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            @JsonProperty(\"places\") List\u003cString\u003e places, @JsonProperty(\"activities\") List\u003cString\u003e activities) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!places.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.places.addAll(places);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (!activities.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places.addAll(source.getPlaceList2().placeList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities.addAll(source.getActivityList2().activityList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times.addAll(source.getTimeList().timeList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                               person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time modelTime \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final PlaceList modelPlaceList \u003d new PlaceList(places);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final ActivityList modelActivityList \u003d new ActivityList(activities);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        final TimeList modelTimeList \u003d new TimeList(times);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelTime, modelPlaceList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                modelActivityList, modelTimeList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 11,
      "terencemah": 6,
      "l2ejected": 25,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPlace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Place;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Jackson-friendly version of {@link Place}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "class JsonAdaptedPlace {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String placeName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Constructs a {@code JsonAdaptedPlace} with the given {@code placeName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public JsonAdaptedPlace(String placeName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.placeName \u003d placeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Converts a given {@code Place} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public JsonAdaptedPlace(Place source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        placeName \u003d source.placeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getPlaceName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return placeName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Converts this Jackson-friendly adapted place object into the model\u0027s {@code Place} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Place toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new Place(placeName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate group(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(S).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                       @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.groups.addAll(groups);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *               JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groups.addAll(source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (addressBook.hasGroup(group)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            addressBook.addGroup(group);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 29,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        logger.info(\"Trying to call saveAddressBook\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the list of activities,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and their frequencies in descending order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ActivityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"ActivityListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(seedu.address.ui.ActivityListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cEventDescriptor\u003e frequencyTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e activityColumn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e frequencyColumn;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public ActivityListPanel(ObservableList\u003cEventDescriptor\u003e frequencyList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().nameProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyColumn.setCellValueFactory(cellData -\u003e cellData.getValue().frequencyProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyTable.setItems(frequencyList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AllEventPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Panel showing the last 5 events with the target person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * in reverse chronological order of event addition."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class AllEventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"AllEventPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableView\u003cRecentEvent\u003e eventTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e placeColumn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e activityColumn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e timeColumn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public AllEventPanel(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventId.setCellValueFactory(cellData-\u003e cellData.getValue().eventIdProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().placeProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().activityProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().timeProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventTable.setItems(list);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A UI component that displaces information of a {@code Group}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public final Group group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label memberLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private FlowPane members;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label eventLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private FlowPane events;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupCard(Group group, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name.setText(group.getName().fullName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String text \u003d group.getTimeSpent().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent.setText(\"Total Time Spent: \" + text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        memberLabel.setText(\"Members: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        group"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .getMembers()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .forEach(member -\u003e members.getChildren().add(new Label(member.toString())));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventLabel.setText(\"Events: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        group"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .getEvents()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                .forEach(event -\u003e events.getChildren().add(new Label(event.toString())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (!(other instanceof GroupCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GroupCard card \u003d (GroupCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 group.equals(card.group);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 54,
      "harrychengly": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ListView\u003cGroup\u003e groupListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Represents a cell to view the Group in a list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroup\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        protected void updateItem(Group group, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            super.updateItem(group, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (empty || group \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                setGraphic(new GroupCard(group, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called on a thread other than the JavaFX Application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                                     \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private PlaceListPanel placeListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ActivityListPanel activityListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private RecentEventPanel recentEventPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private SuggestListPanel suggestListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TimePieChart timePieChart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private AllEventPanel allEventPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane groupListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane frequencyListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane timePieChartPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .addEventFilter("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                            menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                            event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart \u003d new TimePieChart(logic.getTimeList(), logic.getFilteredGroupList(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(timePieChart.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new GuiSettings("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        primaryStage.getWidth(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewPlaces() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        placeListPanel \u003d new PlaceListPanel(logic.getFrequencyList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(placeListPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleViewActivities() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityListPanel \u003d new ActivityListPanel(logic.getFrequencyList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(activityListPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleViewRecent() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        recentEventPanel \u003d new RecentEventPanel(logic.getRecentList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(recentEventPanel.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewAll() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        allEventPanel \u003d new AllEventPanel(logic.getRecentList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(allEventPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays pie chart"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleViewTime() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart \u003d new TimePieChart(logic.getTimeList(), logic.getFilteredGroupList(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(timePieChart.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays suggest activity"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleSuggestActivity() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListPanel \u003d new SuggestListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(suggestListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays suggest place"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private void handleSuggestPlace() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListPanel \u003d new SuggestListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPanelPlaceholder.getChildren().add(suggestListPanel.getRoot());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays group list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void handleGroup() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        handleViewTime();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Displays normal display"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private void handleNormal() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        handleViewTime();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupListPanel getGroupListPanel() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            switch (commandResult.getViewType()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case PLACES:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewPlaces();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case ACTIVITIES:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewActivities();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case TIME:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleViewTime();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            case RECENT:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleViewRecent();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case ALL:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleViewAll();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            case GROUPS:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                handleGroup();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case SUGGEST_ACTIVITY:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleSuggestActivity();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            case SUGGEST_PLACE:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                handleSuggestPlace();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "terencemah"
        },
        "content": "                handleNormal();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 24,
      "terencemah": 33,
      "harrychengly": 89,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label activities;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        time.setText(\"Total Time Spent: \" + person.getTime().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "l2ejected": 4,
      "harrychengly": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlaceListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the list of places,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * and their frequencies in descending order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class PlaceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"PlaceListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cEventDescriptor\u003e frequencyTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e placeColumn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cEventDescriptor, String\u003e frequencyColumn;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public PlaceListPanel(ObservableList\u003cEventDescriptor\u003e frequencyList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().nameProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyColumn.setCellValueFactory(cellData -\u003e cellData.getValue().frequencyProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        frequencyTable.setItems(frequencyList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecentEventPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * Panel showing the last 5 events with the target person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": " * in reverse chronological order of event addition."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class RecentEventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private static final String FXML \u003d \"RecentEventPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableView\u003cRecentEvent\u003e eventTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e placeColumn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e activityColumn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e timeColumn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private TableColumn\u003cRecentEvent, String\u003e eventId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public RecentEventPanel(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        eventId.setCellValueFactory(cellData-\u003e cellData.getValue().eventIdProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        placeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().placeProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        activityColumn.setCellValueFactory(cellData -\u003e cellData.getValue().activityProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        timeColumn.setCellValueFactory(cellData -\u003e cellData.getValue().timeProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        eventTable.setItems(list);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 40,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * A UI component that displaces information of a {@code Group}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"SuggestListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label suggest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggest.setText(\"Place : \" + event.getPlace());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        activity.setText(\"Activity : \" + event.getActivity());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String text \u003d event.getTime().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeSpent.setText(\"Total Time Spent : \" + text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        if (!(other instanceof SuggestCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCard card \u003d (SuggestCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        return suggest.getText().equals(card.suggest.getText()) \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"SuggestListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SuggestListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ListView\u003cEvent\u003e suggestListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public SuggestListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListView.setItems(eventList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        suggestListView.setCellFactory(listView -\u003e new SuggestListCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     * Represents a cell to view the Group in a list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    class SuggestListCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                setGraphic(new SuggestCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "harrychengly": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimePieChart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " * Pie Chart for time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class TimePieChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String FXML \u003d \"TimePieChartPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TimePieChart.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private StackPane timePieChartPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public TimePieChart(ObservableList\u003cTime\u003e timeList, ObservableList\u003cGroup\u003e groupList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time personTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        Time groupTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Person onePerson : personList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personHour \u003d onePerson.getTime().getHours();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int personMin \u003d onePerson.getTime().getMinutes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            personTime.addTime(personMin, personHour);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        for (Group oneGroup : groupList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupHour \u003d oneGroup.getTimeSpent().getHours();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            int groupMin \u003d oneGroup.getTimeSpent().getMinutes();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            groupTime.addTime(groupMin, groupHour);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(personTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timeList.add(groupTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        double individualTotalTime \u003d 0.0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        double groupTotalTime \u003d 0.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        individualTotalTime \u003d timeList.get(0).getHours() + (double) (timeList.get(0).getMinutes() / 10);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groupTotalTime \u003d timeList.get(1).getHours() + (double) (timeList.get(1).getMinutes() / 10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        new PieChart.Data(\"Individual Time\", individualTotalTime),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        new PieChart.Data(\"Group Time\", groupTotalTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        final PieChart timePieChart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChart.setTitle(\"Time Spent\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        timePieChartPane.getChildren().add(timePieChart);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/coderlifeinsights.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "harrychengly": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 14,
      "-": 79
    }
  },
  {
    "path": "src/main/resources/view/ActivityListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"frequencyTable\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"150\" text\u003d\"Activities Done\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"frequencyColumn\" prefWidth\u003d\"150\" text\u003d\"Frequency\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 12,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/resources/view/AllEventPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"eventTable\" prefWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"eventId\" prefWidth\u003d\"100\" text\u003d\"EventID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"100\" text\u003d\"Place\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"100\" text\u003d\"Activity\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"timeColumn\" prefWidth\u003d\"100\" text\u003d\"Duration\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 21
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" text\u003d\"\\$timeSpent\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"memberLabel\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"members\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventLabel\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"events\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"events\" text\u003d\"\\$events\" styleClass\u003d\"cell_small_label\"/\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32,
      "harrychengly": 6
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "harrychengly": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CoderLifeInsights\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cImage url\u003d\"@/images/coderlifeinsights.png\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"People\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"viewList\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Insights\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"timePieChartPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"groupList\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Groups\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"groupListPanelPlaceholder\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"100\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minHeight\u003d\"20\" prefHeight\u003d\"20\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 74,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/PlaceListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "      \u003cTableView fx:id\u003d\"frequencyTable\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"150\" text\u003d\"Places Visited\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"frequencyColumn\" prefWidth\u003d\"150\" text\u003d\"Frequency\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 12,
      "harrychengly": 4
    }
  },
  {
    "path": "src/main/resources/view/RecentEventPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cTableView fx:id\u003d\"eventTable\" prefWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"eventId\" prefWidth\u003d\"100\" text\u003d\"Events\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"placeColumn\" prefWidth\u003d\"100\" text\u003d\"Place\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"activityColumn\" prefWidth\u003d\"100\" text\u003d\"Activity\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"timeColumn\" prefWidth\u003d\"100\" text\u003d\"Duration\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "terencemah": 12,
      "harrychengly": 9
    }
  },
  {
    "path": "src/main/resources/view/SuggestListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                \u003cLabel fx:id\u003d\"suggest\" text\u003d\"\\$place\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"activity\" text\u003d\"\\$activity\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" text\u003d\"\\$timeSpent\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 34
    }
  },
  {
    "path": "src/main/resources/view/SuggestListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    \u003cListView fx:id\u003d\"suggestListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 8
    }
  },
  {
    "path": "src/main/resources/view/TimePieChartPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "\u003cStackPane fx:id\u003d\"timePieChartPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // first"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String versionString, int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/coderlifeinsights.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                errorMessage, ("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "harrychengly": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 12,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Word parameter cannot be empty\", ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"Word parameter should be a single word\", ("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 31,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String deleteCommand \u003d \"delete_person 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand, Class\u003c? extends Throwable\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 35,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(validPerson),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.AddEventTypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddEventCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test //need fix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"0h 30m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 30, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.addEvent(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertTrue(model.getFilteredEventList().equals(expectedModel.getFilteredEventList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test need fix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"1h 1m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 1, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidTimeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, AddEventCommand.MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event event \u003d new Event(activity, place, time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(addEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /*    @Test need fix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        public void execute_addEventOfMoreThan1HourUnfilteredList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            final Time time \u003d new Time(1, 01);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withName(firstPerson.getName().fullName).withTime(\"1h 1m\").withActivityList(\"test\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    .withPlaceList(\"anywhere\").build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Event event \u003d new Event(activity, place, 1, 01);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            event.setWithPerson(INDEX_THIRD_PERSON.getOneBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AddEventCommand addEventCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            assertCommandSuccess(addEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"test\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"anywhere\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event finalEvent \u003d new Event(activity, place, new Time(30, 0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        finalEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final AddEventCommand standardCommand \u003d new AddEventCommand(finalEvent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand commandWithSameValues \u003d new AddEventCommand(finalEvent);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event anotherEvent \u003d new Event(activity, place, new Time(30, 0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        anotherEvent.setWithPerson(2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(anotherEvent)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event thirdEvent \u003d new Event(activity, \"anywhere 2\", new Time(30, 0));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        thirdEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(thirdEvent)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event fourthEvent \u003d new Event(\"test 2\", place, new Time(30, 0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fourthEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(fourthEvent)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event fifthEvent \u003d new Event(activity, place, new Time(45, 0));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fifthEvent.setWithPerson(1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(standardCommand.equals(new AddEventCommand(fifthEvent)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 22,
      "l2ejected": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void constructorNullGroupThrowsNullGroupPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGroupCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void executeGroupAcceptedByModelAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        validGroup.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult commandResult \u003d new AddGroupCommand(validGroup).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void executeDuplicateGroupThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        validGroup.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(validGroup);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(CommandException.class, AddGroupCommand.MESSAGE_DUPLICATE_GROUP, ("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e addGroupCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group soc \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group rc \u003d new GroupBuilder().withName(\"RC Friends\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addSoCCommand \u003d new AddGroupCommand(soc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addRcCommand \u003d new AddGroupCommand(rc);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object so should be true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(addSoCCommand.equals(addSoCCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values so should be true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddGroupCommand addSoCCopy \u003d new AddGroupCommand(soc);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(addSoCCopy.equals(addSoCCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //differeny types so should false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse((\"sample text\").equals(addSoCCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //equality with null should be false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addRcCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different groups should be false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addRcCommand.equals(addSoCCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.group.equals(group);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private class ModelStubAcceptingGroupAdded extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            // persons list with sample persons"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(BENSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            uniquePersonList.add(CARL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FilteredList\u003cPerson\u003e sampleList \u003d new FilteredList\u003c\u003e(uniquePersonList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return sampleList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public boolean hasGroup(Group toCheck) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(toCheck);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return groupsAdded.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public void addGroup(Group toAdd) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            requireNonNull(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            groupsAdded.add(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", ViewType.NORMAL)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", ViewType.HELP)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", ViewType.EXIT)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", ViewType.HELP).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", ViewType.EXIT).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.GroupNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //constants for person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String VALID_TIME \u003d \"000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    //constants for group"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_GROUP_NAME_SOC \u003d \"SoC Friends\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_GROUP_NAME_RC \u003d \"RC Friends\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_MEMBER_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String VALID_MEMBER_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String NAME_DESC_SOC \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_SOC;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String NAME_DESC_RC \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_RC;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_DESC_1 \u003d \" \" + PREFIX_MEMBER + VALID_MEMBER_INDEX_1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MEMBER_DESC_2 \u003d \" \" + PREFIX_MEMBER + VALID_MEMBER_INDEX_2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_NAME_SPECIALCHAR \u003d \" \" + PREFIX_NAME + \"!@#FIP^\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INVALID_MEMBER_NOT_INT \u003d \" \" + PREFIX_MEMBER + \"sdfdsfds\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DESC_AMY \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DESC_BOB \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            System.out.println(\"Expected feedback to user: \" + expectedCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            System.out.println(\"Actual feedback to user\" + result.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throw new AssertionError(ce.getMessage(), ce);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the group at the given {@code targetIndex}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param model the current model"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param targetIndex the targetted index"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void showGroupAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final String[] splitName \u003d group.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(new GroupNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 76,
      "l2ejected": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(targetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showNoGroup(expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, targetIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(outOfBounds.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBounds);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand1 \u003d new DeleteGroupCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand2 \u003d new DeleteGroupCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand1Copy \u003d new DeleteGroupCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(deleteGroupCommand1Copy.equals(deleteGroupCommand1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(deleteGroupCommand1.equals(deleteGroupCommand1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different groups -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(deleteGroupCommand2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // null object -\u003e return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(deleteGroupCommand1.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void showNoGroup(Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model.updateFilteredGroupList(p -\u003e false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(model.getFilteredGroupList().isEmpty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedPerson \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                personInList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person personInFilteredList \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person personInList \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * address book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        outOfBoundIndex, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 37,
      "l2ejected": 4,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.EditGroupDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group editedGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cInteger\u003e newMemberIds \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group firstGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setMemberIDs(newMemberIds);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"new name\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(firstGroup, editedGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group anotherGroup \u003d model.getFilteredGroupList().get(2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"only changing the name field\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(editedGroup).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(anotherGroup, editedGroup);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), new EditGroupDescriptor());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group editedGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group secondGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedGroup.setName(new Name(\"CS2103\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"CS2103\").build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_EDIT_GROUP_SUCCESS, editedGroup);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel.setGroup(secondGroup, editedGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_duplicateGroupUnfilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group firstGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder(firstGroup).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(2), descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_duplicateGroupFilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d model.getAddressBook().getGroupList().get(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Index.fromOneBased(1), new EditGroupDescriptorBuilder(group).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, EditGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidGroupIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor descriptor \u003d new EditGroupDescriptorBuilder().withName(\"Any name\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(outOfBounds, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_invalidGroupIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(outOfBounds.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(outOfBounds,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"any name\").build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupDescriptor copyDescriptor \u003d new EditGroupDescriptorBuilder().withName(\"sample\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .withMemberIds(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3))).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        final EditGroupCommand editGroupCommand \u003d new EditGroupCommand(Index.fromOneBased(1), copyDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditGroupCommand copy \u003d new EditGroupCommand(Index.fromOneBased(1), copyDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(editGroupCommand.equals(copy));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(editGroupCommand.equals(editGroupCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //other types -\u003e false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //different index -\u003e false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(new EditGroupCommand(Index.fromOneBased(2), copyDescriptor)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //different descriptor -\u003e false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(editGroupCommand.equals(new EditGroupCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditGroupDescriptorBuilder().withName(\"another name\").build())));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, ViewType.EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, ViewType.HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"life.csv\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"group.csv\").toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"event.csv\").toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand firstImportCommand \u003d new ImportCommand(\"testing.csv\", \"testing2.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand secondImportCommand \u003d new ImportCommand(\"testing2.csv\", \"testing.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstImportCommand.equals(firstImportCommand));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand firstImportCommandCopy \u003d new ImportCommand(\"testing.csv\", \"testing2.csv\", \"testing2.csv\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstImportCommand.equals(firstImportCommandCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different file -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstImportCommand.equals(secondImportCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ListGroupCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void initialSetup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ListGroupCommand.MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        showGroupAtIndex(model, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ListGroupCommand.MESSAGE_SUCCESS, ViewType.GROUPS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand firstSuggestCommand \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand secondSuggestCommand \u003d new SuggestCommand(\"place\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstSuggestCommand.equals(firstSuggestCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand firstSuggestCommandCopy \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(firstSuggestCommand.equals(firstSuggestCommandCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // different file -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(firstSuggestCommand.equals(secondSuggestCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_zeroParameters_noSuggestionParameterProvided() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String emptyParameter \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(emptyParameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandFailure(suggestCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_wrongParameters_notSuggestionKeyword() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String wrongParameter \u003d \"wrong\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(wrongParameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandFailure(suggestCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void execute_person_personSuggested() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedMessage \u003d SuggestCommand.MESSAGE_PERSON_SUGGEST_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        expectedModel.suggestPerson();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertCommandSuccess(suggestCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand firstViewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand secondViewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON, \"recent\", 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        ViewCommand firstViewCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommandCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        // different parameter -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertFalse(firstViewCommand.equals(secondViewCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ViewCommand command \u003d new ViewCommand(outOfBoundIndex, \"places\", 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 32,
      "l2ejected": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand places \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand activities \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"activities\", 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(places.equals(places));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(activities.equals(activities));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand placesCopy \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(places.equals(placesCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand places2 \u003d new ViewGroupCommand(INDEX_SECOND_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(places2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different parameters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(places.equals(activities));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand command \u003d new ViewGroupCommand(outOfBoundIndex, \"places\", 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void execute_invalidParameter_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand command \u003d new ViewGroupCommand(INDEX_FIRST_PERSON, \"test\", 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertCommandFailure(command, model, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //public void execute_places_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //Group group \u003d model.getFilteredGroupList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //ViewCommand_group command \u003d new ViewCommand_group(INDEX_FIRST_PERSON, \"places\", 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //String expectedMessage \u003d ViewCommand_group.MESSAGE_PLACE + group.getName() + \".\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //expectedModel.showGroupPlaceList(group);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 8,
      "l2ejected": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person expectedPersonMultipleTags \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                INVALID_NAME_DESC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 133,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private final String nonEmptyEvent \u003d \"Some event.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_memberIndexSpecified_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_groupIndexSpecified_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1111\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithGroup(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidTimeField_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyHourField_success () {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Anywhere\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"11\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        event.setWithGroup(Integer.parseInt(targetIndex));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand expectedCommand \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyActivity_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyTime_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyPlace_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidTime_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15s\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(AddEventCommand.MESSAGE_INVALID_TIME_INPUT));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_stringAsTime_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15 s\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"s\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(ParserUtil.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyIndex_failure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(ParserUtil.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_requiredFieldsMissing_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \" \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d \"\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_bothMemberAndGroupPrefixPresent_failure() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String targetIndex \u003d \"1\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String place \u003d \"Some place\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String time \u003d \"15\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d activity + \" \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP + targetIndex + \" \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_MEMBER + targetIndex + \" \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_PLACE + place + \" \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_TIME + time;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "l2ejected": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEMBER_NOT_INT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_SPECIALCHAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.RC_NO_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.SOC_NO_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_allFields_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(RC_NO_TIME).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // normal execution"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_RC + MEMBER_DESC_1 + MEMBER_DESC_2,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddGroupCommand(expectedGroup)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NAME_DESC_SOC + NAME_DESC_RC + MEMBER_DESC_1 + MEMBER_DESC_2,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new AddGroupCommand(expectedGroup)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withoutMembersIds_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(SOC_NO_TIME).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_SOC, new AddGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withInvalidMemberIds_fail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d AddGroupCommandParser.MEMBER_NOT_INT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RC + INVALID_MEMBER_NOT_INT, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parse_withInvalidName_fail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_SPECIALCHAR, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PLACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        DeleteCommand command \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (DeleteCommand)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (EditCommand)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                (FindCommand)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parseCommand_add_event() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String activity \u003d \"Some activity\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String index \u003d \"1\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String place \u003d \"some place\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        final String time \u003d \"1111\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(AddEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + activity"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_MEMBER + index"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_PLACE + place"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + \" \" + PREFIX_TIME + time);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Event event \u003d new Event(activity, place, new Time(11, 11));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        event.setWithPerson(Integer.parseInt(index));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_listGroup() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD) instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(parser.parseCommand(ImportCommand.COMMAND_WORD + \" l/src/test/data/CsvFilesTest/life.csv \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \"g/src/test/data/CsvFilesTest/group.csv e/src/test/data/CsvFilesTest/event.csv\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                instanceof ImportCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_add_group() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(AddGroupCommand.COMMAND_WORD + \" n/SoCFriends\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                instanceof AddGroupCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void parseCommand_delete_group() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(DeleteGroupCommand.COMMAND_WORD + \" 2\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                instanceof DeleteGroupCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parseCommand_view_group() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(parser.parseCommand(ViewGroupCommand.COMMAND_WORD + \" places \" + PREFIX_GROUP + \"1\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            instanceof ViewGroupCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 51,
      "l2ejected": 20,
      "harrychengly": 8,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + NAME_DESC_AMY"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        EditPersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 81,
      "-": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_EXPORT_CSV \u003d \"lifeTEST.csv\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_EXPORT_CSV \u003d \"groupTEST.csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_EXPORT_CSV \u003d \"eventTEST.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ExportCommand expectedExportCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ExportCommand(\"lifeTEST.csv\", \"groupTEST.csv\", \"eventTEST.csv\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" l/lifeTEST.csv\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" g/groupTEST.csv\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" e/eventTEST.csv\", expectedExportCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        //multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" \\n l/\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + TEST_LIFE_EXPORT_CSV"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t g/\" + TEST_GROUP_EXPORT_CSV"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t e/\" + TEST_EVENT_EXPORT_CSV"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \"\\t\", expectedExportCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \" l/ \" + \" g/ \" + \" e/ \","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(\"Empty file name to export provided.\" + \"\\n\" + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_LIFE_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"life.csv\").toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_GROUP_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"group.csv\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String TEST_EVENT_CSV \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "            \"data\", \"CsvFilesTest\", \"event.csv\").toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsImportCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ImportCommand expectedImportCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new ImportCommand(TEST_LIFE_CSV, \"\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" l/\" + TEST_LIFE_CSV + \" g/\" + TEST_GROUP_CSV"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" e/\" + TEST_EVENT_CSV, expectedImportCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" \\n l/\" + TEST_LIFE_CSV"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                + \" \\n \\t g/\" + TEST_GROUP_CSV + \" \\n \\t e/\" + TEST_EVENT_CSV + \"\\t\", expectedImportCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \" l/ \" + \" g/ \" + \" e/ \","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_PATH + \"\\n\" + ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_PATH \u003d \"testing123.csv\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_SUGGEST \u003d \"invalid parameter\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String INVALID_PLACES \u003d \"ORCHARD\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private static final String VALID_PATH \u003d \"README.adoc\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                MESSAGE_INVALID_INDEX, ("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePath((String) null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePath(INVALID_PATH));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_validValueWithoutWhitespace_returnsPath() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedPath \u003d VALID_PATH;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePath(VALID_PATH));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parsePath_validValueWithWhitespace_returnsTrimmedPath() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String pathWithWhitespace \u003d WHITESPACE + VALID_PATH + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedPath \u003d VALID_PATH;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePath(pathWithWhitespace));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parseTime_emptyString_success() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String input \u003d \"0h 0m\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Time expectedTime \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(input));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSuggest(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_emptyString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggest(\"\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggest(INVALID_SUGGEST));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"person\", ParserUtil.parseSuggest(\"person\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathPerson() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"person\" + WHITESPACE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"person\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsPlace() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"place\", ParserUtil.parseSuggest(\"place\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathPlace() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"place\" + WHITESPACE;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"place\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithoutWhitespace_returnsActivity() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(\"activity\", ParserUtil.parseSuggest(\"activity\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parseSuggest_validValueWithWhitespace_returnsTrimmedPathActivity() throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String suggestWithWhitespace \u003d WHITESPACE + \"activity\" + WHITESPACE;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        String expectedSuggest \u003d \"activity\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertEquals(expectedSuggest, ParserUtil.parseSuggest(suggestWithWhitespace));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "l2ejected": 7,
      "harrychengly": 78,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                parser, \"some invalid string\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestPersonCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"person\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" person\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" person\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestPlaceCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"place\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" place\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \"  place   \", expectedSuggestCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void parse_validArgs_returnsSuggestActivityCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        SuggestCommand expectedSuggestCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "                new SuggestCommand(\"activity\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" activity\", expectedSuggestCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertParseSuccess(parser, \" activity   \", expectedSuggestCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harrychengly": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ViewCommandParser vcp \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e vcp.parse(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void parse_invalidParameter_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e vcp.parse(\"1 t\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyIndex_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \" places\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(vcp, userInput, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyParameter_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(vcp, userInput, ViewCommand.MESSAGE_INVALID_PARAMETER + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidParameter_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"1 test\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(vcp, userInput, ViewCommand.MESSAGE_INVALID_PARAMETER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 28,
      "l2ejected": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.ViewGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ViewGroupCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ViewGroupCommandParser parser \u003d new ViewGroupCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyIndex_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"places \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                + PREFIX_GROUP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, \"Index is not a non-zero unsigned integer.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_emptyParameter_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_GROUP + \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_invalidParameter_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d \"test\" + PREFIX_GROUP + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ViewGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void parse_allValidArguments_success() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String parameter \u003d \"activities\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String idx \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userInput \u003d parameter + \" \" + PREFIX_GROUP + idx;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(idx);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ViewGroupCommand expectedCommand \u003d new ViewGroupCommand(index, parameter, ViewGroupCommand.TYPE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "l2ejected": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPersons(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasGroup(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personsNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(addressBook.hasGroup(g1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        addressBook.addGroup(group);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(editedAlice);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(addressBook.hasPersons(personList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void removeGroup_test_returnFalse() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertThrows(GroupNotFoundException.class, () -\u003e addressBook.removeGroup((new Group(new Name(\"SoC Friend\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new PlaceList(new ArrayList\u003cString\u003e()), new ActivityList(new ArrayList\u003cString\u003e())))));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.groups;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return this.events;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 41,
      "harrychengly": 29,
      "l2ejected": 8,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersons(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGroup(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(BENSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(modelManager.hasPersons(personList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void hasPersons_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(BENSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(modelManager.hasPersons(personList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroupTest_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g2 \u003d new Group(new Name(\"RC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.addGroup(g1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.addGroup(g2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(modelManager.hasGroup(g1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(modelManager.hasGroup(g2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"SoC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g2 \u003d new Group(new Name(\"RC Friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(modelManager.hasGroup(g1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(modelManager.hasGroup(g2));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGroupList().remove(0));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvToAddressBook(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvGroupsToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvGroupsToAddressBook(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void importCsvEventsToAddressBook_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.importCsvEventsToAddressBook(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showPlaceList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showPlaceList(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showActivityList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showActivityList(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void showRecentList_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.showRecentList(null));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyRecent_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.copyRecent(null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void copyTime_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.copyTime(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        modelManager.updateFilteredPersonList("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 31,
      "terencemah": 15,
      "harrychengly": 49,
      "l2ejected": 10,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueEventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.remove(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Event firstEvent \u003d new Event(\"something\", \"somewhere\", new Time(11, 11));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Event secondEvent \u003d new Event(\"something\", \"somewhere\", new Time(11, 11));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //different EventId -\u003e return false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(firstEvent.equals(secondEvent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same Event -\u003e return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.equals(firstEvent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(secondEvent.equals(secondEvent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //same EventId, different Time -\u003e return true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event test \u003d firstEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        test.setTime(new Time(22, 22));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(test.equals(firstEvent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.isSameEvent(firstEvent));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event test \u003d firstEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        test.setTime(new Time(22, 22));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(test.isSameEvent(firstEvent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(firstEvent.isSameEvent(secondEvent));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void sameTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Event thirdEvent \u003d new Event(\"something\", \"somewhere\", new Time(22, 22));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        thirdEvent.setTime(new Time(11, 11));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(thirdEvent.getTime().equals(new Time(11, 11)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertTrue(firstEvent.toString().equals(\"Event: something place: somewhere for 11h 11m\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.testutil.TypicalGroups;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group soc \u003d TypicalGroups.SOC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Group rc \u003d TypicalGroups.RC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.equals(soc));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //same values -\u003e true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group socCopy \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.equals(socCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        // different values -\u003e false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse(soc.equals(rc));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //without member IDs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String socExpectedRepresentation \u003d \"Name: SoC Friends\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(soc.toString().equals(socExpectedRepresentation));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //with member IDs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String rcExpectedRepresentation \u003d \"Name: RC Friends. Members: 1, 2, 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        rc.setMemberIDs(new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(rc.toString().equals(rcExpectedRepresentation));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raivatshah": 43,
      "l2ejected": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueGroupListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.SOC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class UniqueGroupListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_nullGroups_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.containsGroups(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void contains_groupInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(uniqueGroupList.contains(group));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void containsGroups_groupsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(SOC);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        groupList.add(SOC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue(uniqueGroupList.contains(SOC));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.removeGroup(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void remove_exitingGroup_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(SOC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.removeGroup(SOC);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        UniqueGroupList expectedList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(expectedList, uniqueGroupList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.addGroup(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void add_duplicateGroup_throwsDuplicateGroupException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.addGroup(group));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addAll_duplicateGroup_throwsDuplicateGroupsException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        ArrayList\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniqueGroupList.addAll(groups);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.addAll(groups));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupNullTargetGroupThrowsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.setGroup(null, group));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupNullEditedGroupThrowsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGroupList.setGroup(group, null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupEditedGroupHasNonUniqueIdentityThrowsDuplicatePersonException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group1 \u003d new Group(new Name(\"Cinnamon Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows(DuplicateGroupException.class, () -\u003e uniqueGroupList.setGroup(group, group1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroupEditedGroupIsSameGroupSuccess() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Group group \u003d new Group(new Name(\"Soc Friends\"), new PlaceList(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new ActivityList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        uniqueGroupList.setGroup(group, group);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        UniqueGroupList expectedUniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        expectedUniqueGroupList.addGroup(group);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroups_nullUniqueGroupsList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueGroupList.setGroups((UniqueGroupList) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        ) -\u003e uniqueGroupList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 121,
      "harrychengly": 10,
      "l2ejected": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Address.isValidAddress("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        \"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 7,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FrequencyListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terencemah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terencemah"
        },
        "content": "public class FrequencyListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private FrequencyList list1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private FrequencyList list2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private ArrayList\u003cString\u003e strings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Fills the test FrequencyLists with arbitrary strings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void fillLists() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.strings.add(\"abc\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.strings.add(\"def\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.strings.add(\"ghi\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public void generateTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        fillLists();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list2 \u003d new FrequencyList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list1.generate(strings);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        list2.generate(strings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        assertTrue(list1.equals(list2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                predicate.test("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        new PersonBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withName(\"Alice\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                                .build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 21,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // same name, same phone, different time -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTime(\"2h 0m\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTime(\"1h 0m\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18,
      "l2ejected": 5,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertFalse(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void containsPersons_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(editedAlice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertTrue(uniquePersonList.containsPersons(personList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.addAll(personList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    public void addAll_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        personList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.addAll(personList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harrychengly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harrychengly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Person editedAlice \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DuplicatePersonException.class, ("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ) -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 17,
      "harrychengly": 35,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String MINUTES_RANGE_ERROR \u003d \"Minutes must be within 0-59 (inclusive).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String HOURS_RANGE_ERROR \u003d \"Hours must be 0 or more\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationValid() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertTrue(time.getHours() \u003d\u003d 2 \u0026\u0026 time.getMinutes() \u003d\u003d 59);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationInvalid_minutes() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Throwable exception \u003d Assertions.assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e new Time(162, 2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(exception.getMessage(), MINUTES_RANGE_ERROR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeCreationInvalid_hours() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Throwable exception \u003d Assertions.assertThrows(IllegalArgumentException.class, ("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ) -\u003e new Time(16, -5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(exception.getMessage(), HOURS_RANGE_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeEqualsFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time1.equals(time2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAnotherObjectEqualsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(50, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(new Name(\"Dummy\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time.equals(group));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeHashCodeDifferent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(59, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertFalse(time1.hashCode() \u003d\u003d time2.hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeToString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(\"2h 59m\", time.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAddTime_changeHour_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(59, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.addTime(1, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time1 \u003d new Time(0, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(time1, time);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeAddTime_noChangeHour_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(25, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.addTime(25, 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time2 \u003d new Time(50, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(time, time2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMinutesRangeError() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(0, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            time.setMinutes(120);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setMinutesSuccessfully() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.setMinutes(2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(2, time.getMinutes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setHoursRangeSuccessfully() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(1, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        time.setHours(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertEquals(1, time.getHours());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setHoursRangeError() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Time time \u003d new Time(30, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            time.setHours(-1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 106,
      "l2ejected": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class JsonAdaptedGroupTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group g1 \u003d new Group(new Name(\"soc friends\"), new PlaceList(new ArrayList\u003cString\u003e()),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new ActivityList(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(g1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(g1, group.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18,
      "l2ejected": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final String VALID_TIME \u003d \"000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final List VALID_PLACELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static final List VALID_ACTIVITYLIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TAGS, VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_TIME,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                VALID_TIME, VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_TIME,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        VALID_PLACELIST, VALID_ACTIVITYLIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 21,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                DataConversionException.class, ("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        ) -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE, JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 17,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddEventTypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class AddEventTypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private AddEventTypicalPersons() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "l2ejected": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to help with building Addressbook objects. Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * consistency with our custom {@link #assertThrows(Class, String, Executable)} method. To"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * standardize API calls in this project, users should use this method instead of {@link"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType, String expectedMessage, Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditGroupDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand.EditGroupDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to build {@code EditGroupDescriptor} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class EditGroupDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private EditGroupDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder(EditGroupDescriptor descriptor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor(descriptor);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a {@code EditGroupDescriptor} based on {@code Group} instance provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder(Group group) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor \u003d new EditGroupDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor.setName(group.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.descriptor.setMemberIds(group.getMembers());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the {@code Name} of the {@code EditGroupDescriptor}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the member ids of the {@code EditGroupDescriptor}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptorBuilder withMemberIds(ArrayList\u003cInteger\u003e ids) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor.setMemberIds(ids);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Builds an edit group descriptor based on the descriptor in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * the current {@code EditGroupDescriptorBuilder } instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "      * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public EditGroupDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class to help with building Group Objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"SoC Friends\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final int DEFAULT_MINS \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final int DEFAULT_HOURS \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final ArrayList\u003cInteger\u003e DEFAULT_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_PLACELIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_ACTIVITYLIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Time timeSpent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e memberIds;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cInteger\u003e eventIDs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private PlaceList places;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ActivityList activities;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d new Time(DEFAULT_MINS, DEFAULT_HOURS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIds \u003d DEFAULT_LIST;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d DEFAULT_LIST;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d new PlaceList(DEFAULT_PLACELIST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d new ActivityList(DEFAULT_ACTIVITYLIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        name \u003d groupToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timeSpent \u003d groupToCopy.getTimeSpent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        memberIds \u003d groupToCopy.getMembers();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        eventIDs \u003d groupToCopy.getEvents();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d groupToCopy.getPlaceList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d groupToCopy.getActivityList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for group Id."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withId(int id) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withTime(String time) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.timeSpent \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for withMembers."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param memberIds"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withMembers(ArrayList\u003cInteger\u003e memberIds) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.memberIds \u003d memberIds;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Sets the code for withEvents."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param eventIDs"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GroupBuilder withEvents(ArrayList\u003cInteger\u003e eventIDs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.eventIDs \u003d eventIDs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code PlaceList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public GroupBuilder withPlaceList(String input) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.places \u003d ParserUtil.parsePlaces(input);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public GroupBuilder withActivityList(String input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activities \u003d ParserUtil.parseActivities(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Builds a group with params in this class."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Group group \u003d new Group(name, places, activities);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setTimeSpent(timeSpent);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setMemberIDs(memberIds);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        group.setEventIDs(eventIDs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 101,
      "l2ejected": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.EventDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.RecentEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasPersons(List\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public boolean hasEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvToAddressBook(List\u003cPerson\u003e importedPeople) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvGroupsToAddressBook(List\u003cGroup\u003e importedGroup) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void importCsvEventsToAddressBook(List\u003cEvent\u003e importedEvent) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showPlaceList(Person target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showActivityList(Person target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showRecentList(Person target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void showTime() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestPerson() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestPlace() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void suggestActivity() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void copyRecent(ObservableList\u003cRecentEvent\u003e list) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void copyTime(ObservableList\u003cTime\u003e list) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cEventDescriptor\u003e getFrequencyList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cRecentEvent\u003e getRecentList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ObservableList\u003cTime\u003e getTimeList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupActivityList(Group groupToView) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void showGroupPlaceList(Group groupToView) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 231,
      "l2ejected": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.ActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.PlaceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terencemah"
        },
        "content": "import seedu.address.model.person.TimeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int DEFAULT_MINS \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final int DEFAULT_HOURS \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_PLACELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_ACTIVITYLIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_TIMELIST \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private PlaceList places;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ActivityList activities;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    private TimeList times;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        time \u003d new Time(DEFAULT_MINS, DEFAULT_HOURS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d new PlaceList(DEFAULT_PLACELIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d new ActivityList(DEFAULT_ACTIVITYLIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d new TimeList(DEFAULT_TIMELIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        time \u003d personToCopy.getTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        places \u003d personToCopy.getPlaceList2();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        activities \u003d personToCopy.getActivityList2();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        times \u003d personToCopy.getTimeList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code Time} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withTime(String time) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.time \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Sets the {@code PlaceList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withPlaceList(String input) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.places \u003d ParserUtil.parsePlaces(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public PersonBuilder withActivityList(String input) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.activities \u003d ParserUtil.parseActivities(input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     * Sets the {@code TimeList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terencemah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    public PersonBuilder withTimeList(String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        this.times \u003d ParserUtil.parseTimes(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "terencemah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "terencemah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terencemah"
        },
        "content": "        return new Person(name, phone, email, address, tags, time, places, activities, times);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terencemah": 15,
      "l2ejected": 42,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getPhone()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getEmail()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getAddress()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 13,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"{%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  }%n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"}\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A utility class containing list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group SOC \u003d new GroupBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withName(\"SoC Friends\").withTime(\"1h 1m\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group RC \u003d new GroupBuilder().withName(\"RC Friends\").withTime(\"2h 2m\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group NS \u003d new GroupBuilder().withName(\"NS Friends\").withTime(\"0h 30m\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group SOC_NO_TIME \u003d new GroupBuilder().withName(\"SoC Friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final Group RC_NO_TIME \u003d new GroupBuilder().withName(\"RC Friends\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withMembers(new ArrayList\u003c\u003e(Arrays.asList(1, 2))).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TypicalGroups() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical groups"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ab.addGroup(group);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SOC, RC, NS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTime(\"0h 0m\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 5,
      "l2ejected": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 9,
      "-": 107
    }
  }
]
